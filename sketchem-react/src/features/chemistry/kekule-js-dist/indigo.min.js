!(function (e) {
    "use strict";
    var t = Kekule.EmscriptenUtils,
        o = {
            usingModulaize: !0,
            moduleName: "IndigoModule",
            moduleInitEventName: "Indigo.Initialized",
            moduleInitCallbackName: "__$indigoInitialized$__",
            indigoAdaptFuncName: "CreateIndigo",
        };
    (Kekule.Indigo = {
        _autoEnabled: !0,
        _module: null,
        _indigo: null,
        SCRIPT_FILE: "indigo.js",
        HELPER_SCRIPT_FILE: "indigoAdapter.js",
        _enableFuncs: [],
        isScriptLoaded: function () {
            return t.isSupported(o.moduleName) && void 0 !== e[o.indigoAdaptFuncName];
        },
        getIndigoInitOptions: function () {
            return o;
        },
        getModule: function () {
            return n._module || (n._module = t.getRootModule(o.moduleName, o)), n._module;
        },
        setModule: function (e) {
            (n._module = e), t.setRootModule(o.moduleName, e);
        },
        getIndigo: function () {
            if (!n._indigo) {
                var t = n.getModule();
                t && (n._indigo = e[o.indigoAdaptFuncName](t));
            }
            return n._indigo;
        },
        getClassCtor: function (e) {
            return t.getClassCtor(e, n.getModule());
        },
        isAvailable: function () {
            return n.getModule() && n.getIndigo();
        },
        enable: function (e) {
            n.isScriptLoaded()
                ? (n._enableAllFunctions(), e && e())
                : n.loadIndigoScript(Kekule.$jsRoot.document, function (t) {
                      t || n._enableAllFunctions(), e && e(t);
                  });
        },
        _enableAllFunctions: function () {
            if (t.isModuleReady(o.moduleName))
                for (var e = n._enableFuncs, i = 0, r = e.length; i < r; ++i) {
                    var l = e[i];
                    l && l();
                }
        },
    }),
        (Kekule.Indigo.getIndigoPath = function () {
            var e = Kekule.environment.getEnvVar("indigo.path");
            e || ((e = Kekule.isUsingMinJs() ? "extra/" : "_extras/Indigo/"), (e = Kekule.getScriptPath() + e));
            return e;
        }),
        (Kekule.Indigo.getIndigoScriptUrl = function () {
            var e = Kekule.environment.getEnvVar("indigo.scriptSrc");
            e || ((e = n.getIndigoPath() + n.SCRIPT_FILE), Kekule.isUsingMinJs() || (e += ".dev"));
            return e;
        }),
        (Kekule.Indigo.getIndigoHelperScriptUrl = function () {
            return n.getIndigoPath() + n.HELPER_SCRIPT_FILE;
        }),
        (Kekule.Indigo.loadIndigoScript = function (e, i) {
            e || (e = Kekule.$jsRoot.document);
            var r = function (e) {
                (n._scriptLoadedBySelf = !e), e || Kekule.Indigo.getIndigo(), i && i(e);
            };
            if (n._scriptLoadedBySelf || n.isScriptLoaded()) r();
            else {
                var l = n.getIndigoScriptUrl();
                t.loadScript(
                    l,
                    function (t) {
                        t ? r(t) : Kekule.ScriptFileUtils.appendScriptFiles(e, [n.getIndigoHelperScriptUrl()], r);
                    },
                    e,
                    o
                );
            }
        });
    var n = Kekule.Indigo;
    (Kekule.Indigo.AdaptUtils = {
        iMolToKekule: function (e) {
            var t = n.getIndigo(),
                o = t.molfile(e);
            return t.free(e), Kekule.IO.loadFormatData(o, Kekule.IO.DataFormat.MOL);
        },
        kMolToIndigo: function (e) {
            var t = n.getIndigo(),
                o = Kekule.IO.saveFormatData(e, Kekule.IO.DataFormat.MOL);
            return t.loadMoleculeFromString(o);
        },
    }),
        Kekule._registerAfterLoadSysProc(function () {
            n._autoEnabled &&
                n.isScriptLoaded() &&
                t.ensureModuleReady(Kekule.$jsRoot.document, o, n._enableAllFunctions);
        });
})(this),
    (function () {
        "use strict";
        Kekule.EmscriptenUtils;
        var e = Kekule.Indigo;
        (Kekule.IO.IndigoReader = Class.create(Kekule.IO.ChemDataReader, {
            CLASS_NAME: "Kekule.IO.IndigoReader",
            doReadData: function (t, o, n, i) {
                var r = e.getIndigo(),
                    l = r.loadMoleculeFromString(t);
                if (l >= 0) {
                    if (n === Kekule.IO.DataFormat.SMILES) {
                        !i || i.autoLayout || Kekule.ObjUtils.isUnset(i.autoLayout);
                        0;
                    }
                    var u = r.molfile(l);
                    return r.free(l), Kekule.IO.loadFormatData(u, Kekule.IO.DataFormat.MOL);
                }
                return null;
            },
        })),
            (Kekule.IO.registerAllIndigoFormats = function () {
                e.isAvailable() &&
                    Kekule.IO.ChemDataReaderManager.register(
                        "Indigo-smiles",
                        Kekule.IO.IndigoReader,
                        Kekule.IO.DataFormat.SMILES
                    );
            }),
            (Kekule.IO.enableIndigoFormats = function () {
                e.isAvailable()
                    ? Kekule.IO.registerAllIndigoFormats()
                    : e.loadIndigoScript(document, function () {
                          Kekule.IO.registerAllIndigoFormats();
                      });
            }),
            e._enableFuncs.push(Kekule.IO.registerAllIndigoFormats);
    })(),
    (function () {
        "use strict";
        var e = Kekule.Indigo;
        (Kekule.Indigo.StructUtils = {
            generate2DStructure: function (t, o, n) {
                var i = e.getIndigo(),
                    r = e.AdaptUtils.kMolToIndigo(t);
                return i.setOption("smart-layout", "true"), i.layout(r), e.AdaptUtils.iMolToKekule(r);
            },
        }),
            Kekule.Calculator &&
                ((Kekule.Calculator.IndigoStructure2DGenerator = Class.create(
                    Kekule.Calculator.AbstractStructureGenerator,
                    {
                        CLASS_NAME: "Kekule.Calculator.IndigoStructure2DGenerator",
                        execute: function (e) {
                            var t, o;
                            try {
                                o = this.executeSync(e);
                            } catch (e) {
                                t = e;
                            }
                            t ? (Kekule.error(t), this.error(t)) : o && (t ? this.error(t) : this.done());
                        },
                        doExecuteSync: function (e) {
                            if (Kekule.Indigo) {
                                var t = this;
                                Kekule.Indigo.loadIndigoScript(null, function () {
                                    var o;
                                    try {
                                        var n = Kekule.Indigo.StructUtils.generate2DStructure(
                                            t.getSourceMol(),
                                            t.getOptions()
                                        );
                                        t.setGeneratedMol(n);
                                    } catch (e) {
                                        o = e;
                                    }
                                    o || t.done(), e && e(o);
                                });
                            } else Kekule.error(Kekule.$L("ErrorMsg.MODULE_NOT_LOADED").format("Indigo"));
                            return !1;
                        },
                    }
                )),
                Kekule.Calculator.ServiceManager.register(
                    Kekule.Calculator.Services.GEN2D,
                    Kekule.Calculator.IndigoStructure2DGenerator,
                    "indigo",
                    0
                ));
    })();
