!(function () {
    "use strict";
    var e = Class.PropertyScope,
        t = Kekule.ArrayUtils,
        a = Kekule.Unit;
    Kekule.globalOptions.add("spectrum", {
        spectrumInfo: { enablePrefixOmissionInGetter: !0 },
        data: { allowedComparisonErrorRate: 5e-8 },
    }),
        (Kekule.ComparisonMethod.SPECTRUM_DATA = 30),
        (Kekule.Spectroscopy = {}),
        (Kekule.Spectroscopy.DataMode = { CONTINUOUS: 1, PEAK: 2 }),
        (Kekule.Spectroscopy.DataPeakPosition = { MAX: 0, MIN: 1 }),
        (Kekule.Spectroscopy.Utils = {
            getSpectrumPeakPosition: function (e) {
                return (e.getSpectrumType
                    ? e.getSpectrumType()
                    : e.getParentSpectrum() && e.getParentSpectrum().getSpectrumType()) ===
                    Kekule.Spectroscopy.SpectrumType.IR
                    ? Kekule.Spectroscopy.DataPeakPosition.MIN
                    : Kekule.Spectroscopy.DataPeakPosition.MAX;
            },
            expandDataRange: function (e, a) {
                for (var r = t.toArray(a), n = e || {}, i = 0, o = r.length; i < o; ++i)
                    for (var s = r[i], l = Kekule.ObjUtils.getOwnedFieldNames(s), u = 0, c = l.length; u < c; ++u) {
                        var d = l[u],
                            p = s[d];
                        n[d]
                            ? p < n[d].min
                                ? (n[d].min = p)
                                : p > n[d].max && (n[d].max = p)
                            : (n[d] = { min: p, max: p });
                    }
                return n;
            },
            mergeDataRange: function (e, a) {
                var r = {},
                    n = t.clone(Kekule.ObjUtils.getOwnedFieldNames(e));
                t.pushUnique(n, Kekule.ObjUtils.getOwnedFieldNames(a));
                for (var i = 0, o = n.length; i < o; ++i) {
                    var s = n[i];
                    e[s]
                        ? a[s]
                            ? (r[s] = {
                                  min: e[s].min < a[s].min ? e[s].min : a[s].min,
                                  max: e[s].max > a[s].max ? e[s].max : a[s].max,
                              })
                            : (r[s] = Object.extend(e[s]))
                        : (r[s] = Object.extend(a[s]));
                }
                return r;
            },
            calcScalePointInfo: function (e, t, a) {
                a <= 0 && (a = 10);
                var r,
                    n = [Math.log10(Math.abs(e)), Math.log10(Math.abs(t))],
                    i = Math.floor(Math.max(n[0], n[1])),
                    o = Math.sign(e) === Math.sign(t) ? Math.floor(Math.min(n[0], n[1], 0)) : -1 / 0,
                    s = i > 6,
                    l = t - e,
                    u = l / a,
                    c = Math.max(Math.floor(Math.log10(Math.abs(u))), o),
                    d = Math.pow(10, c);
                r = r < 10 && l > 0.5 ? 2 * Math.ceil(r / d / 2) * d : Math.ceil(u / d) * d;
                for (
                    var p = Math.ceil(e / r) * r,
                        f = Math.floor(t / r) * r,
                        m = {
                            useSciForm: s,
                            scaleFrom: p,
                            scaleTo: f,
                            scaleSectionCount: Math.round((f - p) / r),
                            scaleValues: [],
                            scaleBase: d,
                            scaleFromOnBase: p / d,
                            scaleToOnBase: f / d,
                            fixDigitsCountAfterPoint: Math.max(-c, 0),
                        },
                        h = 0,
                        S = m.scaleSectionCount + 1;
                    h < S;
                    ++h
                )
                    m.scaleValues.push(Math.round((h * r) / d) * d + p);
                return m;
            },
            generateInfoKey: function (e, t, a) {
                var n = t || a;
                return n ? n + r.DELIMITER + e : e;
            },
            getDefaultDataExtraInfoClass: function (e) {
                return e.getMode() === Kekule.Spectroscopy.DataMode.PEAK
                    ? Kekule.Spectroscopy.SpectrumPeakDetails
                    : Kekule.Spectroscopy.SpectrumDataDetails;
            },
            createDefaultDataExtraInfoObject: function (e) {
                var t = Kekule.Spectroscopy.Utils.getDefaultDataExtraInfoClass(e);
                return t && new t();
            },
        }),
        (Kekule.Spectroscopy.MetaPropNamespace = {
            CUSTOM: "custom",
            DELIMITER: ".",
            _namespaces: [],
            register: function (e) {
                t.pushUnique(r._namespaces, e);
            },
            unregister: function (e) {
                r._namespaces = t.exclude(r._namespaces, e);
            },
            getNamespaces: function () {
                return t.clone(r._namespaces);
            },
            createPropertyName: function (e, t) {
                return (e || "") + r.DELIMITER + t;
            },
            getPropertyNameDetail: function (e) {
                var t,
                    a,
                    n = e.lastIndexOf(r.DELIMITER);
                return (
                    n >= 0 ? ((t = e.substring(0, n)), (a = e.substr(n + 1))) : (a = e), { namespace: t, coreName: a }
                );
            },
            getPropertyCoreName: function (e) {
                return r.getPropertyNameDetail(e).coreName;
            },
        });
    var r = Kekule.Spectroscopy.MetaPropNamespace;
    r.register(r.CUSTOM),
        (Kekule.Spectroscopy.DataValueConverterManager = {
            _converters: [],
            register: function (e) {
                i._converters.push(e);
            },
            unregister: function (e) {
                var t = DMC._converters.indexOf(e);
                t >= 0 && DMC._converters.splice(t, 1);
            },
            doConvert: function (e, t, a, r, n, o) {
                if (a === r) return e;
                if (!Kekule.NumUtils.isNormalNumber(e)) return e;
                var s = i._converters;
                if (s.length) {
                    var l = Kekule.Unit.getUnit(a),
                        u = Kekule.Unit.getUnit(r);
                    if (l && u)
                        for (var c = s.length - 1; c >= 0; --c) {
                            var d = s[c];
                            if (d.canConvert(e, t, l, u, n, o)) return d.convert(e, t, l, u, n, o);
                        }
                }
                return (
                    Kekule.error(Kekule.$L("ErrorMsg.UNABLE_TO_CONVERT_BETWEEN_UNITS").format(l.getKey(), u.getKey())),
                    null
                );
            },
            getAltUnits: function (e, a, r, n) {
                var o = [],
                    s = i._converters;
                if (s.length) {
                    var l = Kekule.Unit.getUnit(a);
                    if (l)
                        for (var u = s.length - 1; u >= 0; --u) {
                            var c = s[u].getAltUnits(e, l, r, n) || [];
                            t.pushUnique(o, c);
                        }
                }
                return o;
            },
        });
    var n,
        i = Kekule.Spectroscopy.DataValueConverterManager;
    i.register({
        convert: function (e, t, a, r, n, i) {
            return a.convertValueTo(e, r);
        },
        canConvert: function (e, t, a, r, n, i) {
            return a.canConvertValueTo(r);
        },
        getAltUnits: function (e, t, a, r) {
            return t.category.getConvertableUnits();
        },
    }),
        i.register({
            convert: function (e, t, r, n, i, o) {
                var s = o.getParameter("NMR.ObserveFrequency");
                if (r.category === a.Frequency) {
                    var l = (u = r.convertValueTo(e, s.getUnit())) / s.getValue();
                    return a.Dimensionless.ONE.convertValueTo(l, n);
                }
                if (r.category === Kekule.Unit.Dimensionless) {
                    var u = r.convertValueToStandard(e) * s.getValue();
                    return a.getUnit(s.getUnit()).convertValueTo(u, n);
                }
            },
            canConvert: function (e, t, a, r, n, i) {
                if (i.getSpectrumType() === Kekule.Spectroscopy.SpectrumType.NMR) {
                    var o = i.getParameter("NMR.ObserveFrequency"),
                        s = o && o.getValue();
                    if (
                        o &&
                        s &&
                        Kekule.NumUtils.isNormalNumber(s) &&
                        Kekule.Unit.getUnit(o.getUnit()).category === Kekule.Unit.Frequency
                    )
                        return (
                            (a.category === Kekule.Unit.Frequency && r.category === Kekule.Unit.Dimensionless) ||
                            (a.category === Kekule.Unit.Dimensionless && r.category === Kekule.Unit.Frequency)
                        );
                }
                return !1;
            },
            getAltUnits: function (e, t, a, r) {
                var n = [];
                if (r.getSpectrumType() === Kekule.Spectroscopy.SpectrumType.NMR) {
                    var i = r.getParameter("NMR.ObserveFrequency"),
                        o = i && i.getValue();
                    i &&
                        o &&
                        Kekule.NumUtils.isNormalNumber(o) &&
                        Kekule.Unit.getUnit(i.getUnit()).category === Kekule.Unit.Frequency &&
                        (t.category === Kekule.Unit.Frequency
                            ? n.push(Kekule.Unit.Dimensionless.PARTS_PER_MILLION)
                            : t.category === Kekule.Unit.Dimensionless &&
                              (n = n.concat(Kekule.Unit.Frequency.getConvertableUnits())));
                }
                return n;
            },
        }),
        i.register({
            convert: function (e, t, r, n, i, o) {
                if (r.category === a.Length) {
                    var s = 1 / r.convertValueToStandardEx(e).value;
                    return n.convertValueFromStandard(s);
                }
                if (r.category === a.WaveNumber) {
                    var l = 1 / r.convertValueToStandardEx(e).value;
                    return n.convertValueFromStandard(l);
                }
            },
            canConvert: function (e, t, a, r, n, i) {
                return (
                    i.getSpectrumType() === Kekule.Spectroscopy.SpectrumType.IR &&
                    ((a.category === Kekule.Unit.Length && r.category === Kekule.Unit.WaveNumber) ||
                        (a.category === Kekule.Unit.WaveNumber && r.category === Kekule.Unit.Length))
                );
            },
            getAltUnits: function (e, t, a, r) {
                var n;
                return (
                    r.getSpectrumType() === Kekule.Spectroscopy.SpectrumType.IR &&
                        (t.category === Kekule.Unit.Length
                            ? (n = [Kekule.Unit.WaveNumber.RECIPROCAL_CENTIMETER])
                            : t.category === Kekule.Unit.WaveNumber &&
                              (n = [Kekule.Unit.Length.getConvertableUnits()])),
                    n
                );
            },
        }),
        (Kekule.Spectroscopy.SpectrumVarDefinition = Class.create(Kekule.VarDefinition, {
            CLASS_NAME: "Kekule.Spectroscopy.SpectrumVarDefinition",
            initProperties: function () {
                this.defineProp("internalUnit", {
                    dataType: DataType.STRING,
                    serializable: !1,
                    getter: function () {
                        return this.getUnit();
                    },
                    setter: function (e) {
                        this.setUnit(e);
                    },
                }),
                    this.defineProp("externalUnit", { dataType: DataType.STRING });
            },
            getActualExternalUnit: function () {
                return this.getExternalUnit() || this.getInternalUnit();
            },
            hasDifferentExternalUnit: function () {
                var e = this.getExternalUnit();
                return !(!e || e === this.getInternalUnit());
            },
        })),
        (Kekule.Spectroscopy.SpectrumDataSection = Class.create(Kekule.ChemObject, {
            CLASS_NAME: "Kekule.Spectroscopy.SpectrumDataSection",
            DATAITEM_SRC_FIELD_NAME: "_src",
            DATAITEM_EXTRA_FIELD_NAME: "_extra",
            initialize: function (e, t, a) {
                this.updateDataModifiedTime(),
                    this.setPropStoreFieldValue("name", e),
                    this.setPropStoreFieldValue("localVarInfos", []),
                    this.setPropStoreFieldValue("dataItems", []),
                    this.setPropStoreFieldValue("parent", t),
                    this.tryApplySuper("initialize", []),
                    a && this.setLocalVariables(a),
                    this.setDataSorted(!0),
                    (this._cache = {});
            },
            doFinalize: function () {
                this.getParent() && this.getParent().removeChild && this.getParent().removeChild(this), this.clear();
                for (var e = this.getVariables(), t = 0, a = e.length; t < a; ++t) e[t].finalize();
                this.setPropStoreFieldValue("localVarInfos", null), this.tryApplySuper("doFinalize");
            },
            initProperties: function () {
                this.defineProp("parent", { dataType: "Kekule.MapEx", setter: null, serializable: !1 }),
                    this.defineProp("name", { dataType: DataType.STRING }),
                    this.defineProp("title", { dataType: DataType.STRING }),
                    this.defineProp("localVarInfos", { dataType: DataType.ARRAY, setter: null }),
                    this.defineProp("localVarSymbols", {
                        dataType: DataType.ARRAY,
                        scope: e.PRIVATE,
                        serializable: !1,
                        getter: function () {
                            var e = [],
                                t = this.getActualLocalVarInfos();
                            if (t && t.length)
                                for (var a = 0, r = t.length; a < r; ++a) {
                                    var n = t[a];
                                    e.push(n.symbol);
                                }
                            return e;
                        },
                        setter: function (e) {
                            var t = e || [];
                            this._updateLocalVarInfosFromSymbols(t);
                        },
                    }),
                    this.defineProp("mode", {
                        dataType: DataType.INT,
                        enumSource: Kekule.Spectroscopy.DataMode,
                        setter: function (e) {
                            this.getMode() !== e && (this.setPropStoreFieldValue("mode", e), this.notifyDataChange());
                        },
                    }),
                    this.defineProp("defPeakRoot", { dataType: DataType.Hash }),
                    this.defineProp("modifiedTime", { dataType: DataType.DATE, setter: null }),
                    this.defineProp("dataItems", { dataType: DataType.ARRAY, setter: null, scope: e.PRIVATE });
            },
            initPropValues: function () {
                this.tryApplySuper("initPropValues"), this.setMode(Kekule.Spectroscopy.DataMode.CONTINUOUS);
            },
            getAutoIdPrefix: function () {
                return "sec";
            },
            ownerChanged: function (e, t) {
                for (var a = 0, r = this.getDataCount(); a < r; ++a) {
                    var n = this.getExtraInfoAt(a);
                    n && n.setOwner && n.setOwner(e);
                }
                this.tryApplySuper("ownerChanged", [e, t]);
            },
            doSaveProp: function (e, t, a, r, n, i, o, s) {
                if (t.serializable) {
                    if ("dataItems" === t.name) {
                        var l = n.createChildStorageNode(a, n.propNameToStorageName("dataItems"), !1),
                            u = n.createChildStorageNode(l, n.propNameToStorageName("values"), !0);
                        n.saveObj(e.getDataItems(), u, r, i, o, s);
                        var c = e._extractAllExtraInfoOfDataItems();
                        if (c.length) {
                            u = n.createChildStorageNode(l, n.propNameToStorageName("extras"), !0);
                            n.saveObj(c, u, r, i, o, s);
                        }
                        return !0;
                    }
                    return !1;
                }
            },
            doLoadProp: function (e, t, a, r, n, i, o) {
                if (t.serializable) {
                    if ("dataItems" === t.name) {
                        var s = [],
                            l = r.getChildStorageNode(a, r.propNameToStorageName("dataItems")),
                            u = r.getChildStorageNode(l, r.propNameToStorageName("values"));
                        if (
                            (r.loadObj(s, u, n, i, o),
                            e.setPropStoreFieldValue("dataItems", s),
                            (u = r.getChildStorageNode(l, r.propNameToStorageName("extras"))))
                        ) {
                            var c = [];
                            r.loadObj(c, u, n, i, o), e._writeExtraInfoOfDataItems(c);
                        }
                        return !0;
                    }
                    return !1;
                }
            },
            _setSysFieldOfDataItem: function (e, t, a) {
                try {
                    Object.defineProperty
                        ? Object.defineProperty(e, t, { value: a, configurable: !0, writable: !0, enumerable: !1 })
                        : (e[t] = a);
                } catch (r) {
                    e[t] = a;
                }
            },
            _extractAllExtraInfoOfDataItems: function () {
                for (var e = [], t = 0, a = this.getDataCount(); t < a; ++t) {
                    var r = this.getExtraInfoAt(t);
                    r && e.push({ index: t, info: r });
                }
                return e;
            },
            _writeExtraInfoOfDataItems: function (e) {
                for (var t = 0, a = e.length; t < a; ++t) {
                    var r = e[t];
                    this.setExtraInfoAt(r.index, r.info);
                }
            },
            isEmpty: function () {
                return this.getDataCount() <= 0;
            },
            isPeakSection: function () {
                return this.getMode() === Kekule.Spectroscopy.DataMode.PEAK;
            },
            hasPeakAssignments: function () {
                if (this.isPeakSection()) {
                    for (var e = !1, t = 0, a = this.getDataCount(); t < a; ++t) {
                        var r = this.getExtraInfoAt(t);
                        if (r && r && r.hasAssignments && r.hasAssignments()) {
                            e = !0;
                            break;
                        }
                    }
                    return e;
                }
                return !1;
            },
            getParentSpectrum: function () {
                for (var e = this.getParent(); e && !(e instanceof Kekule.Spectroscopy.Spectrum) && e.getParent; )
                    e = e.getParent();
                return e;
            },
            getParentVariables: function () {
                var e = this.getParentSpectrum();
                return (e && e.getVariables()) || [];
            },
            getActualLocalVarInfos: function () {
                var e = t.clone(this.getLocalVarInfos());
                if (!e || !e.length)
                    for (var a = this.getParentVariables(), r = 0, n = a.length; r < n; ++r)
                        e.push({ symbol: a[r].symbol });
                return e;
            },
            _updateLocalVarInfosFromSymbols: function (e, t) {
                for (var a = e || [], r = [], n = this.getParentSpectrum(), i = 0, o = a.length; i < o; ++i) {
                    var s = a[i];
                    this._pushLocalVariable(n, s, r);
                }
                this.setPropStoreFieldValue("localVarInfos", r), this.notifyPropSet("localVarInfos", r, t);
            },
            _pushLocalVariable: function (e, t, a) {
                (a || (a = this.getLocalVarInfos()), e && e.getVariable) && e.getVariable(t) && a.push({ symbol: t });
            },
            setLocalVariables: function (e) {
                for (var t, a = [], r = [], n = 0, i = e.length; n < i; ++n)
                    "string" == typeof (t = e[n]) ? r.push(t) : a.push(t);
                a.length
                    ? (this.setPropStoreFieldValue("localVarInfos", a), this.notifyPropSet("localVarInfos", a))
                    : r.length && this._updateLocalVarInfosFromSymbols(r);
            },
            getLocalVarInfoIndex: function (e) {
                var t = -1,
                    a = this.getActualLocalVarInfos();
                if ("number" == typeof e) t = e;
                else
                    for (var r = e.getSymbol ? e.getSymbol() : e, n = 0, i = a.length; n < i; ++n)
                        if (r === a[n].symbol) {
                            t = n;
                            break;
                        }
                return t;
            },
            getLocalVarInfo: function (e) {
                var t = this.getLocalVarInfoIndex(e);
                return t >= 0 ? this.getActualLocalVarInfos()[t] : null;
            },
            getLocalVarInfoValue: function (e, t) {
                var a = this.getLocalVarInfo(e);
                return a && a[t];
            },
            setLocalVarInfoValue: function (e, t, a) {
                this.getLocalVarInfo(e)[t] = a;
            },
            getLocalVarDef: function (e) {
                var t = this.getLocalVarInfoValue(e, "symbol"),
                    a = this.getParentSpectrum();
                return a && a.getVariable(t);
            },
            getLocalVarInfoOfDependency: function (e) {
                for (var t = [], a = this.getActualLocalVarInfos(), r = 0, n = a.length; r < n; ++r) {
                    var i = this.getLocalVarDef(r);
                    if (i.getDependency() === e) {
                        var o = Object.extend({}, a[r]);
                        (o.varDef = i), t.push(o);
                    }
                }
                return t;
            },
            getLocalVarSymbolsOfDependency: function (e) {
                for (var t = this.getLocalVarInfoOfDependency(e), a = [], r = 0, n = t.length; r < n; ++r)
                    a.push(t[r].varDef.getSymbol());
                return a;
            },
            getContinuousVarRange: function (e) {
                var t = this.getParent(),
                    a = this.getLocalVarInfo(e);
                return a.continuousRange || (t && t.getContinuousVarRange && t.getContinuousVarRange(a.symbol));
            },
            setContinuousVarRange: function (e, t, a) {
                return this.setLocalVarInfoValue(e, "continuousRange", { fromValue: t, toValue: a }), this;
            },
            clearContinuousVarRange: function (e) {
                return this.setLocalVarInfoValue(e, "continuousRange", null), this;
            },
            setDefaultVarValue: function (e, t) {
                return this.setLocalVarInfoValue(e, "defaultValue", t), this;
            },
            clearDefaultVarValue: function (e) {
                return this.setDefaultVarValue(e, null);
            },
            getDefaultVarValue: function (e) {
                var t = this.getLocalVarInfoValue(e, "defaultValue");
                if (Kekule.ObjUtils.isUnset(t)) {
                    var a = this.getLocalVarInfo(e),
                        r = this.getParent();
                    t = r && r.getDefaultVarValue(a.symbol);
                }
                return t;
            },
            getVarDisplayRange: function (e, t) {
                var a = t || {},
                    r = this.getLocalVarInfoIndex(e),
                    n = this.getLocalVarInfo(r),
                    i = n.displayRange ? Object.extend({}, n.displayRange) : null;
                if (!i) {
                    var o = this.getLocalVarDef(r).getInfoValue("displayRange");
                    o && (i = Object.extend({}, o));
                }
                return (
                    !i && a.autoCalc && (i = this.calcDataRange(r, { basedOnInternalUnit: !0 })[n.symbol]),
                    a.basedOnInternalUnit || (i = this._convertDataRangeToExternalUnit(i, r)),
                    i
                );
            },
            setVarDisplayRange: function (e, t, a, r) {
                var n = { min: t, max: a };
                if ((r || {}).basedOnExternalUnit) {
                    var i = this.getLocalVarInfoIndex(e);
                    n = this._convertDataRangeToInternalUnit(n, i);
                }
                return this.setLocalVarInfoValue(e, "displayRange", n), this;
            },
            clearVarDisplayRange: function (e) {
                return this.setLocalVarInfoValue(e, "displayRange", null), this;
            },
            getDisplayRangeOfVars: function (e, t) {
                var a = {};
                e || (e = this.getLocalVarSymbols());
                for (var r = 0, n = e.length; r < n; ++r) {
                    a[this._varToVarSymbol(e[r])] = this.getVarDisplayRange(e[r], t);
                }
                return a;
            },
            _varToVarSymbol: function (e) {
                var t = this.getLocalVarDef(e);
                return t ? t.getSymbol() : null;
            },
            _varToVarSymbols: function (e) {
                var a = [],
                    r = e ? t.toArray(e) : null;
                if (r) for (var n = 0, i = r.length; n < i; ++n) a.push(this._varToVarSymbol(r[n]));
                else a = this.getLocalVarSymbols();
                return a;
            },
            _getDefaultPeakRoot: function () {
                for (var e = {}, t = 0, a = this.getActualLocalVarInfos().length; t < a; ++t) {
                    var r = this.getLocalVarDef(t);
                    r.getDependency() !== Kekule.VarDependency.INDEPENDENT && (e[r.getSymbol()] = 0);
                }
                return e;
            },
            calcDataRange: function (e, t) {
                var a = t || {},
                    r = this._varToVarSymbols(e),
                    n = function (e) {
                        return !Kekule.NumUtils.isNormalNumber(e);
                    },
                    i = {},
                    o = this._cache.ranges;
                o || ((o = {}), (this._cache.ranges = o));
                for (var s = [], l = 0, u = r.length; l < u; ++l) {
                    o[(p = r[l])] ? (i[p] = Object.extend({}, o[p])) : s.push(p);
                }
                if (s.length) {
                    var c = this,
                        d = this.isPeakSection();
                    this.forEach(
                        function (e, t) {
                            for (var r = 0, o = s.length; r < o; ++r) {
                                var l = s[r];
                                if (
                                    !n(e[l]) &&
                                    (i[l] || (i[l] = {}),
                                    (i[l].min = n(i[l].min) ? e[l] : Math.min(i[l].min, e[l])),
                                    (i[l].max = n(i[l].max) ? e[l] : Math.max(i[l].max, e[l])),
                                    d && !a.ignorePeakRoot)
                                ) {
                                    var u = c.getPeakRootValueOf(e);
                                    u &&
                                        !n(u[l]) &&
                                        ((i[l].min = n(i[l].min) ? u[l] : Math.min(i[l].min, u[l])),
                                        (i[l].max = n(i[l].max) ? u[l] : Math.max(i[l].max, u[l])));
                                }
                            }
                        },
                        null,
                        { basedOnInternalUnit: !0 }
                    );
                    for (l = 0, u = s.length; l < u; ++l) {
                        o[(p = s[l])] = Object.extend({}, i[p]);
                    }
                }
                if (!a.basedOnInternalUnit)
                    for (l = 0, u = r.length; l < u; ++l) {
                        var p = r[l];
                        i[p] = this._convertDataRangeToExternalUnit(i[p], l);
                    }
                return i;
            },
            _convertDataRangeToExternalUnit: function (e, t) {
                if (!e) return e;
                for (var a = ["min", "max"], r = 0, n = a.length; r < n; ++r) {
                    var i = a[r];
                    e[i] = this._convertVarValueToExternal(e[i], t);
                }
                if (e.min > e.max) {
                    var o = e.min;
                    (e.min = e.max), (e.max = o);
                }
                return e;
            },
            _convertDataRangeToInternalUnit: function (e, t) {
                if (!e) return e;
                for (var a = ["min", "max"], r = 0, n = a.length; r < n; ++r) {
                    var i = a[r];
                    e[i] = this._convertVarValueToInternal(e[i], t);
                }
                if (e.min > e.max) {
                    var o = e.min;
                    (e.min = e.max), (e.max = o);
                }
                return e;
            },
            calcDataAverage: function (e, t) {
                var a = t || {},
                    r = this._varToVarSymbols(e),
                    n = {},
                    i = this._cache.averages,
                    o = function (e) {
                        return !Kekule.NumUtils.isNormalNumber(e);
                    };
                i || ((i = {}), (this._cache.averages = i));
                for (var s = [], l = 0, u = r.length; l < u; ++l) {
                    var c = r[l];
                    o(i[c]) ? s.push(c) : (n[c] = i[c]);
                }
                if (s.length) {
                    var d = {},
                        p = {};
                    for (l = 0, u = s.length; l < u; ++l) (d[s[l]] = 0), (p[s[l]] = 0);
                    this.forEach(
                        function (e, t) {
                            for (var a = 0, r = s.length; a < r; ++a) {
                                var n = s[a],
                                    i = e[n];
                                o(i) || ((d[n] += i), ++p[n]);
                            }
                        },
                        null,
                        { basedOnInternalUnit: !0 }
                    );
                    for (l = 0, u = s.length; l < u; ++l) {
                        (n[(c = s[l])] = d[c] / p[c]), (i[c] = n[c]);
                    }
                }
                if (!a.basedOnInternalUnit)
                    for (l = 0, u = r.length; l < u; ++l) {
                        n[(c = r[l])] = this._convertVarValueToExternal(n[l]);
                    }
                return n;
            },
            getContinuousVarSymbols: function () {
                for (var e = [], t = this.getActualLocalVarInfos(), a = 0, r = t.length; a < r; ++a)
                    this.getContinuousVarRange(a) && e.push(t[a].symbol);
                return e;
            },
            _itemHashToArray: function (e) {
                if (!e) return null;
                for (var a = [], r = this.getLocalVarSymbols(), n = 0, i = r.length; n < i; ++n) a.push(e[r[n]]);
                var o,
                    s = this._getDataValueSrc(e);
                if (
                    (s && this._setSysFieldOfDataItem(a, this.DATAITEM_SRC_FIELD_NAME, s),
                    s && s[this.DATAITEM_EXTRA_FIELD_NAME])
                )
                    o = s[this.DATAITEM_EXTRA_FIELD_NAME];
                else {
                    var l = t.exclude(
                        Kekule.ObjUtils.getOwnedFieldNames(e, !1),
                        [this.DATAITEM_SRC_FIELD_NAME, this.DATAITEM_EXTRA_FIELD_NAME].concat(r)
                    );
                    l.length && (o = {});
                    for (n = 0, i = l.length; n < i; ++n) o[l[n]] = e[l[n]];
                }
                return o && this._setSysFieldOfDataItem(s || a, this.DATAITEM_EXTRA_FIELD_NAME, o), a;
            },
            _convArrayToSymboledHash: function (e, t) {
                for (var a = {}, r = 0, n = Math.min(t.length, e.length); r < n; ++r) {
                    var i = e[r];
                    a[t[r]] = i;
                }
                return a;
            },
            _itemArrayToHash: function (e, t) {
                if (!e) return null;
                for (var a = {}, r = this.getLocalVarSymbols(), n = 0, i = Math.min(r.length, e.length); n < i; ++n) {
                    var o;
                    (o = t.basedOnInternalUnit ? e[n] : this._convertVarValueToExternal(e[n], n)), (a[r[n]] = o);
                }
                var s = this._getDataValueSrc(e);
                return (
                    s[this.DATAITEM_EXTRA_FIELD_NAME] &&
                        this._setSysFieldOfDataItem(
                            a,
                            this.DATAITEM_EXTRA_FIELD_NAME,
                            e[this.DATAITEM_EXTRA_FIELD_NAME]
                        ),
                    this._setSysFieldOfDataItem(a, this.DATAITEM_SRC_FIELD_NAME, s || e),
                    a
                );
            },
            _convertVarValueToNewUnit: function (e, t, a, r) {
                return Kekule.NumUtils.isNormalNumber(e)
                    ? Kekule.Spectroscopy.DataValueConverterManager.doConvert(e, t, a, r, this, this.getParent())
                    : e;
            },
            _convertVarValueToExternal: function (e, t) {
                var a = e,
                    r = this.getLocalVarDef(t);
                return (
                    r &&
                        r.hasDifferentExternalUnit &&
                        r.hasDifferentExternalUnit() &&
                        (a = this._convertVarValueToNewUnit(e, r, r.getInternalUnit(), r.getActualExternalUnit())),
                    a
                );
            },
            _convertVarValueToInternal: function (e, t) {
                var a = e,
                    r = this.getLocalVarDef(t);
                return (
                    r &&
                        r.hasDifferentExternalUnit &&
                        r.hasDifferentExternalUnit() &&
                        (a = this._convertVarValueToNewUnit(e, r, r.getActualExternalUnit(), r.getInternalUnit())),
                    a
                );
            },
            isDataSorted: function () {
                return this._sorted || this.getDataCount() <= 1;
            },
            setDataSorted: function (e) {
                return (this._sorted = !!e), this;
            },
            sort: function (e) {
                if (!this.isDataSorted()) {
                    var a = this,
                        r = e
                            ? function (t, r) {
                                  return e(a._itemArrayToHash(t), a._itemArrayToHash(r));
                              }
                            : function (e, a) {
                                  return t.compare(e, a);
                              };
                    return this.getDataItems().sort(r), this.setDataSorted(!0), this;
                }
            },
            getIndependentVarValueOrder: function (e) {
                var t = 0;
                if (this.isDataSorted()) {
                    var a = this,
                        r = function (e, t, r, i) {
                            var o = t,
                                s = {},
                                l = !1;
                            do {
                                (s.value = a.getHashValueAt(o)[e]),
                                    (s.index = o),
                                    (o += i),
                                    (l = Kekule.NumUtils.isNormalNumber(s.value));
                            } while (!l && ((i > 0 && o <= n) || (i < 0 && o >= r)));
                            return l ? s : null;
                        },
                        n = this.getDataCount() - 1,
                        i = r(e, 0, n, 1),
                        o = r(e, n, 0, -1);
                    i && o && i.index < o.index && (t = Math.sign(o.value - i.value));
                }
                return t;
            },
            getDataCount: function () {
                return this.getDataItems().length;
            },
            clearCache: function () {
                this._cache = {};
            },
            notifyDataChange: function () {
                var e = this.getDataItems();
                this.setDataSorted(!1),
                    this.clearCache(),
                    this.updateDataModifiedTime(),
                    this.notifyPropSet("dataItems", e),
                    this.invokeEvent("dataChange", { data: e });
            },
            updateDataModifiedTime: function () {
                this.setPropStoreFieldValue("modifiedTime", new Date());
            },
            clear: function () {
                this.setDataItems([]), this.notifyDataChange(), this.setDataSorted(!0);
            },
            indexOfDataItem: function (e) {
                var t = e[this.DATAITEM_SRC_FIELD_NAME] || e;
                return this.getDataItems().indexOf(t);
            },
            appendData: function (e) {
                var t;
                if ((t = DataType.isArrayValue(e) ? e : this._itemHashToArray(e)))
                    return (
                        this.getDataItems().push(t),
                        t[this.DATAITEM_EXTRA_FIELD_NAME] && this._extraInfoAdded(t[this.DATAITEM_EXTRA_FIELD_NAME]),
                        this.notifyDataChange(),
                        t
                    );
            },
            removeData: function (e) {
                var t = this.getDataItems().indexOf(e);
                return this.removeDataItemAt(t);
            },
            removeDataAt: function (e) {
                var t = this.getDataItems().splice(e, 1);
                return this.notifyDataChange(), t;
            },
            getRawValueAt: function (e) {
                var a = this.getDataItems()[e];
                if (a) {
                    var r = t.clone(a);
                    r[this.DATAITEM_SRC_FIELD_NAME] = a;
                    for (
                        var n = this.getMode() === Kekule.Spectroscopy.DataMode.CONTINUOUS,
                            i = this.getDataCount() - 1,
                            o = 0,
                            s = r.length;
                        o < s;
                        ++o
                    ) {
                        var l = r[o];
                        if (DataType.isUndefinedValue(l) || DataType.isNullValue(l)) {
                            var u = this.getDefaultVarValue(o);
                            if (Kekule.ObjUtils.notUnset(u)) l = u;
                            else if (n) {
                                var c = this.getContinuousVarRange(o);
                                c && (l = i > 1 ? (e / i) * (c.toValue - c.fromValue) + c.fromValue : c.fromValue);
                            }
                        }
                        r[o] = l;
                    }
                    return (
                        a[this.DATAITEM_EXTRA_FIELD_NAME] &&
                            this._setSysFieldOfDataItem(r, this.DATAITEM_EXTRA_FIELD_NAME, a._extra),
                        r
                    );
                }
                return null;
            },
            getHashValueAt: function (e, t) {
                return this._itemArrayToHash(this.getRawValueAt(e), t || {});
            },
            getValueAt: function (e, t) {
                return this.getHashValueAt(e, t);
            },
            setRawValueAt: function (e, t) {
                var a = this.getDataItems()[e];
                return (
                    a && a[this.DATAITEM_EXTRA_FIELD_NAME] && this._extraInfoRemoved(a[this.DATAITEM_EXTRA_FIELD_NAME]),
                    (this.getDataItems()[e] = t),
                    t[this.DATAITEM_EXTRA_FIELD_NAME] &&
                        (this._setSysFieldOfDataItem(
                            t,
                            this.DATAITEM_EXTRA_FIELD_NAME,
                            t[this.DATAITEM_EXTRA_FIELD_NAME]
                        ),
                        this._extraInfoAdded(t[this.DATAITEM_EXTRA_FIELD_NAME])),
                    this.notifyDataChange(),
                    this
                );
            },
            setHashValueAt: function (e, t, a) {
                var r = this._itemHashToArray(t);
                return this.setRawValueAt(e, r), this;
            },
            setValueAt: function (e, t, a) {
                var r;
                return (r = DataType.isArrayValue(t) ? t : this._itemHashToArray(t)), this.setRawValueAt(e, r), this;
            },
            _getDataValueSrc: function (e) {
                return e
                    ? DataType.isArrayValue(e)
                        ? e[this.DATAITEM_SRC_FIELD_NAME] || e
                        : e[this.DATAITEM_SRC_FIELD_NAME]
                    : null;
            },
            createDefaultExtraInfoObjectFor: function (e) {
                var t = this.isPeakSection() ? Kekule.Spectroscopy.SpectrumPeakDetails : null,
                    a = t ? new t() : null;
                return (
                    a &&
                        Kekule.ObjUtils.notUnset(e) &&
                        ("number" == typeof e ? this.setExtraInfoAt(e, a) : e && this.setExtraInfoOf(e, a)),
                    a
                );
            },
            getExtraInfoOf: function (e) {
                return (
                    (this._getDataValueSrc(e) || e)[this.DATAITEM_EXTRA_FIELD_NAME] || e[this.DATAITEM_EXTRA_FIELD_NAME]
                );
            },
            setExtraInfoOf: function (e, t) {
                var a = this._getDataValueSrc(e) || e;
                return (
                    a[this.DATAITEM_EXTRA_FIELD_NAME] && this._extraInfoRemoved(a[this.DATAITEM_EXTRA_FIELD_NAME]),
                    this._setSysFieldOfDataItem(a, this.DATAITEM_EXTRA_FIELD_NAME, t),
                    this._extraInfoAdded(t),
                    this.notifyDataChange(),
                    this
                );
            },
            getExtraInfoAt: function (e) {
                var t = this.getDataItems()[e];
                return t && t[this.DATAITEM_EXTRA_FIELD_NAME];
            },
            setExtraInfoAt: function (e, t) {
                var a = this.getDataItems()[e];
                return (
                    a[this.DATAITEM_EXTRA_FIELD_NAME] && this._extraInfoRemoved(a[this.DATAITEM_EXTRA_FIELD_NAME]),
                    this._setSysFieldOfDataItem(a, this.DATAITEM_EXTRA_FIELD_NAME, t),
                    this._extraInfoAdded(t),
                    this.notifyDataChange(),
                    this
                );
            },
            _extraInfoAdded: function (e) {
                e && e instanceof Kekule.ChemObject && (e.setParent(this), e.setOwner(this.getOwner()));
            },
            _extraInfoRemoved: function (e) {
                e && e instanceof Kekule.ChemObject && e.getParent() === this && (e.setParent(null), e.setOwner(null));
            },
            getPeakRootValueOf: function (e) {
                if (this.getMode() !== Kekule.Spectroscopy.DataMode.PEAK) return null;
                var t = this.getDefPeakRoot() || this._getDefaultPeakRoot();
                return Object.extend(Object.extend({}, e), t);
            },
            getPeakRootValueAt: function (e) {
                return this.getPeakRootValueOf(this.getValueAt(e));
            },
            getSurroundingDataItemIndexesFromIndependent: function (e, t) {},
            getDataItemIndexFromIndependent: function (e, t) {
                var a = {};
                a =
                    "number" == typeof e
                        ? this._convArrayToSymboledHash(
                              [e],
                              this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.INDEPENDENT)
                          )
                        : DataType.isArrayValue(e)
                        ? this._convArrayToSymboledHash(
                              e,
                              this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.INDEPENDENT)
                          )
                        : e;
                for (
                    var r = Kekule.ObjUtils.getOwnedFieldNames(a),
                        n = this.calcDataRange(r),
                        i = t && t.allowedErrorRate,
                        o = {},
                        s = 0,
                        l = r.length;
                    s < l;
                    ++s
                ) {
                    if ((S = a[(h = r[s])]) < n[h].min || S > n[h].max) return -1;
                    o[h] = i && (n[h].max - n[h].min) * i;
                }
                var u = { index: -1, distanceSqr: 0 };
                for (s = 0, l = this.getDataCount(); s < l; ++s) {
                    for (var c, d = this.getHashValueAt(s), p = !0, f = 0, m = r.length; f < m; ++f) {
                        var h,
                            S = a[(h = r[f])],
                            A = d[h],
                            T = Math.abs(A - S);
                        if (!(T <= o[h])) {
                            p = !1;
                            break;
                        }
                        c += Math.sqr(T / n[h]);
                    }
                    p && (u.index < 0 || u.distanceSqr > c) && ((u.index = s), (u.distanceSqr = c));
                }
                return u.index;
            },
            getDataValueFromIndependent: function (e, t) {
                var a = this.getDataItemIndexFromIndependent(e, t);
                return a >= 0 ? this.getValueAt(a) : null;
            },
            calcValueFromIndependent: function (e, t) {
                var a = {};
                return (
                    (a =
                        "number" == typeof e
                            ? this._convArrayToSymboledHash(
                                  [e],
                                  this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.INDEPENDENT)
                              )
                            : DataType.isArrayValue(e)
                            ? this._convArrayToSymboledHash(
                                  e,
                                  this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.INDEPENDENT)
                              )
                            : e),
                    this.doCalcValueFromIndependent(a, t)
                );
            },
            doCalcValueFromIndependent: function (e, t) {
                return this.getMode() === Kekule.Spectroscopy.DataMode.PEAK
                    ? this._doCalcValueFromIndependentInPeakMode(e, t)
                    : this._doCalcValueFromIndependentInContinousMode(e, t);
            },
            _doCalcValueFromIndependentInPeakMode: function (e, t) {
                var a = this.getDataItemIndexFromIndependent(e, t);
                return a >= 0 ? this.getHashValueAt(a) : this.getPeakRootValueOf(e);
            },
            _doCalcValueFromIndependentInContinousMode: function (e, t) {
                var a = this._doCalcValueFromIndependentInContinousModeEx(e, t);
                return a && a.value;
            },
            _doCalcValueFromIndependentInContinousModeEx: function (e, t) {
                var a = this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.INDEPENDENT),
                    r = this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.DEPENDENT);
                if (a.length > 1) return null;
                var n,
                    i = a[0],
                    o = e[i],
                    s = this.calcDataRange([i])[i];
                if (o < s.min || o > s.max) return null;
                var l = -1,
                    u = -1,
                    c = !0,
                    d = this.getLocalVarDef(i),
                    p = this.getDataCount();
                if ((c = !d.hasDifferentExternalUnit())) {
                    var f = this.getContinuousVarRange(i);
                    c = !!f;
                }
                if (c) {
                    var m = ((o - f.fromValue) / (f.toValue - f.fromValue)) * (p - 1);
                    (l = Math.max(Math.floor(m), 0)), (u = Math.min(Math.ceil(m), p - 1));
                } else {
                    var h = this.getIndependentVarValueOrder(i);
                    if (0 === h);
                    else {
                        var S = h < 0,
                            A = this._calcNeighborDataIndexesToIndependentValue(i, o, 0, p - 1, S);
                        (l = A[0]), (u = A[1]);
                    }
                }
                if (l < 0 || u < 0) return null;
                if (l === u) n = this.getHashValueAt(l);
                else {
                    var T = this._calcIntermediateDependentVarValuesBetween(r, i, o, l, u);
                    ((n = {})[i] = o), (n = Object.extend(n, T));
                }
                return { value: n, dataIndexes: [l, u] };
            },
            _calcNeighborDataIndexesToIndependentValue: function (e, t, a, r, n) {
                if (r - a <= 2) return [a, r];
                var i = Math.round((a + r) / 2),
                    o = this.getHashValueAt(i)[e];
                return o === t
                    ? [i, i]
                    : o <= t
                    ? n
                        ? this._calcNeighborDataIndexesToIndependentValue(e, t, a, i, n)
                        : this._calcNeighborDataIndexesToIndependentValue(e, t, i, r, n)
                    : n
                    ? this._calcNeighborDataIndexesToIndependentValue(e, t, i, r, n)
                    : this._calcNeighborDataIndexesToIndependentValue(e, t, a, i, n);
            },
            _calcIntermediateDependentVarValuesBetween: function (e, t, a, r, n) {
                if (r === n) {
                    for (var i = this.getHashValueAt(r), o = {}, s = 0, l = e.length; s < l; ++s) o[e[s]] = i[e[s]];
                    return o;
                }
                var u = this.getHashValueAt(r),
                    c = this.getHashValueAt(n),
                    d = u[t],
                    p = c[t];
                if (Kekule.NumUtils.isNormalNumber(d)) {
                    if (Kekule.NumUtils.isNormalNumber(p)) {
                        var f = (a - u[t]) / (c[t] - u[t]);
                        for (o = {}, s = 0, l = e.length; s < l; ++s) {
                            var m = e[s],
                                h = u[m],
                                S = c[m],
                                A = !1;
                            (A = Kekule.NumUtils.isNormalNumber(h)
                                ? Kekule.NumUtils.isNormalNumber(S)
                                    ? h + (S - h) * f
                                    : n < this.getDataCount() - 1
                                    ? this._calcIntermediateDependentVarValuesBetween([m], t, a, r, n + 1)
                                    : h[m]
                                : r > 0
                                ? this._calcIntermediateDependentVarValuesBetween([m], t, a, r - 1, n)
                                : S[m]),
                                (o[m] = A);
                        }
                        return o;
                    }
                    return n < this.getDataCount() - 1
                        ? this._calcIntermediateDependentVarValuesBetween(e, t, a, r, n + 1)
                        : this._calcIntermediateDependentVarValuesBetween(e, t, a, r, r);
                }
                return r > 0
                    ? this._calcIntermediateDependentVarValuesBetween(e, t, a, r - 1, n)
                    : this._calcIntermediateDependentVarValuesBetween(e, t, a, n, n);
            },
            calcValueRangeFromIndependentRangeEx: function (e, t) {
                var a = {};
                return (
                    (a = DataType.isArrayValue(e)
                        ? this._convArrayToSymboledHash(
                              e,
                              this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.INDEPENDENT)
                          )
                        : e),
                    this.doCalcValueRangeFromIndependentRangeEx(a, t)
                );
            },
            doCalcValueRangeFromIndependentRangeEx: function (e, t) {
                for (
                    var a = this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.INDEPENDENT),
                        r = this.getLocalVarSymbolsOfDependency(Kekule.VarDependency.DEPENDENT),
                        n = this.calcDataRange(a),
                        i = (t && t.findNearest, {}),
                        o = {},
                        s = 0,
                        l = a.length;
                    s < l;
                    ++s
                ) {
                    var u = a[s];
                    if (e[u]) {
                        var c = Object.extend({}, e[u]),
                            d = n[u];
                        c.min < d.min && (c.min = d.min),
                            c.max > d.max && (c.max = d.max),
                            (i[u] = c),
                            (o[u] = (c.min + c.max) / 2);
                    }
                }
                var p =
                    this.getMode() === Kekule.Spectroscopy.DataMode.PEAK
                        ? this._doCalcValueRangeFromIndependentRangeInPeakModeEx(i, o, a, r, t)
                        : this._doCalcValueRangeFromIndependentRangeInContinousModeEx(i, o, a, r, t);
                return p && p.range && Kekule.ObjUtils.getOwnedFieldNames(p.range) <= 0 && (p.range = null), p;
            },
            _doCalcValueRangeFromIndependentRangeInPeakModeEx: function (e, t, a, r, n) {
                var i,
                    o,
                    s,
                    l,
                    u = !!t,
                    c = { dataIndexes: [], dataValues: [], range: {} };
                n.findInReversedOrder
                    ? ((o = this.getDataCount() - 1), (s = 0), (l = -1))
                    : ((o = 0), (s = this.getDataCount() - 1), (l = 1));
                for (var d = o; n.findInReversedOrder ? d >= s : d <= s; d += l) {
                    for (var p = this.getHashValueAt(d), f = !0, m = 0, h = 0, S = a.length; h < S; ++h) {
                        var A = a[h];
                        if (!(f = p[A] >= e[A].min && p[A] <= e[A].max)) break;
                        u && (m += Math.sqr(p[A] - t[A]));
                    }
                    f &&
                        (c.dataIndexes.push(d),
                        c.dataValues.push(p),
                        u && (void 0 === i || m < i) && ((i = m), (c.nearest = { dataIndex: d, dataValue: p })));
                }
                return (c.range = Kekule.Spectroscopy.Utils.expandDataRange(c.range, c.dataValues)), c;
            },
            _doCalcValueRangeFromIndependentRangeInContinousModeEx: function (e, t, a, r, n) {
                if (a.length > 1) return null;
                var i = a[0],
                    o = e[i],
                    s = {},
                    l = {};
                (s[i] = o.min), (l[i] = o.max);
                var u = this._doCalcValueFromIndependentInContinousModeEx(s, n),
                    c = this._doCalcValueFromIndependentInContinousModeEx(l, n);
                if (!u || !c) return null;
                var d = u.dataIndexes[0] > c.dataIndexes[0],
                    p = {};
                d
                    ? ((p.fromIndex = c.dataIndexes[1]), (p.toIndex = u.dataIndexes[0]))
                    : ((p.fromIndex = u.dataIndexes[1]), (p.toIndex = c.dataIndexes[0]));
                for (var f = { range: {}, dataIndexes: [], dataValues: [] }, m = p.fromIndex; m <= p.toIndex; ++m) {
                    var h = this.getHashValueAt(m);
                    f.dataValues.push(h),
                        f.dataIndexes.push(m),
                        (f.range = Kekule.Spectroscopy.Utils.expandDataRange(f.range, h));
                }
                return (
                    (f.range = Kekule.Spectroscopy.Utils.expandDataRange(f.range, [u.value, c.value])),
                    d
                        ? (f.dataValues.push(u.value), f.dataValues.unshift(c.value))
                        : (f.dataValues.push(c.value), f.dataValues.unshift(u.value)),
                    f.dataIndexes.push(-1),
                    f.dataIndexes.unshift(-1),
                    f
                );
            },
            getIterator: function () {
                return this.doGetIterator();
            },
            doGetIterator: function () {
                var e = this.getDataItems(),
                    t = this;
                return {
                    index: 0,
                    next: function (a) {
                        if (this.index >= e.length) return { done: !0 };
                        var r = { done: !1, value: t.getHashValueAt(this.index, a) };
                        return ++this.index, r;
                    },
                };
            },
            forEach: function (e, t, a) {
                var r = this.getIterator();
                if (r) for (var n = 0, i = r.next(a); !i.done; ) e.apply(t, [i.value, n]), ++n, (i = r.next());
                return this;
            },
            getComparisonPropNames: function (e) {
                var a = this.tryApplySuper("getComparisonPropNames", [e]);
                return a && ((a = t.exclude(a, ["parent", "owner"])), t.pushUnique(a, "dataItems")), a;
            },
            doGetComparisonPropNames: function (e) {
                var t = this.tryApplySuper("doGetComparisonPropNames", [e]);
                return (
                    e.method === Kekule.ComparisonMethod.CHEM_STRUCTURE &&
                        (t = (t || []).concat("defPeakRoot", "localVarInfos", "mode", "dataItems")),
                    t
                );
            },
            doCompareProperty: function (e, t, a) {
                return "dataItems" === t
                    ? this.doCompareDataItems(this, e, a)
                    : "localVarInfos" === t
                    ? this.doCompareLocalVarInfos(this, e, a)
                    : this.tryApplySuper("doCompareProperty", [e, t, a]);
            },
            doCompareLocalVarInfos: function (e, t, a) {
                var r = e.getActualLocalVarInfos(),
                    n = t.getActualLocalVarInfos(),
                    i = r.length - n.length;
                if (!i && a.method !== Kekule.ComparisonMethod.CHEM_STRUCTURE)
                    for (var o = 0, s = r.length; o < s; ++o) {
                        var l = r[o],
                            u = n[o];
                        if ((i = Kekule.ObjComparer.compare(l, u, a))) break;
                    }
                if (!i)
                    for (o = 0, s = r.length; o < s; ++o) {
                        var c = e.getLocalVarDef(o),
                            d = e.getLocalVarDef(o);
                        if ((i = this.doCompareOnValue(c, d, a))) break;
                    }
                return i;
            },
            doCompareDataItems: function (e, t, a) {
                var r = function (e, t) {
                        var a = e.getHashValueAt(t);
                        return e._itemHashToArray(a);
                    },
                    n = e.getDataCount() - t.getDataCount();
                if (!n)
                    for (var i = 0, o = e.getDataCount(); i < o; ++i) {
                        var s = r(e, i),
                            l = r(e, i);
                        if (!(n = this._compareDataRawValue(s, l, a))) {
                            var u = e.getExtraInfoAt(i) || null,
                                c = t.getExtraInfoAt(i) || null;
                            u && u.isEmpty() && (u = null),
                                c && c.isEmpty() && (c = null),
                                (n = this.doCompareOnValue(u, c, a));
                        }
                        if (n) break;
                    }
                return n;
            },
            _compareDataRawValue: function (e, t, a) {
                var r;
                if (!e && !t) return 0;
                if (e && !t) return 1;
                if (!e && t) return -1;
                if (!(r = (e.length || -1) - (t.length || -1)))
                    for (
                        var n = Kekule.NumUtils,
                            i =
                                a.allowedComparisonErrorRate ||
                                Kekule.globalOptions.spectrum.data.allowedComparisonErrorRate ||
                                5e-8,
                            o = 0,
                            s = e.length;
                        o < s;
                        ++o
                    ) {
                        var l = e[o],
                            u = t[o];
                        if (
                            (r =
                                n.isNormalNumber(l) && n.isNormalNumber(u)
                                    ? n.isFloatEqual(l, u, Math.abs(l * i))
                                        ? 0
                                        : Math.sign(l - u)
                                    : this.doCompareOnValue(e, t, a))
                        )
                            break;
                    }
                return r;
            },
        })),
        (Kekule.Spectroscopy.SpectrumData = Class.create(ObjectEx, {
            CLASS_NAME: "Kekule.Spectroscopy.SpectrumData",
            initialize: function (e, a, r) {
                this.tryApplySuper("initialize", [e]), this.setPropStoreFieldValue("variables", a ? t.clone(a) : []);
                var n = new Kekule.ChemObjList(null, Kekule.Spectroscopy.SpectrumDataSection, !0);
                this.setPropStoreFieldValue("sections", n), this.setParent(r), n.setOwner(this.getOwner());
            },
            doFinalize: function () {
                this.getSections().finalize();
                for (var e = this.getVariables() || [], t = 0, a = e.length; t < a; ++t) e[t].finalize();
                this.setPropStoreFieldValue("variables", null), this.tryApplySuper("doFinalize");
            },
            initProperties: function () {
                this.defineProp("owner", {
                    dataType: "Kekule.ChemSpace",
                    serializable: !1,
                    scope: Class.PropertyScope.PUBLIC,
                    getter: function () {
                        return this.getPropStoreFieldValue("owner") || this._getDefaultOwner();
                    },
                    setter: function (e) {
                        if (e !== this.getPropStoreFieldValue("owner")) {
                            this.setPropStoreFieldValue("owner", e);
                            var t = this.getOwner(),
                                a = this.getSections();
                            a && a.setOwner(t);
                        }
                    },
                }),
                    this.defineProp("parent", {
                        dataType: "Kekule.Spectroscopy.Spectrum",
                        serializable: !1,
                        setter: function (e) {
                            this.setPropStoreFieldValue("parent", e);
                            var t = this.getSections();
                            t && t.setParent(this.getParent() || this);
                        },
                    }),
                    this.defineProp("sections", {
                        dataType: "Kekule.ChemObjList",
                        setter: function (e) {
                            var t = this.getSections();
                            t !== e &&
                                (t && t.finalize(),
                                e &&
                                    ((e._transparent = !0),
                                    e.setParent(this.getParent() || this),
                                    e.setOwner(this.getOwner())),
                                this.setPropStoreFieldValue("sections", e));
                        },
                    }),
                    this.defineProp("autoCreateSection", { dataType: DataType.BOOL }),
                    this.defineProp("activeSectionIndex", {
                        dataType: DataType.INT,
                        getter: function () {
                            return this.getSectionCount() <= 0
                                ? -1
                                : 1 === this.getSectionCount()
                                ? 0
                                : this.getPropStoreFieldValue("activeSectionIndex");
                        },
                        setter: function (e) {
                            e >= 0 &&
                                e <= this.getSectionCount() &&
                                this.setPropStoreFieldValue("activeSectionIndex", e);
                        },
                    }),
                    this.defineProp("activeSection", {
                        dataType: "Kekule.Spectroscopy.SpectrumDataSection",
                        serializable: !1,
                        getter: function () {
                            var e = this.getSectionAt(this.getActiveSectionIndex() || 0);
                            return (
                                !e &&
                                    this.getSectionCount() <= 0 &&
                                    this.getAutoCreateSection() &&
                                    (e = this.createSection(this.getVariables())),
                                e
                            );
                        },
                        setter: function (e) {
                            this.setActiveSectionIndex(this.indexOfSection(e));
                        },
                    }),
                    this.defineProp("variables", { dataType: DataType.ARRAY }),
                    this.defineProp("varSymbols", {
                        dataType: DataType.ARRAY,
                        setter: null,
                        scope: e.PRIVATE,
                        getter: function () {
                            for (var e = [], t = this.getVariables() || [], a = 0, r = t.length; a < r; ++a) {
                                var n = t[a];
                                e.push(n.getSymbol());
                            }
                            return e;
                        },
                    }),
                    this.defineProp("mode", { dataType: DataType.INT, enumSource: Kekule.Spectroscopy.DataMode });
            },
            initPropValues: function () {
                this.tryApplySuper("initPropValues"),
                    this.setAutoCreateSection(!0),
                    this.setMode(Kekule.Spectroscopy.DataMode.CONTINUOUS);
            },
            _getDefaultOwner: function () {
                var e = this.getParent();
                return e && e.getOwner && e.getOwner();
            },
            getHigherLevelObj: function () {
                return this.getParent();
            },
            getChildHolder: function () {
                return this.getSections();
            },
            loaded: function (e) {
                var t = this.getSections();
                t && (t.parentChanged(this), t.ownerChanged(this.getOwner())), this.tryApplySuper("loaded", [e]);
            },
            isEmpty: function () {
                for (var e = 0, t = this.getSectionCount(); e < t; ++e) if (!this.getSectionAt(e).isEmpty()) return !1;
                return !0;
            },
            createSection: function (e, t) {
                var a = new Kekule.Spectroscopy.SpectrumDataSection(void 0, this, e);
                return a.setMode(t || this.getMode()), this.getSections().appendChild(a), a;
            },
            clearSection: function () {
                for (var e = this.getChildren(), t = 0, a = e.length; t < a; ++t)
                    e[t].clear(), e[t].setParent(null), e[t].finalize();
                this.getSections().clear();
            },
            getSectionCount: function () {
                return this.getSections().getChildCount();
            },
            getSectionAt: function (e) {
                return this.getSections().getItemAt(e);
            },
            indexOfSection: function (e) {
                return this.getSections().indexOfItem(e);
            },
            hasSection: function (e) {
                return this.indexOfSection(e) >= 0;
            },
            removeSectionAt: function (e) {
                return this.getSections().removeItemAt(e);
            },
            removeSection: function (e) {
                return this.getSections().removeItem(e);
            },
            insertSectionAt: function (e, t) {
                return this.getSections().insertItemAt(e, t);
            },
            insertSectionBefore: function (e, t) {
                return this.getSections().insertItemBefore(e, t);
            },
            appendSection: function (e) {
                return this.getSections().appendChild(e);
            },
            hasMultipleSections: function () {
                return this.getSections().getChildCount() > 1;
            },
            calcDataRangeOfSection: function (e, t) {
                return e.calcDataRange(t);
            },
            calcDataRangeOfSections: function (e, t, a) {
                for (var r = {}, n = 0, i = e.length; n < i; ++n) {
                    var o = e[n].calcDataRange(t, a);
                    r = Kekule.Spectroscopy.Utils.mergeDataRange(r, o);
                }
                return r;
            },
            getDisplayRangeOfSection: function (e, t, a) {
                return e.getDisplayRangeOfVars(t, a);
            },
            getDisplayRangeOfSections: function (e, t, a) {
                for (var r = {}, n = 0, i = e.length; n < i; ++n) {
                    var o = e[n].getDisplayRangeOfVars(t, a);
                    r = Kekule.Spectroscopy.Utils.mergeDataRange(r, o);
                }
                return r;
            },
            getVariableCount: function () {
                return (this.getVariables() || []).length;
            },
            getVariable: function (e) {
                return e instanceof Kekule.VarDefinition
                    ? e
                    : "number" == typeof e
                    ? this.getVariables()[e]
                    : this.getVariables()[this.getVarSymbols().indexOf(e)];
            },
            indexOfVariable: function (e) {
                return this.getVariables().indexOf(e);
            },
            insertVariableAt: function (e, t) {
                return t >= 0 ? this.getVariables().splice(t, 0, e) : this.getVariables().push(e), this;
            },
            insertVariableBefore: function (e, t) {
                var a = t ? this.indexOfVarDefinition(t) : -1;
                return this.insertVarDefinitionAt(e, a);
            },
            appendVariable: function (e) {
                return this.insertVariableAt(e, -1);
            },
            removeVariableAt: function (e) {
                return this.getVariables().splice(e, 1), this;
            },
            removeVariable: function (e) {
                var t = this.indexOfVariable(e);
                return t >= 0 && this.removeVariableAt(t), this;
            },
            getVariablesOfDependency: function (e) {
                for (var t = [], a = 0, r = this.getVariableCount(); a < r; ++a) {
                    var n = this.getVariable(a);
                    n && n.getDependency() === e && t.push(n);
                }
                return t;
            },
            getContinuousVarRange: function (e) {
                var t = this.getVariable(e),
                    a = t && t.getInfo();
                return a && a.continuous ? { fromValue: a.fromValue, toValue: a.toValue } : null;
            },
            setContinuousVarRange: function (e, t, a) {
                var r = this.getVariable(e),
                    n = r && r.getInfo(!0);
                return (n.continuous = !0), (n.fromValue = t), (n.toValue = a), this;
            },
            clearContinuousVarRange: function (e) {
                var t = this.getVariable(e).getInfo();
                return t && t.continuous && (t.continuous = !1), this;
            },
            setDefaultVarValue: function (e, t) {
                var a = this.getVariable(e);
                return ((a && a.getInfo(!0)).defaultValue = t), this;
            },
            clearDefaultVarValue: function (e) {
                return this.setDefaultVarValue(e, null);
            },
            getDefaultVarValue: function (e) {
                var t = this.getVariable(e),
                    a = t && t.getInfo();
                if (a) return a.defaultValue;
            },
            iterateSections: function (e) {
                for (var t = 0, a = this.getSectionCount(); t < a; ++t) e(this.getSectionAt(t), t);
            },
            sort: function (e) {
                this.iterateSections(function (t) {
                    t.sort(e);
                });
            },
            getDataCount: function () {
                var e = 0;
                return (
                    this.iterateSections(function (t) {
                        e += t.getDataCount();
                    }),
                    e
                );
            },
            clearData: function () {
                this.iterateSections(function (e) {
                    e.clear();
                });
            },
            appendData: function (e) {
                return this.getActiveSection().appendData(e);
            },
            removeData: function (e) {
                return this.getActiveSection().removeData(e);
            },
            removeDataAt: function (e) {
                return this.getActiveSection().removeDataAt(e);
            },
            getRawValueAt: function (e) {
                return this.getActiveSection().getRawValueAt(e);
            },
            getHashValueAt: function (e) {
                return this.getActiveSection().getHashValueAt(e);
            },
            getValueAt: function (e) {
                return this.getHashValueAt(e);
            },
            setRawValueAt: function (e, t) {
                return this.getActiveSection().setRawValueAt(e, t), this;
            },
            setHashValueAt: function (e, t, a) {
                return this.getActiveSection().setHashValueAt(e, t, a), this;
            },
            setValueAt: function (e, t, a) {
                return this.getActiveSection().setValueAt(e, t), this;
            },
            getExtraInfoOf: function (e) {
                return this.getActiveSection().getExtraInfoOf(e);
            },
            setExtraInfoOf: function (e, t) {
                return this.getActiveSection().setExtraInfoOf(e, t), this;
            },
            getExtraInfoAt: function (e) {
                return this.getActiveSection().getExtraInfoAt(e);
            },
            setExtraInfoAt: function (e, t) {
                return this.getActiveSection().setExtraInfoAt(e, t), this;
            },
            getIterator: function () {
                return this.doGetIterator();
            },
            doGetIterator: function () {
                var e = this.getSections().getItems();
                return {
                    sectionIndex: 0,
                    index: 0,
                    next: function () {
                        var t = this,
                            a = function () {
                                return (
                                    t.sectionIndex >= e.length ||
                                    (t.sectionIndex === e.length - 1 && t.index >= e[e.length - 1].getDataCount())
                                );
                            };
                        if (a()) return { done: !0 };
                        if (!(this.index < e[this.sectionIndex].getDataCount())) {
                            do {
                                ++this.sectionIndex, (this.index = 0);
                            } while (this.index >= e[this.sectionIndex].getDataCount() || t.sectionIndex >= e.length);
                            return a()
                                ? { done: !0 }
                                : { done: !1, value: e[this.sectionIndex].getValueAt(this.index) };
                        }
                        var r = { done: !1, value: e[this.sectionIndex].getValueAt(this.index) };
                        return ++this.index, r;
                    },
                };
            },
            forEach: function (e, t) {
                var a = this.getIterator();
                if (a) for (var r = 0, n = a.next(); !n.done; ) e.apply(t, [n.value, r]), ++r, (n = a.next());
                return this;
            },
        })),
        (Kekule.Spectroscopy.PeakShape = { SHARP: "sharp", BROAD: "broad" }),
        (Kekule.Spectroscopy.PeakMultiplicity = {
            UNKNOWN: 0,
            SINGLET: 1,
            DOUBLET: 2,
            TRIPLET: 3,
            QUARTET: 4,
            QUINTET: 5,
            SEXTUPLET: 6,
            DOUBLE_DOUBLET: 22,
            TRIPLE_DOUBLET: 32,
            MULTIPLET: 255,
        }),
        (Kekule.Spectroscopy.SpectrumDataDetails = Class.create(Kekule.ChemObject, {
            CLASS_NAME: "Kekule.Spectroscopy.SpectrumDataDetails",
            initialize: function (e) {
                this.setPropStoreFieldValue("assignments", []),
                    this.tryApplySuper("initialize", []),
                    this.setPropValues(e);
            },
            initProperties: function () {
                this.defineProp("assignments", {
                    dataType: DataType.ARRAY,
                    objRef: !0,
                    autoUpdate: !0,
                    setter: function (e) {
                        var a = e ? (DataType.isArrayValue(e) ? t.clone(e) : t.toArray(e)) : [];
                        this.setPropStoreFieldValue("assignments", a);
                    },
                }),
                    this.defineProp("assignment", {
                        dataType: "Kekule.ChemObject",
                        serializable: !1,
                        scope: Class.PropertyScope.PUBLIC,
                        getter: function () {
                            return (this.getAssignments() || [])[0];
                        },
                        setter: function (e) {
                            this.setAssignments(e);
                        },
                    });
            },
            doFinalize: function () {
                this.setPropStoreFieldValue("assignments", null), this.tryApplySuper("doFinalize");
            },
            getAutoIdPrefix: function () {
                return "d";
            },
            isEmpty: function () {
                var e = this.getAssignments();
                return !e || !e.length;
            },
            hasAssignments: function () {
                var e = this.getAssignments();
                return !(!e || !e.length);
            },
            doGetComparisonPropNames: function (e) {
                var t = this.tryApplySuper("doGetComparisonPropNames", [e]);
                return e.method === Kekule.ComparisonMethod.CHEM_STRUCTURE && (t = t || []).unshift("assignments"), t;
            },
        })),
        (Kekule.Spectroscopy.SpectrumPeakDetails = Class.create(Kekule.Spectroscopy.SpectrumDataDetails, {
            CLASS_NAME: "Kekule.Spectroscopy.SpectrumPeakDetails",
            initProperties: function () {
                this.defineProp("shape", { dataType: DataType.STRING }),
                    this.defineProp("multiplicity", { dataType: DataType.VARIANT });
            },
            getAutoIdPrefix: function () {
                return "p";
            },
            isEmpty: function () {
                var e = this.tryApplySuper("isEmpty");
                return (e = e && !this.getShape() && Kekule.ObjUtils.isUnset(this.getMultiplicity()));
            },
            doGetComparisonPropNames: function (e) {
                var t = this.tryApplySuper("doGetComparisonPropNames", [e]);
                return (
                    e.method === Kekule.ComparisonMethod.CHEM_STRUCTURE &&
                        ((t = t || []).unshift("shape"), t.unshift("multiplicity")),
                    t
                );
            },
        })),
        (Kekule.Spectroscopy.SpectrumType = {
            NMR: "NMR",
            IR: "IR",
            MS: "MS",
            UV_VIS: "UV_VIS",
            IMS: "IMS",
            RAMAN: "Raman",
            CHROMATOGRAPHY: "chromatography",
            GENERAL: "general",
        }),
        (Kekule.Spectroscopy.SpectrumNMR = { TargetNucleus: { C13: "C13", H: "H" } }),
        (Kekule.Spectroscopy.Spectrum = Class.create(Kekule.ChemObject, {
            CLASS_NAME: "Kekule.Spectroscopy.Spectrum",
            initialize: function (e) {
                this.setPropStoreFieldValue("data", new Kekule.Spectroscopy.SpectrumData(null, null, this)),
                    this.tryApplySuper("initialize", [e]),
                    this._initDelegatedMethods();
            },
            doFinalize: function () {
                this.setPropStoreFieldValue("refMolecules", null);
                var e = this.getData();
                e && e.finalize(), this.tryApplySuper("doFinalize");
            },
            initProperties: function () {
                this.defineProp("spectrumType", { dataType: DataType.STRING }),
                    this.defineProp("name", { dataType: DataType.STRING }),
                    this.defineProp("data", {
                        dataType: "Kekule.Spectroscopy.SpectrumData",
                        setter: function (e) {
                            var t = this.getData();
                            e !== t &&
                                (t && t.finalize(),
                                e && e.setPropValue("parent", this, !0),
                                this.setPropStoreFieldValue("data", e));
                        },
                    }),
                    this.defineProp("refMolecules", {
                        dataType: DataType.ARRAY,
                        objRef: !0,
                        autoUpdate: !0,
                        setter: function (e) {
                            var a = e ? (DataType.isArrayValue(e) ? t.clone(e) : t.toArray(e)) : [];
                            this.setPropStoreFieldValue("refMolecules", a);
                        },
                    }),
                    this.defineProp("refMolecule", {
                        dataType: "Kekule.Molecule",
                        serializable: !1,
                        scope: Class.PropertyScope.PUBLIC,
                        getter: function () {
                            return (this.getRefMolecules() || [])[0];
                        },
                        setter: function (e) {
                            this.setrRefMolecules(e);
                        },
                    }),
                    this._defineInfoProperty("title"),
                    this._defineInfoProperty("metaData", null, { dataType: DataType.HASH }),
                    this._defineInfoProperty("conditions", null, { dataType: DataType.HASH }),
                    this._defineInfoProperty("parameters", null, { dataType: DataType.HASH }),
                    this._defineInfoProperty("annotations", null, { dataType: DataType.HASH }),
                    this._defineDataDelegatedProperty("variables"),
                    this._defineDataDelegatedProperty("varSymbols"),
                    this._defineDataDelegatedProperty("dataSections", "sections"),
                    this._defineDataDelegatedProperty("activeDataSectionIndex", "activeSectionIndex"),
                    this._defineDataDelegatedProperty("activeDataSection", "activeSection");
            },
            _initDelegatedMethods: function () {
                this._defineDataDelegatedMethod("isEmpty"),
                    this._defineDataDelegatedMethod("createDataSection", "createSection"),
                    this._defineDataDelegatedMethod("clearDataSection", "clearSection"),
                    this._defineDataDelegatedMethod("getDataSectionCount", "getSectionCount"),
                    this._defineDataDelegatedMethod("getDataSectionAt", "getSectionAt"),
                    this._defineDataDelegatedMethod("indexOfDataSection", "indexOfSection"),
                    this._defineDataDelegatedMethod("hasDataSection", "hasSection"),
                    this._defineDataDelegatedMethod("removeDataSectionAt", "removeSectionAt"),
                    this._defineDataDelegatedMethod("removeDataSection", "removeSection"),
                    this._defineDataDelegatedMethod("insertDataSectionAt", "insertSectionAt"),
                    this._defineDataDelegatedMethod("insertDataSectionBefore", "insertSectionBefore"),
                    this._defineDataDelegatedMethod("appendDataSection", "appendSection"),
                    this._defineDataDelegatedMethod("iterateDataSection", "iterateSection"),
                    this._defineDataDelegatedMethod("sortData", "sort"),
                    this._defineDataDelegatedMethod("clearData"),
                    this._defineDataDelegatedMethod("getVariableCount"),
                    this._defineDataDelegatedMethod("getVariable"),
                    this._defineDataDelegatedMethod("indexOfVariable"),
                    this._defineDataDelegatedMethod("insertVariableAt"),
                    this._defineDataDelegatedMethod("insertVariableBefore"),
                    this._defineDataDelegatedMethod("appendVariable"),
                    this._defineDataDelegatedMethod("removeVariableAt"),
                    this._defineDataDelegatedMethod("removeVariable"),
                    this._defineDataDelegatedMethod("getVariablesOfDependency"),
                    this._defineDataDelegatedMethod("getContinuousVarRange"),
                    this._defineDataDelegatedMethod("setContinuousVarRange"),
                    this._defineDataDelegatedMethod("clearContinuousVarRange"),
                    this._defineDataDelegatedMethod("getDefaultVarValue"),
                    this._defineDataDelegatedMethod("setDefaultVarValue"),
                    this._defineDataDelegatedMethod("clearDefaultVarValue");
            },
            _defineInfoProperty: function (e, t, a) {
                var r, n, i;
                return (
                    (i = (n = t || e).upperFirst()),
                    (r = Object.extend(
                        {
                            getter: function () {
                                return this.getInfoValue(n) || this.getInfoValue(i);
                            },
                            setter: function (e) {
                                this.setInfoValue(n, e);
                            },
                            serializable: !1,
                        },
                        a
                    )),
                    this.defineProp(e, r)
                );
            },
            _defineDataDelegatedProperty: function (e, t) {
                t || (t = e);
                var a = ClassEx.getPropInfo(Kekule.Spectroscopy.SpectrumData, t),
                    r = Object.create(a);
                return (
                    (r.getter = null),
                    (r.setter = null),
                    (r.serializable = !1),
                    a.getter &&
                        (r.getter = function () {
                            return this.getData().getPropValue(t);
                        }),
                    a.setter &&
                        (r.setter = function (e) {
                            this.getData().setPropValue(t, e);
                        }),
                    this.defineProp(e, r)
                );
            },
            _defineDataDelegatedMethod: function (e, t) {
                t || (t = e),
                    (ClassEx.getPrototype(this.getClass())[e] = function () {
                        var e = this.getData(),
                            a = e[t].apply(e, arguments);
                        return a === e && (a = this), a;
                    });
            },
            getAutoIdPrefix: function () {
                return "s";
            },
            ownerChanged: function (e, t) {
                var a = this.getData();
                a && a.setOwner(e), this.tryApplySuper("ownerChanged", [e, t]);
            },
            isEmpty: function () {
                if (this.getDataSectionCount() <= 0) return !0;
                for (var e = 0, t = this.getDataSectionCount(); e < t; ++e)
                    if (!this.getDataSectionAt(e).isEmpty()) return !1;
                return !0;
            },
            getChildSubgroupNames: function () {
                return ["dataSection"].concat(this.tryApplySuper("getChildSubgroupNames"));
            },
            getBelongChildSubGroupName: function (e) {
                return e instanceof Kekule.Spectroscopy.SpectrumDataSection
                    ? "dataSection"
                    : this.tryApplySuper("getBelongChildSubGroupName", [e]);
            },
            doGetChildCount: function () {
                return this.getDataSectionCount();
            },
            doGetChildAt: function (e) {
                return this.getDataSectionAt(e);
            },
            doIndexOfChild: function (e) {
                return this.indexOfDataSection(e);
            },
            _getCandidateInfoPropNames: function (e) {
                if (e.indexOf(r.DELIMITER) >= 0) return [e];
                var t = r.getNamespaces(),
                    a = this.getSpectrumType();
                a && (t = [a].concat(t));
                for (var n = [e], i = 0, o = t.length; i < o; ++i) n.push(t[i] + r.DELIMITER + e);
                return n;
            },
            _getSpectrumInfoValueOfCategory: function (e, t) {
                var a = e ? this.getInfoValue(e) : this.getInfo();
                if (a) {
                    if (!Kekule.globalOptions.spectrum.spectrumInfo.enablePrefixOmissionInGetter) return a[t];
                    for (var r = this._getCandidateInfoPropNames(t), n = 0, i = r.length; n < i; ++n) {
                        var o = r[n];
                        if (void 0 !== a[o]) return a[o];
                    }
                }
            },
            setSpectrumInfoValue: function (e, t, a) {
                if (e) {
                    var r = this.getInfoValue(e);
                    r || ((r = {}), this.setInfoValue(e, r)), (r[t] = a);
                } else this.setInfoValue(t, a);
                return this;
            },
            getSpectrumInfoKeysOfCategory: function (e) {
                if (e) {
                    var a = this.getInfoValue(e);
                    return a ? Kekule.ObjUtils.getOwnedFieldNames(a, !1) : [];
                }
                if ("" === e) {
                    var r = this.getInfoKeys();
                    return (r = t.exclude(r, this.getSpectrumInfoCategories()));
                }
                return [];
            },
            getSpectrumInfoCategories: function () {
                for (
                    var e = ["metaData", "conditions", "parameters", "annotations"], t = [], a = 0, r = e.length;
                    a < r;
                    ++a
                ) {
                    var n = e[a],
                        i = this.getSpectrumInfoKeysOfCategory(n);
                    i && i.length && t.push(n);
                }
                return t;
            },
            getSpectrumInfoValue: function (e, a) {
                for (
                    var r,
                        n = 0,
                        i = (r = a ? t.toArray(a) : ["conditions", "parameters", "metaData", "annotations", ""]).length;
                    n < i;
                    ++n
                ) {
                    var o = r[n],
                        s = this._getSpectrumInfoValueOfCategory(o, e);
                    if (Kekule.ObjUtils.notUnset(s)) return s;
                }
            },
            getMeta: function (e) {
                return this._getSpectrumInfoValueOfCategory("metaData", e);
            },
            setMeta: function (e, t) {
                return this.setSpectrumInfoValue("metaData", e, t), this;
            },
            getMetaKeys: function () {
                return this.getSpectrumInfoKeysOfCategory("metaData");
            },
            getCondition: function (e) {
                return this._getSpectrumInfoValueOfCategory("conditions", e);
            },
            setCondition: function (e, t) {
                return this.setSpectrumInfoValue("conditions", e, t), this;
            },
            getConditionKeys: function () {
                return this.getSpectrumInfoKeysOfCategory("conditions");
            },
            getParameter: function (e) {
                return this._getSpectrumInfoValueOfCategory("parameters", e);
            },
            setParameter: function (e, t) {
                return this.setSpectrumInfoValue("parameters", e, t), this;
            },
            getParameterKeys: function () {
                return this.getSpectrumInfoKeysOfCategory("parameters");
            },
            getAnnotation: function (e) {
                return this._getSpectrumInfoValueOfCategory("annotations", e);
            },
            setAnnotation: function (e, t) {
                return this.setSpectrumInfoValue("annotations", e, t), this;
            },
            getAnnotationKeys: function () {
                return this.getSpectrumInfoKeysOfCategory("annotations");
            },
            getVarAvailableExternalUnitObjs: function (e) {
                return Kekule.Spectroscopy.DataValueConverterManager.getAltUnits(
                    e,
                    e.getInternalUnit ? e.getInternalUnit() : e.getUnit(),
                    null,
                    this
                );
            },
            getVarAvailableExternalUnitSymbols: function (e) {
                for (
                    var t = Kekule.Spectroscopy.DataValueConverterManager.getAltUnits(
                            e,
                            e.getInternalUnit ? e.getInternalUnit() : e.getUnit(),
                            null,
                            this
                        ),
                        a = [],
                        r = 0,
                        n = t.length;
                    r < n;
                    ++r
                )
                    a.push(t[r].symbol);
                return a;
            },
            getComparisonPropNames: function (e) {
                var t = this.tryApplySuper("getComparisonPropNames", [e]),
                    a = t.indexOf("data");
                return a >= 0 && t.splice(a, 1), t;
            },
            doGetComparisonPropNames: function (e) {
                var t = this.tryApplySuper("doGetComparisonPropNames", [e]);
                return (
                    e.method === Kekule.ComparisonMethod.CHEM_STRUCTURE &&
                        (t = (t || []).concat([
                            "refMolecules",
                            "metaData",
                            "conditions",
                            "parameters",
                            "dataSections",
                        ])),
                    t
                );
            },
            doCompareProperty: function (e, t, a) {
                if ("dataSections" === t && a.method === Kekule.ComparisonMethod.CHEM_STRUCTURE) {
                    var n = this.getDataSections().getItems(),
                        i = e.getDataSections().getItems();
                    return this.doCompareOnValue(n, i, a);
                }
                if (["metaData", "conditions", "parameters"].indexOf(t) >= 0) {
                    for (
                        var o = ["metaData", "conditions", "parameters", "annotations"],
                            s = this.getSpectrumInfoKeysOfCategory(t),
                            l = 0,
                            u = s.length;
                        l < u;
                        ++l
                    ) {
                        var c = s[l],
                            d = this.getSpectrumInfoValue(c, [t]),
                            p = e.getSpectrumInfoValue(c, o);
                        if (Kekule.ObjUtils.isUnset(p)) {
                            var f = r.getPropertyCoreName(c);
                            p = e.getSpectrumInfoValue(f, o);
                        }
                        if ((m = this.doCompareOnValue(d, p, a))) return m;
                    }
                    return 0;
                }
                var m;
                (d = this.getPropValue(t)), (p = e.getPropValue(t));
                return (m = this.doCompareOnValue(d, p, a));
            },
        })),
        Kekule.ClassDefineUtils.addStandardCoordSupport(Kekule.Spectroscopy.Spectrum),
        Kekule.ClassDefineUtils.addStandardSizeSupport(Kekule.Spectroscopy.Spectrum),
        (n = Kekule.Unit.register)("transmittance", "transmittance", "OpticalTransmittance", 1),
        n("transmittance%", "transmittance_percent", "OpticalTransmittance", 0.01),
        n("reflectance", "reflectance", "OpticalReflectance", 1),
        n("absorbance", "absorbance", "OpticalAbsorbance", 1),
        n("Kubelka Munk", "Kubelka_Munk", "OpticalKubelkaMunk", 1),
        n("counts", "ms_count", "Misc", null),
        n("relative abundance", "ms_relative_abundance", "SpectrumMS", null),
        n("m/z", "ms_mass_charge_ratio", "SpectrumMS", null);
})(),
    (function () {
        "use strict";
        var e = Kekule.ArrayUtils;
        Kekule.globalOptions.add("IO.jcamp", {
            enableXYDataValueCheck: !0,
            dataValueCheckAllowedErrorRatio: 0.001,
            maxCharsPerLine: 80,
        }),
            (Kekule.IO.Jcamp = {});
        var t = Kekule.IO.Jcamp;
        Kekule.IO.Jcamp.Consts = {
            DATA_LABEL_FLAG: "##",
            DATA_LABEL_TERMINATOR: "=",
            PRIVATE_LABEL_PREFIX: "$",
            SPECIFIC_LABEL_PREFIX: ".",
            LABEL_BLOCK_BEGIN: "TITLE",
            LABEL_BLOCK_END: "END",
            LABEL_DATA_TYPE: "DATATYPE",
            LABEL_BLOCK_COUNT: "BLOCKS",
            LABEL_BLOCK_ID: "BLOCKID",
            LABEL_CROSS_REF: "CROSSREFERENCE",
            INLINE_COMMENT_FLAG: "$$",
            TABLE_LINE_CONTI_MARK: "=",
            UNKNOWN_VALUE: NaN,
            LABEL_DX_VERSION: "JCAMPDX",
            LABEL_CS_VERSION: "JCAMPCS",
            DATA_FORMAT_GROUP_LEADING: "(",
            DATA_FORMAT_GROUP_TAILING: ")",
            DATA_FORMAT_LOOP: "..",
            DATA_FORMAT_INC: "++",
            DATA_FORMAT_SYMBOL_ASSIGNMENT: "A",
            DATA_FORMAT_PLOT_DESCRIPTOR_DELIMITER: ",",
            SIMPLE_VALUE_DELIMITER: ",",
            CROSS_REF_TYPE_TERMINATOR: ":",
            DATA_VARLIST_FORMAT_XYDATA: 1,
            DATA_VARLIST_FORMAT_XYPOINTS: 2,
            DATA_VARLIST_FORMAT_XYWPOINTS: 2,
            DATA_VARLIST_FORMAT_VAR_GROUPS: 5,
            GROUPED_VALUE_GROUP_DELIMITER: "\n",
            GROUPED_VALUE_GROUP_DELIMITER_PATTERN: /[;\s+]/g,
            GROUPED_VALUE_ITEM_DELIMITER: ",",
            GROUPED_VALUE_ITEM_DELIMITER_PATTERN: /,/g,
            GROUPED_VALUE_STR_ENCLOSER_LEADING: "<",
            GROUPED_VALUE_STR_ENCLOSER_TAILING: ">",
            GROUPED_VALUE_EXPLICIT_GROUP_LEADING: "(",
            GROUPED_VALUE_EXPLICIT_GROUP_TAILING: ")",
            NTUPLE_DEFINITION_ITEM_DELIMITER: ",\t",
            VALUE_STR_EXPLICIT_QUOTE: '"',
            VALUE_ABNORMAL_NUM: "?",
            MOL_FORMULA_SUP_PREFIX: "^",
            MOL_FORMULA_SUB_PREFIX: "/",
        };
        var a = Kekule.IO.Jcamp.Consts;
        (Kekule.IO.Jcamp.Format = { DX: "dx", CS: "cs" }),
            (Kekule.IO.Jcamp.BlockType = { DATA: 0, LINK: 1 }),
            (Kekule.IO.Jcamp.CrossRefType = { SPECTRUM: 1, STRUCTURE: 2, UNKNOWN: 0 }),
            (Kekule.IO.Jcamp.AsdfForm = { AFFN: 1, PAC: 2, SQZ: 3, DIF: 4, SQZ_DUP: 13, DIF_DUP: 14 }),
            (Kekule.IO.Jcamp.DigitCharType = {
                ASCII: 1,
                PAC: 2,
                SQZ: 3,
                DIF: 4,
                DUP: 5,
                _DECIMAL_POINT: 9,
                _ABNORMAL_VALUE: 19,
            });
        var r = Kekule.IO.Jcamp.DigitCharType;
        Kekule.IO.Jcamp.Labels = {
            _maps: [],
            getMaps: function () {
                return n._maps;
            },
            addMaps: function (t) {
                e.pushUnique(n._maps, t, !0);
            },
        };
        var n = Kekule.IO.Jcamp.Labels;
        Kekule.IO.Jcamp.Utils = {
            compareFloat: function (e, t, a) {
                return (
                    Kekule.ObjUtils.isUnset(a) && (a = 0.01 * Math.max(Math.abs(e), Math.abs(t))),
                    Kekule.NumUtils.compareFloat(e, t, a)
                );
            },
            calcNumFactorForRange: function (e, t, a, r, n) {
                if (
                    Kekule.NumUtils.isFloatEqual(e, t) &&
                    Kekule.ObjUtils.notUnset(r) &&
                    Kekule.ObjUtils.notUnset(n) &&
                    e > r &&
                    t < n
                )
                    return 1;
                var i = 1,
                    o = Math.abs(t - e) || Math.max(Math.abs(t), Math.abs(e));
                if (
                    (a && (i = o * a),
                    Kekule.ObjUtils.notUnset(r) && Kekule.ObjUtils.notUnset(n) && e / i > r && t / i < n)
                ) {
                    var s = Math.max(e / r, 0),
                        l = Math.max(t / n, 0),
                        u = s ? (l ? Math.max(s, l) : s) : l;
                    u && (i = Math.min(i, u));
                }
                return i;
            },
            standardizeLdrLabelName: function (e) {
                return e.replace(/[\/\\\-\_\s]/g, "").toUpperCase();
            },
            ldrLabelNameEqual: function (e, t) {
                return i.standardizeLdrLabelName(e) === i.standardizeLdrLabelName(t);
            },
            analysisLdrLabelName: function (e, t) {
                var r;
                if (
                    ((r = e.startsWith(a.SPECIFIC_LABEL_PREFIX)
                        ? {
                              coreName: i.standardizeLdrLabelName(e.substr(a.SPECIFIC_LABEL_PREFIX.length)),
                              labelType: l.SPECIFIC,
                              labelCategory: u.ANNOTATION,
                          }
                        : e.startsWith(a.PRIVATE_LABEL_PREFIX)
                        ? {
                              coreName: i.standardizeLdrLabelName(e.substr(a.PRIVATE_LABEL_PREFIX.length)),
                              labelType: l.PRIVATE,
                              labelCategory: u.ANNOTATION,
                          }
                        : { coreName: e, labelType: l.GLOBAL, labelCategory: u.META }),
                    void 0 === t || t)
                ) {
                    var n = c.getInfo(r.coreName, r.labelType);
                    n && ((r.dataType = n.dataType), (r.labelCategory = n.labelCategory));
                }
                return r;
            },
            jcampLabelNameToKekule: function (e, t) {
                var r = Kekule.Spectroscopy.MetaPropNamespace,
                    o = i.standardizeLdrLabelName(e);
                if (o.startsWith(a.PRIVATE_LABEL_PREFIX)) {
                    var s = o.substr(a.PRIVATE_LABEL_PREFIX.length);
                    return r.createPropertyName(r.CUSTOM, s);
                }
                for (var l, u = n.getMaps(), c = 0, d = u.length; c < d; ++c) {
                    var p = u[c];
                    if (o === p[0]) {
                        var f = p[1],
                            m = r.getPropertyNameDetail(f);
                        if (!t || !m.namespace || m.namespace === r.CUSTOM) return f;
                        if (t === m.namespace) return f;
                        l = f;
                    }
                }
                if (l) return l;
                if (o.startsWith(a.SPECIFIC_LABEL_PREFIX)) {
                    s = o.substr(a.SPECIFIC_LABEL_PREFIX.length);
                    return r.createPropertyName(t, s);
                }
                return r.createPropertyName("jcamp", o);
            },
            kekuleLabelNameToJcamp: function (e, t, r) {
                for (var i = Kekule.Spectroscopy.MetaPropNamespace, o = n.getMaps(), s = 0, l = o.length; s < l; ++s) {
                    var u = o[s];
                    if (e === u[1]) return u[0];
                }
                if (r) return null;
                var c = i.getPropertyNameDetail(e);
                return a.PRIVATE_LABEL_PREFIX + c.coreName.toUpperCase();
            },
            getCrossReferenceDetail: function (e) {
                var r,
                    n = e.split(a.CROSS_REF_TYPE_TERMINATOR),
                    i = n[0].trim(),
                    o = "STRUCTURE" === i.toUpperCase() ? t.CrossRefType.STRUCTURE : t.CrossRefType.SPECTRUM,
                    s = n[1] && n[1].trim();
                s &&
                    s.toUpperCase().indexOf("BLOCK") >= 0 &&
                    (r = s.split(a.DATA_LABEL_TERMINATOR)[1]) &&
                    (r = r.trim());
                return { refType: o, refTypeText: i, blockId: r };
            },
            addMoleculeSpectrumCrossRef: function (e, t) {
                var a = e.getRefMolecules() || [];
                a.indexOf(t) < 0 && (a.push(t), e.setRefMolecules(a));
            },
            getFirstNonemptyLine: function (e) {
                var t,
                    a = 0;
                do {
                    (t = (e[a] || "").trim()), ++a;
                } while (!t && a < e.length);
                return t || "";
            },
            getAsdfDigitInfo: function (e) {
                var t = {};
                return (
                    e === a.VALUE_ABNORMAL_NUM
                        ? ((t.digitType = r._ABNORMAL_VALUE), (t.value = null), (t.sign = 1))
                        : "." === e
                        ? ((t.digitType = r._DECIMAL_POINT), (t.value = 0), (t.sign = 1))
                        : e >= "0" && e <= "9"
                        ? ((t.digitType = r.ASCII), (t.value = e.charCodeAt(0) - "0".charCodeAt(0)), (t.sign = 1))
                        : "+" === e
                        ? ((t.digitType = r.PAC), (t.value = 0), (t.sign = 1))
                        : "-" === e
                        ? ((t.digitType = r.PAC), (t.value = 0), (t.sign = -1))
                        : "@" === e
                        ? ((t.digitType = r.SQZ), (t.value = 0), (t.sign = 1))
                        : e >= "A" && e <= "I"
                        ? ((t.digitType = r.SQZ), (t.value = e.charCodeAt(0) - "A".charCodeAt(0) + 1), (t.sign = 1))
                        : e >= "a" && e <= "i"
                        ? ((t.digitType = r.SQZ), (t.value = e.charCodeAt(0) - "a".charCodeAt(0) + 1), (t.sign = -1))
                        : "%" === e
                        ? ((t.digitType = r.DIF), (t.value = 0), (t.sign = 1))
                        : e >= "J" && e <= "R"
                        ? ((t.digitType = r.DIF), (t.value = e.charCodeAt(0) - "J".charCodeAt(0) + 1), (t.sign = 1))
                        : e >= "j" && e <= "r"
                        ? ((t.digitType = r.DIF), (t.value = e.charCodeAt(0) - "j".charCodeAt(0) + 1), (t.sign = -1))
                        : e >= "S" && e <= "Z"
                        ? ((t.digitType = r.DUP), (t.value = e.charCodeAt(0) - "S".charCodeAt(0) + 1), (t.sign = 1))
                        : "s" === e
                        ? ((t.digitType = r.DUP), (t.value = 9), (t.sign = 1))
                        : ((t.digitType = null), (t.value = null)),
                    t
                );
            },
            _calcAsdfNumber: function (e) {
                for (var t, a = 1, n = 0, i = 1, o = 0, s = e.length - 1; s >= 0; --s) {
                    var l = e[s];
                    if (l.digitType === r._DECIMAL_POINT) {
                        if (((i = a), ++o > 1)) return null;
                    } else (n += l.value * a), (a *= 10), (t = l.digitType);
                }
                return { value: (n *= e[0].sign / i), digitType: t };
            },
            _pushAsdfNumberToSeq: function (e, t, n) {
                var o = { seq: e, lastValueType: t.digitType };
                if (t.digitType === r._ABNORMAL_VALUE) e.push(a.UNKNOWN_VALUE);
                else if (t.digitType === r.ASCII || t.digitType === r.PAC || t.digitType === r.SQZ) e.push(t.value);
                else {
                    if (!e.length) return !1;
                    var s = e[e.length - 1];
                    if (t.digitType === r.DIF) e.push(s + t.value);
                    else {
                        if (t.digitType !== r.DUP) return !1;
                        if (n.digitType === r.PAC || n.digitType === r.DUP || !n.digitType) return !1;
                        for (var l = 1; l < t.value; ++l) o = i._pushAsdfNumberToSeq(e, n, null);
                        n && (o.lastValueType = n.digitType);
                    }
                }
                return o;
            },
            decodeAsdfLine: function (e) {
                for (
                    var t = [],
                        a = [],
                        n = null,
                        o = function (t, a, r) {
                            if (a.length) {
                                var n,
                                    o = i._calcAsdfNumber(a);
                                return (
                                    o && (n = i._pushAsdfNumberToSeq(t, o, r)),
                                    (o && n) ||
                                        Kekule.error(Kekule.$L("ErrorMsg.JCAMP_ASDF_FORMAT_ERROR_WITH_STR").format(e)),
                                    (t.__$lastValueType__ = n.lastValueType),
                                    o
                                );
                            }
                        },
                        s = 0,
                        l = e.length;
                    s < l;
                    ++s
                ) {
                    var u = i.getAsdfDigitInfo(e.charAt(s));
                    u.digitType
                        ? u.digitType === r._ABNORMAL_VALUE
                            ? ((n = o(t, a, n)), o(t, [u], null), (a = []))
                            : u.digitType === r._DECIMAL_POINT
                            ? a.push(u)
                            : u.digitType === r.ASCII
                            ? a.push(u)
                            : ((n = o(t, a, n)), (a = [u]))
                        : ((n = o(t, a, n)), (a = []));
                }
                return (n = o(t, a, n)), t;
            },
            encodeAsdfLine: function (e, t) {
                var a = Kekule.IO.Jcamp.AsdfForm;
                return t === a.AFFN
                    ? i._encodeNumbersToAffnLine(e)
                    : t === a.PAC
                    ? i._encodeNumbersToPacLine(e)
                    : t === a.SQZ
                    ? i._encodeNumbersToSqzLine(e, !1)
                    : t === a.SQZ_DUP
                    ? i._encodeNumbersToSqzLine(e, !0)
                    : t === a.DIF
                    ? i._encodeNumbersToDifLine(e, !1)
                    : (a.DIF_DUP, i._encodeNumbersToDifLine(e, !0));
            },
            _encodeNumbersToAffnLine: function (e) {
                for (var t = [], r = 0, n = e.length; r < n; ++r) {
                    var i = e[r],
                        o = Kekule.NumUtils.isNormalNumber(i) ? i.toString() : a.VALUE_ABNORMAL_NUM;
                    t.push(o);
                }
                return t.join(" ");
            },
            _encodeNumbersToPacLine: function (e) {
                for (var t = [], r = 0, n = e.length; r < n; ++r) {
                    var i,
                        o = e[r];
                    if (Kekule.NumUtils.isNormalNumber(o)) i = (o >= 0 ? "+" : "-") + Math.abs(o).toString();
                    else i = a.VALUE_ABNORMAL_NUM;
                    t.push(i);
                }
                return t.join("");
            },
            _encodeNumbersToSqzLine: function (e, t) {
                return i._numSeqToCompressedFormString(e, "A", "a", "@", t);
            },
            _encodeNumbersToDifLine: function (e, t) {
                var a = [],
                    r = { seq: [] };
                a.push(r);
                for (var n, o = 0, s = e.length; o < s; ++o) {
                    var l = e[o];
                    (n = l),
                        Kekule.NumUtils.isNormalNumber(n)
                            ? (Kekule.ObjUtils.isUnset(r.head) ? (r.head = n) : r.seq.push(n - r.last), (r.last = n))
                            : (Kekule.ObjUtils.isUnset(r.head) ? (r.head = n) : r.seq.push(n),
                              (r = { seq: [] }),
                              a.push(r));
                }
                var u = [];
                for (o = 0, s = a.length; o < s; ++o) {
                    var c = a[o];
                    Kekule.ObjUtils.notUnset(c.head) &&
                        (u.push(i._encodeNumbersToSqzLine([c.head])),
                        c.seq.length && u.push(i._numSeqToCompressedFormString(c.seq, "J", "j", "%", t)));
                }
                return u.join("");
            },
            _numToCompressedFormString: function (e, t, r, n) {
                if (!Kekule.NumUtils.isNormalNumber(e)) return a.VALUE_ABNORMAL_NUM;
                if (0 === e) return n;
                var i = Math.abs(e).toString(),
                    o = Kekule.NumUtils.getHeadingDigit(e);
                return (i =
                    (e > 0
                        ? String.fromCharCode(t.charCodeAt(0) + (o - 1))
                        : String.fromCharCode(r.charCodeAt(0) + (o - 1))) + i.substr(1));
            },
            _numSeqToCompressedFormString: function (e, t, a, r, n) {
                for (
                    var o, s = [], l = 0, u = ["S", "T", "U", "V", "W", "X", "Y", "Z", "s"], c = 0, d = e.length;
                    c < d;
                    ++c
                ) {
                    var p = !1,
                        f = e[c];
                    if ((n && (f === o ? (++l, (p = !0)) : l && (s.push(u[l]), (l = 0))), !p)) {
                        var m = i._numToCompressedFormString(f, t, a, r);
                        s.push(m);
                    }
                    o = f;
                }
                return n && l && s.push(u[l]), s.join("");
            },
            decodeAsdfTableLines: function (e, t) {
                for (
                    var n,
                        o = t || {},
                        s = [],
                        l = [],
                        u = !1,
                        c = !1,
                        d = e.length,
                        p = function (e, t, a, r, n, i) {
                            if (n) {
                                var o = e[e.length - 1];
                                if (o && o.length)
                                    if (r) {
                                        var s = o[o.length - 1],
                                            l = t[1];
                                        "number" == typeof s &&
                                            Kekule.ObjUtils.notUnset(s) &&
                                            "number" == typeof l &&
                                            Kekule.ObjUtils.notUnset(l) &&
                                            (Kekule.NumUtils.isFloatEqual(s, l)
                                                ? o.pop()
                                                : Kekule.error(
                                                      Kekule.$L("ErrorMsg.JCAMP_DATA_TABLE_Y_VALUE_CHECK_ERROR")
                                                  ));
                                    } else o.pop();
                            }
                            a && f(t, e[e.length - 1], i), e.push(t);
                        },
                        f = function (e, t, a) {
                            if (e && t) {
                                var r = (e[0] - t[0]) / (t.length - 1);
                                if (n) {
                                    var o =
                                        Math.min(Math.abs(r), Math.abs(n)) *
                                        (a || 1) *
                                        (Kekule.globalOptions.IO.jcamp.dataValueCheckAllowedErrorRatio || 1e-4);
                                    0 !== i.compareFloat(r, n, o) &&
                                        (console.log("X check error", r, n, o),
                                        Kekule.error(Kekule.$L("ErrorMsg.JCAMP_DATA_TABLE_X_VALUE_CHECK_ERROR")));
                                } else n = r;
                            }
                            return !0;
                        },
                        m = 0,
                        h = e.length;
                    m < h;
                    ++m
                ) {
                    var S = e[m].trim();
                    if (S) {
                        var A = S.endsWith(a.TABLE_LINE_CONTI_MARK);
                        A && (S = S.substr(0, S.length - a.TABLE_LINE_CONTI_MARK.length));
                        var T = i.decodeAsdfLine(S);
                        (l = u ? l.concat(T) : T),
                            (u = A) || (p(s, l, o.doValueCheck, o.doValueCheck && c, c, d), (l = [])),
                            (c = T.__$lastValueType__ === r.DIF);
                    }
                }
                return l.length && p(s, l, o.doValueCheck, o.doValueCheck && c, c, d), s;
            },
            encodeAsdfTableLines: function (e, t, a) {
                for (var r = a || {}, n = [], o = 0, s = e.length; o < s; ++o) {
                    var l,
                        u = e[o],
                        c = "";
                    u.length &&
                        (r.abscissaFirst
                            ? ((c += i._encodeNumbersToAffnLine([u[0]]) + " "), (l = u.slice(1)))
                            : (l = u),
                        (c += i.encodeAsdfLine(l, t))),
                        n.push(c);
                }
                return n;
            },
            decodeAffnGroupLine: function (e) {
                var t = 1,
                    r = 2,
                    n = 3,
                    i = 11,
                    o = 12,
                    s = 21,
                    l = 22,
                    u = 30,
                    c = e.trim();
                c.startsWith(a.GROUPED_VALUE_EXPLICIT_GROUP_LEADING) &&
                    c.endsWith(a.GROUPED_VALUE_EXPLICIT_GROUP_TAILING) &&
                    (c = c.substr(
                        a.GROUPED_VALUE_EXPLICIT_GROUP_LEADING.length,
                        c.length -
                            a.GROUPED_VALUE_EXPLICIT_GROUP_LEADING.length -
                            a.GROUPED_VALUE_EXPLICIT_GROUP_TAILING.length
                    ));
                for (
                    var d = { tokenType: null, text: "" },
                        p = [],
                        f = [],
                        m = function (e) {
                            var a, r, n;
                            return (
                                (e || d.text) &&
                                    ((r = d.text),
                                    (n = d.tokenType),
                                    (a = r ? (n === t ? parseFloat(r) : r) : void 0),
                                    f.push(a)),
                                (d.tokenType = null),
                                (d.text = ""),
                                a
                            );
                        },
                        h = function () {
                            f.length && p.push(f), (f = []);
                        },
                        S = function (e, n, c) {
                            return n
                                ? e.match(a.GROUPED_VALUE_STR_ENCLOSER_TAILING)
                                    ? o
                                    : r
                                : (e >= "0" && e <= "9") || "." === e
                                ? t
                                : e.match(/\s/)
                                ? u
                                : e.match(a.GROUPED_VALUE_STR_ENCLOSER_LEADING)
                                ? i
                                : e.match(a.GROUPED_VALUE_STR_ENCLOSER_TAILING)
                                ? o
                                : e.match(a.GROUPED_VALUE_GROUP_DELIMITER_PATTERN)
                                ? c
                                    ? s
                                    : l
                                : e.match(a.GROUPED_VALUE_ITEM_DELIMITER_PATTERN)
                                ? s
                                : r;
                        },
                        A = !1,
                        T = 0,
                        I = c.length;
                    T < I;
                    ++T
                ) {
                    var g = c.charAt(T),
                        E = S(g, d.tokenType === n);
                    E === u && d.tokenType === n && ((d.text += g), (E = d.tokenType)),
                        E < i
                            ? (A && d.text && (m(), h()),
                              d.tokenType ? (d.tokenType = Math.max(d.tokenType, E)) : (d.tokenType = E),
                              (d.text += g))
                            : E < s
                            ? E === i
                                ? (A && d.text ? (m(), h()) : m(), (d.tokenType = n))
                                : (d.tokenType = r)
                            : E === s
                            ? m(!0)
                            : E === l && (m(!0), h()),
                        (A = E === u);
                }
                return m(), h(), p;
            },
            encodeAffnGroupLine: function (e, t) {
                for (var r = [], n = 0, i = e.length; n < i; ++n) {
                    var o,
                        s = e[n];
                    (o =
                        "number" == typeof s
                            ? Kekule.NumUtils.isNormalNumber(s)
                                ? s.toString()
                                : a.VALUE_ABNORMAL_NUM
                            : a.GROUPED_VALUE_STR_ENCLOSER_LEADING +
                              s.toString() +
                              a.GROUPED_VALUE_STR_ENCLOSER_TAILING),
                        r.push(o);
                }
                return r.join(a.GROUPED_VALUE_ITEM_DELIMITER);
            },
            decodeAffnGroupTableLines: function (e, t) {
                for (var a = [], r = 0, n = e.length; r < n; ++r) {
                    var o = e[r];
                    a = a.concat(i.decodeAffnGroupLine(o));
                }
                return a;
            },
            encodeAffnGroupTableLines: function (e, t) {
                for (var r = [], n = 0, o = e.length; n < o; ++n) {
                    var s = e[n],
                        l = i.encodeAffnGroupLine(s, t);
                    t &&
                        t.explicitlyEnclosed &&
                        (l = a.GROUPED_VALUE_EXPLICIT_GROUP_LEADING + l + a.GROUPED_VALUE_EXPLICIT_GROUP_TAILING),
                        r.push(l);
                }
                return r;
            },
            getDataTableFormatDetails: function (e) {
                if (e.startsWith(a.DATA_FORMAT_GROUP_LEADING) || e.endsWith(a.DATA_FORMAT_GROUP_TAILING)) {
                    var t = e.substr(
                        a.DATA_FORMAT_GROUP_LEADING.length,
                        e.length - a.DATA_FORMAT_GROUP_LEADING.length - a.DATA_FORMAT_GROUP_TAILING.length
                    );
                    if ((o = (t = t.replace(/\s/g, "")).match(/^([a-zA-Z])\+\+\(([a-zA-Z])\.\.([a-zA-Z])\)$/)))
                        return o[2] !== o[3]
                            ? Kekule.error(Kekule.$L("ErrorMsg.JCAMP_DATA_TABLE_VAR_LIST_FORMAT_ERROR", e))
                            : { format: a.DATA_VARLIST_FORMAT_XYDATA, varInc: o[1], varLoop: o[2], vars: [o[1], o[2]] };
                    if ((o = t.match(/^([a-zA-Z]+)\s*\.\.\s*([a-zA-Z]+)$/))) {
                        if (o[1] !== o[2])
                            return Kekule.error(Kekule.$L("ErrorMsg.JCAMP_DATA_TABLE_VAR_LIST_FORMAT_ERROR", e));
                        for (var r = [], n = 0, i = o[1].length; n < i; ++n)
                            o[1].charAt(n).match(/\s/) || r.push(o[1].charAt(n));
                        return r.length <= 2
                            ? { format: a.DATA_VARLIST_FORMAT_XYPOINTS, vars: r }
                            : { format: a.DATA_VARLIST_FORMAT_XYWPOINTS, vars: r };
                    }
                    var o;
                    if ((o = t.match(/^(([a-zA-Z]\,?)+)$/))) {
                        for (r = [], n = 0, i = o[1].length; n < i; ++n)
                            "," !== o[1].charAt(n) && r.push(o[1].charAt(n));
                        return { format: a.DATA_VARLIST_FORMAT_VAR_GROUPS, vars: r };
                    }
                    return Kekule.error(Kekule.$L("ErrorMsg.JCAMP_DATA_TABLE_VAR_LIST_FORMAT_UNSUPPORTED", e));
                }
                return Kekule.error(Kekule.$L("ErrorMsg.JCAMP_DATA_TABLE_VAR_LIST_FORMAT_ERROR", e));
            },
            generateDataTableFormatDescriptor: function (e, t) {
                if (e === a.DATA_VARLIST_FORMAT_XYDATA)
                    return (
                        a.DATA_FORMAT_GROUP_LEADING +
                        "{0}++" +
                        a.DATA_FORMAT_GROUP_LEADING +
                        "{1}" +
                        a.DATA_FORMAT_LOOP +
                        "{1}" +
                        a.DATA_FORMAT_GROUP_TAILING +
                        a.DATA_FORMAT_GROUP_TAILING
                    ).format(t[0], t[1]);
                if (e === a.DATA_VARLIST_FORMAT_XYPOINTS || e === a.DATA_VARLIST_FORMAT_XYWPOINTS) {
                    for (var r = [], n = 0, i = t.length; n < i; ++n) r.push("{" + n + "}");
                    var o = r.join(""),
                        s = a.DATA_FORMAT_GROUP_LEADING + o + a.DATA_FORMAT_LOOP + o + a.DATA_FORMAT_GROUP_TAILING;
                    return s.format.apply(s, t);
                }
                return e === a.DATA_VARLIST_FORMAT_VAR_GROUPS
                    ? a.DATA_FORMAT_GROUP_LEADING + t.join("") + a.DATA_FORMAT_GROUP_TAILING
                    : "";
            },
            getDataTableFormatAndPlotDetails: function (e) {
                var t = e.indexOf(a.DATA_FORMAT_GROUP_LEADING),
                    r = e.lastIndexOf(a.DATA_FORMAT_GROUP_TAILING);
                if (t >= 0 && r >= 0) {
                    var n = e.substring(t, r + 1),
                        o = i.getDataTableFormatDetails(n),
                        s = e.substr(r + 1).trim();
                    return (
                        s.indexOf(a.DATA_FORMAT_PLOT_DESCRIPTOR_DELIMITER) >= 0 &&
                            ((s = s.substr(a.DATA_FORMAT_PLOT_DESCRIPTOR_DELIMITER.length)), (o.plotDescriptor = s)),
                        o
                    );
                }
                Kekule.error(Kekule.$L("ErrorMsg.JCAMP_DATA_TABLE_VAR_LIST_FORMAT_ERROR", e));
            },
            generateDataTableFormatAndPlotDescriptors: function (e, t) {
                var r,
                    n = i.generateDataTableFormatDescriptor(e, t);
                return (
                    e === a.DATA_VARLIST_FORMAT_XYDATA
                        ? (r = "XYDATA")
                        : e === a.DATA_VARLIST_FORMAT_XYPOINTS
                        ? (r = "XYPOINTS")
                        : e === a.DATA_VARLIST_FORMAT_VAR_GROUPS &&
                          (r = t.length <= 2 ? "PEAK TABLE" : "PEAK ASSIGNMENTS"),
                    { format: n, plot: r }
                );
            },
            generateDataTableFormatAndPlotString: function (e, t) {
                var r = i.generateDataTableFormatAndPlotDescriptors(e, t);
                return r.format + a.DATA_FORMAT_PLOT_DESCRIPTOR_DELIMITER + r.plot;
            },
        };
        var i = Kekule.IO.Jcamp.Utils;
        Kekule.IO.Jcamp.BlockUtils = {
            createBlock: function (e) {
                return { blocks: [], ldrs: [], ldrIndexes: {}, _parent: e };
            },
            setBlockParent: function (e, t) {
                return (e._parent = t), e;
            },
            getLabelIndex: function (e, t) {
                return t.ldrIndexes[e] || -1;
            },
            getLdrAt: function (e, t) {
                return t.ldrs[e];
            },
            addLdrToBlock: function (e, t) {
                e.ldrs.push(t), (e.ldrIndexes[t.labelName] = e.ldrs.length - 1);
            },
            getNestedBlockLevelCount: function (e) {
                var t = 1,
                    a = e.blocks;
                if (a && a.length) {
                    for (var r = 0, n = 0, i = a.length; n < i; ++n) {
                        var s = o.getNestedBlockLevelCount(a[n]);
                        s > r && (r = s);
                    }
                    t += r;
                }
                return t;
            },
            getBlockLdr: function (e, t) {
                var a = e.ldrIndexes[t];
                return a >= 0 ? e.ldrs[a] : null;
            },
            getBlockMeta: function (e) {
                var r = e.meta;
                return (
                    r ||
                        ((r = {
                            blockType: e.blocks.length ? t.BlockType.LINK : t.BlockType.DATA,
                            format: e.ldrIndexes[a.LABEL_DX_VERSION]
                                ? t.Format.DX
                                : e.ldrIndexes[a.LABEL_CS_VERSION]
                                ? t.Format.CS
                                : null,
                        }),
                        (e.meta = r)),
                    r
                );
            },
        };
        var o = Kekule.IO.Jcamp.BlockUtils;
        Kekule.IO.Jcamp.ValueType = {
            AFFN: 1,
            ASDF: 2,
            AFFN_ASDF: 3,
            MULTILINE_AFFN_ASDF: 5,
            MULTILINE_AFFN_GROUP: 6,
            SIMPLE_AFFN_GROUP: 7,
            STRING_GROUP: 8,
            DATA_TABLE: 9,
            STRING: 10,
            SHORT_DATE: 21,
            SHORT_TIME: 22,
            DATETIME: 23,
            NONE: 0,
        };
        var s = Kekule.IO.Jcamp.ValueType;
        Kekule.IO.Jcamp.LabelType = { GLOBAL: 0, SPECIFIC: 1, PRIVATE: 2 };
        var l = Kekule.IO.Jcamp.LabelType;
        Kekule.IO.Jcamp.LabelCategory = {
            GLOBAL: "global",
            META: "meta",
            PARAMTER: "parameter",
            CONDITION: "condition",
            ANNOTATION: "annotation",
        };
        var u = Kekule.IO.Jcamp.LabelCategory;
        (Kekule.IO.Jcamp.LabelTypeInfos = { _DEFAULT_TYPE: s.STRING }),
            (Kekule.IO.Jcamp.LabelTypeInfos.createInfo = function (e, t, r, n, o) {
                var s = i.standardizeLdrLabelName(e),
                    c = o ? l.SPECIFIC : l.GLOBAL;
                r || (r = c),
                    n || (n = r === l.GLOBAL ? u.META : u.ANNOTATION),
                    r !== l.SPECIFIC || s.startsWith(a.SPECIFIC_LABEL_PREFIX)
                        ? r !== l.PRIVATE || s.startsWith(a.PRIVATE_LABEL_PREFIX) || (s = a.PRIVATE_LABEL_PREFIX + s)
                        : (s = a.SPECIFIC_LABEL_PREFIX + s);
                var d = { labelName: s, labelType: r, labelCategory: n, dataType: t };
                return o && (d.specificType = o), (Kekule.IO.Jcamp.LabelTypeInfos[s] = d), d;
            }),
            (Kekule.IO.Jcamp.LabelTypeInfos.createInfos = function (e) {
                for (var t = 0, a = e.length; t < a; ++t) {
                    var r = e[t];
                    Kekule.IO.Jcamp.LabelTypeInfos.createInfo.apply(null, r);
                }
            }),
            (Kekule.IO.Jcamp.LabelTypeInfos.getType = function (e) {
                var t = c[e];
                return (t && t.dataType) || c._DEFAULT_TYPE;
            }),
            (Kekule.IO.Jcamp.LabelTypeInfos.getCategory = function (e) {
                var t = c[e];
                return (t && t.labelCategory) || u.ANNOTATION;
            }),
            (Kekule.IO.Jcamp.LabelTypeInfos.getInfo = function (e, t) {
                var a = c[e];
                return a && t && a.labelType !== t ? null : a;
            });
        var c = Kekule.IO.Jcamp.LabelTypeInfos;
        (0, Kekule.IO.Jcamp.LabelTypeInfos.createInfos)([
            ["TITLE", s.STRING, null, u.GLOBAL],
            ["JCAMPDX", s.STRING, null, u.ANNOTATION],
            ["JCAMPCX", s.STRING, null, u.ANNOTATION],
            ["DATA TYPE", s.STRING],
            ["BLOCKS", s.AFFN],
            ["END", s.NONE],
            ["XUNITS", s.STRING],
            ["YUNITS", s.STRING],
            ["XLABEL", s.STRING],
            ["YLABEL", s.STRING],
            ["FIRSTX", s.AFFN],
            ["LASTX", s.AFFN],
            ["FIRSTY", s.AFFN],
            ["MAXX", s.AFFN],
            ["MINX", s.AFFN],
            ["MAXY", s.AFFN],
            ["MINY", s.AFFN],
            ["DELTAX", s.AFFN],
            ["XFACTOR", s.AFFN],
            ["YFACTOR", s.AFFN],
            ["NPOINTS", s.AFFN],
            ["RESOLUTION", s.STRING, null, u.PARAMTER],
            ["XYDATA", s.MULTILINE_AFFN_ASDF],
            ["XYPOINTS", s.MULTILINE_AFFN_GROUP],
            ["PEAK TABLE", s.MULTILINE_AFFN_GROUP],
            ["PEAK ASSIGNMENTS", s.MULTILINE_AFFN_GROUP],
            ["CLASS", s.STRING],
            ["ORIGIN", s.STRING],
            ["OWNER", s.STRING],
            ["DATE", s.SHORT_DATE, null, u.GLOBAL],
            ["TIME", s.SHORT_TIME, null, u.GLOBAL],
            ["LONGDATE", s.DATETIME, null, u.GLOBAL],
            ["SOURCE REFERENCE", s.STRING],
            ["CROSS REFERENCE", s.STRING],
            ["SAMPLE DESCRIPTION", s.STRING],
            ["CAS NAME", s.STRING],
            ["NAMES", s.STRING],
            ["MOLFORM", s.STRING],
            ["CAS REGISTRY NO", s.STRING],
            ["WISWESSER", s.STRING],
            ["BEILSTEIN LAWSON NO", s.STRING],
            ["REFRACTIVE INDEX", s.AFFN],
            ["DENSITY", s.AFFN],
            ["MW", s.AFFN],
            ["MP", s.AFFN],
            ["BP", s.AFFN],
            ["CONCENTRATIONS", s.STRING],
            ["SPECTROMETER/DATA SYSTEM", s.STRING],
            ["INSTRUMENTAL PARAMETERS", s.STRING],
            ["SAMPLING PROCEDURE", s.STRING],
            ["STATE", s.STRING],
            ["PATH LENGTH", s.STRING],
            ["PRESSURE", s.STRING],
            ["TEMPERATURE", s.STRING],
            ["DATA PROCESSING", s.STRING],
            ["RUNITS", s.STRING],
            ["AUNITS", s.STRING],
            ["FIRSTR", s.AFFN],
            ["LASTR", s.AFFN],
            ["FIRSTA", s.AFFN],
            ["MAXA", s.AFFN],
            ["MINA", s.AFFN],
            ["DELTAR", s.AFFN],
            ["RFACTOR", s.AFFN],
            ["AFACTOR", s.AFFN],
            ["ALIAS", s.AFFN],
            ["ZPD", s.AFFN],
            ["RADATA", s.MULTILINE_AFFN_ASDF],
            ["APPLICATION", s.STRING],
            ["DATACLASS", s.STRING],
            ["DICTIONARY", s.STRING],
            ["BLOCKID", s.STRING],
            ["INDEX", s.STRING],
            ["SMILES", s.STRING],
            ["NTUPLES", s.STRING],
            ["VAR_NAME", s.STRING_GROUP],
            ["SYMBOL", s.STRING_GROUP],
            ["VAR_TYPE", s.STRING_GROUP],
            ["VAR_FORM", s.STRING_GROUP],
            ["VAR_DIM", s.SIMPLE_AFFN_GROUP],
            ["UNITS", s.STRING_GROUP],
            ["FIRST", s.SIMPLE_AFFN_GROUP],
            ["LAST", s.SIMPLE_AFFN_GROUP],
            ["MIN", s.SIMPLE_AFFN_GROUP],
            ["MAX", s.SIMPLE_AFFN_GROUP],
            ["FACTOR", s.SIMPLE_AFFN_GROUP],
            ["END NTUPLES", s.STRING],
            ["PAGE", s.STRING],
            ["DATA TABLE", s.DATA_TABLE],
        ]),
            (Kekule.IO.Jcamp.LdrValueParserCoder = {
                _parserFuncs: { byLabelName: {}, byDataType: {} },
                _coderFuncs: { byLabelName: {}, byDataType: {} },
                registerParser: function (e, t, a) {
                    e
                        ? (d._parserFuncs.byLabelName[i.standardizeLdrLabelName(e)] = a)
                        : t && (d._parserFuncs.byDataType[t] = a);
                },
                getParserFunc: function (e) {
                    var a = t.Utils.standardizeLdrLabelName(e.labelName),
                        r = d._parserFuncs.byLabelName[a];
                    if (!r) {
                        var n = c.getType(a);
                        r = d._parserFuncs.byDataType[n];
                    }
                    return r || (r = d._parserFuncs._default), r;
                },
                registerCoder: function (e, t, a) {
                    e
                        ? (d._coderFuncs.byLabelName[i.standardizeLdrLabelName(e)] = a)
                        : t && (d._coderFuncs.byDataType[t] = a);
                },
                getCoderFunc: function (e) {
                    var a = t.Utils.standardizeLdrLabelName(e),
                        r = d._coderFuncs.byLabelName[a];
                    if (!r) {
                        var n = c.getType(a);
                        r = d._coderFuncs.byDataType[n];
                    }
                    return r || (r = d._coderFuncs._default), r;
                },
                parseValue: function (e, t) {
                    return d.getParserFunc(e)(e.valueLines, t);
                },
                encodeValue: function (e, t, a) {
                    var r = d.getCoderFunc(e)(t, a);
                    return Kekule.ArrayUtils.toArray(r);
                },
                stringParser: function (e, t) {
                    return e.join("\n");
                },
                stringCoder: function (e, t) {
                    return e.toString().split("\n");
                },
                affnParser: function (e, t) {
                    var a = i.getFirstNonemptyLine(e),
                        r = parseFloat(a);
                    return Kekule.NumUtils.isNormalNumber(r) ? r : NaN;
                },
                affnCoder: function (e, t) {
                    return Kekule.NumUtils.isNormalNumber(e) ? e.toString() : a.VALUE_ABNORMAL_NUM;
                },
                asdfParser: function (e, t) {
                    var a = i.getFirstNonemptyLine(e),
                        r = i.decodeAsdfLine(a);
                    return r && r[0];
                },
                asdfCoder: function (e, t) {
                    Kekule.error("not implemented yet");
                },
                shortDateParser: function (e, t) {
                    var a = i.getFirstNonemptyLine(e).split("/");
                    return { year: parseInt(a[0]) || 0, month: parseInt(a[1]) || 0, day: parseInt(a[2]) || 0 };
                },
                shortTimeParser: function (e, t) {
                    var a = i.getFirstNonemptyLine(e).split(":");
                    return { hour: parseInt(a[0]) || 0, minute: parseInt(a[1]) || 0, second: parseInt(a[2]) || 0 };
                },
                longDateParser: function (e, t) {
                    var a = 0,
                        r = 0,
                        n = 0,
                        o = null,
                        s = null,
                        l = null,
                        u = null,
                        c = i.getFirstNonemptyLine(e).split(/\s+/g),
                        d = /(\d+)\/(\d+)\/(\d+)/,
                        p = (c[0] || "").match(d);
                    p && ((a = parseInt(p[1]) || 0), (r = parseInt(p[2]) || 0), (n = parseInt(p[3]) || 0));
                    var f = (c[1] || "").trim();
                    return (
                        f &&
                            ((d = /(\d+)\:(\d+)\:(\d+)(\.(\d+))?/),
                            (p = f.match(d)) &&
                                ((o = parseInt(p[1])),
                                (s = parseInt(p[2])),
                                (l = parseInt(p[3])),
                                (u = parseInt(p[5]) || null))),
                        new Date(a, r - 1, n, o, s, l, u)
                    );
                },
                longDateCoder: function (e, t) {
                    var a = e.getFullYear(),
                        r = e.getMonth() + 1,
                        n = e.getDate(),
                        i = e.getHours(),
                        o = e.getMinutes(),
                        s = e.getSeconds(),
                        l = e.getMilliseconds(),
                        u =
                            [a.toString().lpad(4, "0"), r.toString().lpad(2, "0"), n.toString().lpad(2, "0")].join(
                                "/"
                            ) +
                            " " +
                            [i.toString().lpad(2, "0"), o.toString().lpad(2, "0"), s.toString().lpad(2, "0")].join(":");
                    return l && (u += "." + l.toString().lpad(4, "0")), u;
                },
                stringGroupParser: function (e, t) {
                    var r = e.join(" ").trim();
                    r.endsWith(a.SIMPLE_VALUE_DELIMITER) &&
                        (r = r.substr(0, r.length - a.SIMPLE_VALUE_DELIMITER.length));
                    for (var n = r.split(a.SIMPLE_VALUE_DELIMITER), i = 0, o = n.length; i < o; ++i) {
                        n[i] = n[i].trim();
                        var s = n[i];
                        s.startsWith(a.VALUE_STR_EXPLICIT_QUOTE) &&
                            s.endsWith(a.VALUE_STR_EXPLICIT_QUOTE) &&
                            (n[i] = s.substr(
                                a.VALUE_STR_EXPLICIT_QUOTE.length,
                                s.length - 2 * a.VALUE_STR_EXPLICIT_QUOTE.length
                            ));
                    }
                    return n;
                },
                stringGroupCoder: function (e, r) {
                    for (var n = Kekule.ArrayUtils.toArray(e), i = !1, o = 0, s = n.length; o < s; ++o)
                        if ("string" == typeof n[o]) {
                            i = !0;
                            break;
                        }
                    var l = [],
                        u = t.LdrValueParserCoder.stringCoder;
                    for (o = 0, s = n.length; o < s; ++o) {
                        var c = u(n[o], r);
                        i && (c = a.VALUE_STR_EXPLICIT_QUOTE + c + a.VALUE_STR_EXPLICIT_QUOTE), l.push(c);
                    }
                    return l.join(a.SIMPLE_VALUE_DELIMITER);
                },
                simpleAffnGroupParser: function (e, t) {
                    for (var r = e.join(" ").split(a.SIMPLE_VALUE_DELIMITER), n = 0, i = r.length; n < i; ++n)
                        r[n] = parseFloat(r[n].trim());
                    return r;
                },
                simpleAffnGroupCoder: function (e, t) {
                    return Kekule.ArrayUtils.toArray(e).join(a.SIMPLE_VALUE_DELIMITER);
                },
                xyDataTableParser: function (e, a) {
                    var r = { format: e[0], formatDetail: t.Utils.getDataTableFormatAndPlotDetails(e[0]) },
                        n =
                            Kekule.globalOptions.IO.jcamp.enableXYDataValueCheck &&
                            a &&
                            a.doValueCheck &&
                            !!r.formatDetail.varInc,
                        o = Object.extend(a || {}, { doValueCheck: n });
                    return (r.values = i.decodeAsdfTableLines(e.slice(1), o)), r;
                },
                xyDataTableCoder: function (e, t) {
                    var a = [t.dataFormat];
                    return (a = a.concat(i.encodeAsdfTableLines(e, t.asdfForm, t)));
                },
                groupedDataTableParser: function (e, a) {
                    return {
                        format: e[0],
                        formatDetail: t.Utils.getDataTableFormatAndPlotDetails(e[0]),
                        values: i.decodeAffnGroupTableLines(e.slice(1), a),
                    };
                },
                ntuplesDataTableParser: function (e, a) {
                    var r,
                        n = t.Utils.getDataTableFormatAndPlotDetails(e[0]);
                    return (
                        n.format === t.Consts.DATA_VARLIST_FORMAT_XYDATA
                            ? (r = d.xyDataTableParser(e, a))
                            : n.format === t.Consts.DATA_VARLIST_FORMAT_XYPOINTS
                            ? (r = d.groupedDataTableParser(e, a))
                            : n.format === t.Consts.DATA_VARLIST_FORMAT_VAR_GROUPS &&
                              (r = d.groupedDataTableParser(e, a)),
                        r
                    );
                },
                molecularFormulaParser: function (e, a) {
                    var r,
                        n = e[0].trim();
                    return (
                        n &&
                            Kekule.MolecularFormula &&
                            ((n = (n = n.replace(new RegExp(t.Consts.MOL_FORMULA_SUP_PREFIX, "g"), " ")).replace(
                                new RegExp(t.Consts.MOL_FORMULA_SUB_PREFIX, "g"),
                                ""
                            )),
                            (r = Kekule.FormulaUtils.textToFormula(n))),
                        r || n
                    );
                },
                molecularFormulaCoder: function (a, r) {
                    if (Kekule.MolecularFormula && a instanceof Kekule.MolecularFormula) {
                        var n = e.clone(a.getSections()),
                            i = function (e) {
                                var t = "ZZZZZ",
                                    a = 0,
                                    r = e.obj;
                                return (
                                    r &&
                                        (r.getSymbol && (t = r.getSymbol()),
                                        "C" === t ? (t = "0") : "H" === t && (t = "1"),
                                        r.getMassNumber && (a = r.getMassNumber() || 0)),
                                    [t, a]
                                );
                            };
                        n.sort(function (t, a) {
                            var r = i(t),
                                n = i(a);
                            return e.compare(r, n);
                        });
                        for (var o = [], s = 0, l = n.length; s < l; ++s) {
                            var u = n[s],
                                c = u.obj,
                                d = u.count,
                                p = c.getLabel && c.getLabel();
                            c.getMassNumber && c.getMassNumber() && (p = t.Consts.MOL_FORMULA_SUP_PREFIX + p),
                                d > 1 && (p += d),
                                o.push(p);
                        }
                        return [o.join(" ")];
                    }
                    return [a];
                },
            });
        var d = Kekule.IO.Jcamp.LdrValueParserCoder;
        (d._parserFuncs._default = d.stringParser),
            d.registerParser(null, s.AFFN, d.affnParser),
            d.registerParser(null, s.ASDF, d.asdfParser),
            d.registerParser(null, s.STRING, d.stringParser),
            d.registerParser(null, s.SHORT_DATE, d.shortDateParser),
            d.registerParser(null, s.SHORT_TIME, d.shortTimeParser),
            d.registerParser(null, s.DATETIME, d.longDateParser),
            d.registerParser(null, s.MULTILINE_AFFN_ASDF, d.xyDataTableParser),
            d.registerParser(null, s.MULTILINE_AFFN_GROUP, d.groupedDataTableParser),
            d.registerParser(null, s.DATA_TABLE, d.ntuplesDataTableParser),
            d.registerParser(null, s.STRING_GROUP, d.stringGroupParser),
            d.registerParser(null, s.SIMPLE_AFFN_GROUP, d.simpleAffnGroupParser),
            d.registerParser("MOLFORM", null, d.molecularFormulaParser),
            d.registerCoder(null, s.AFFN, d.affnCoder),
            d.registerCoder(null, s.ASDF, d.asdfCoder),
            d.registerCoder(null, s.STRING, d.stringCoder),
            d.registerCoder(null, s.DATETIME, d.longDateCoder),
            d.registerCoder(null, s.STRING_GROUP, d.stringGroupCoder),
            d.registerCoder(null, s.SIMPLE_AFFN_GROUP, d.simpleAffnGroupCoder),
            d.registerCoder("MOLFORM", null, d.molecularFormulaCoder),
            (Kekule.IO.Jcamp.BlockReaderManager = {
                _readerClasses: [],
                _findRegisteredItemIndex: function (e, t, a, r) {
                    for (var n = Kekule.ObjUtils.isUnset, i = p._readerClasses, o = i.length - 1; o >= 0; --o) {
                        var s = i[o];
                        if (
                            (n(e) || e === s.blockType || (r && "*" === s.blockType)) &&
                            (n(t) || t === s.blockFormat || (r && "*" === s.blockFormat)) &&
                            (n(a) || a === s.readerClass)
                        )
                            return o;
                    }
                    return -1;
                },
                register: function (e, t, a) {
                    p._findRegisteredItemIndex(e, t, a) < 0 &&
                        p._readerClasses.push({ blockType: e, blockFormat: t, readerClass: a });
                },
                unregister: function (e, t, a) {
                    var r = p._findRegisteredItemIndex(e, t, a);
                    r >= 0 && p._readerClasses.splice(r, 1);
                },
                getReaderClass: function (e, t) {
                    var a = p._findRegisteredItemIndex(e, t, null, !0);
                    return a >= 0 ? p._readerClasses[a].readerClass : null;
                },
            }),
            (Kekule.IO.Jcamp.BlockWriterManager = {
                _writerClasses: [],
                _findRegisteredItemIndex: function (e, t) {
                    for (var a = Kekule.ObjUtils.isUnset, r = f._writerClasses, n = r.length - 1; n >= 0; --n) {
                        var i = r[n];
                        if ((a(e) || ClassEx.isOrIsDescendantOf(e, i.objClass)) && (a(t) || t === i.writerClass))
                            return n;
                    }
                    return -1;
                },
                register: function (e, t) {
                    f._findRegisteredItemIndex(e, t) < 0 && f._writerClasses.push({ objClass: e, writerClass: t });
                },
                unregister: function (e, t) {
                    var a = f._findRegisteredItemIndex(e, t);
                    a >= 0 && f._writerClasses.splice(a, 1);
                },
                getWriterClass: function (e) {
                    var t = DataType.isObjectExValue(e) ? e.getClass() : e,
                        a = f._findRegisteredItemIndex(t, null);
                    return a >= 0 ? f._writerClasses[a].writerClass : null;
                },
            });
        var p = Kekule.IO.Jcamp.BlockReaderManager,
            f = Kekule.IO.Jcamp.BlockWriterManager;
        (Kekule.IO.Jcamp.BlockReader = Class.create(Kekule.IO.ChemDataReader, {
            CLASS_NAME: "Kekule.IO.Jcamp.BlockReader",
            initialize: function (e) {
                this.setPropStoreFieldValue("ldrHandlerMap", {}),
                    this.tryApplySuper("initialize", e),
                    this._initLdrHandlers();
            },
            initProperties: function () {
                this.defineProp("ldrHandlerMap", {
                    dataType: DataType.HASH,
                    setter: !1,
                    serializable: !1,
                    scope: Class.PropertyScope.PRIVATE,
                }),
                    this.defineProp("blockId", {
                        dataType: DataType.STRING,
                        setter: !1,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    }),
                    this.defineProp("currOptions", {
                        dataType: DataType.HASH,
                        setter: !1,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    }),
                    this.defineProp("parentReader", {
                        dataType: DataType.OBJECT,
                        serializable: !1,
                        scope: Class.PropertyScope.PUBLIC,
                    }),
                    this.defineProp("rootReader", {
                        dataType: DataType.OBJECT,
                        serializable: !1,
                        scope: Class.PropertyScope.PUBLIC,
                        setter: null,
                        getter: function () {
                            var e = this.getParentReader();
                            return e ? (e.getRootReader ? e.getRootReader() : e) : this;
                        },
                    });
            },
            _initLdrHandlers: function () {
                var e = this.getLdrHandlerMap();
                (e._default = this._defaultLdrHandler.bind(this)),
                    (e[a.LABEL_BLOCK_BEGIN] = this.doStoreTitleLdr.bind(this)),
                    (e[a.LABEL_DX_VERSION] = this.doStoreLdrToChemObjInfoProp.bind(this, a.LABEL_DX_VERSION)),
                    (e[a.LABEL_CS_VERSION] = this.doStoreLdrToChemObjInfoProp.bind(this, a.LABEL_CS_VERSION)),
                    (e[a.LABEL_BLOCK_END] = this._ignoreLdrHandler);
                var t = this.doStoreDateTimeLdr.bind(this);
                return (
                    (e.DATE = t),
                    (e.TIME = t),
                    (e.LONGDATE = t),
                    (e[a.LABEL_CROSS_REF] = this.doStoreCrossRefLdr.bind(this)),
                    e
                );
            },
            _defaultLdrHandler: function (e, t, a, r) {
                return this.saveLdrValueToChemObjInfoProp(e.labelName, d.parseValue(e), a, r);
            },
            _ignoreLdrHandler: function (e, t, a, r) {},
            _getBlockMeta: function (e) {
                return o.getBlockMeta(e);
            },
            setObjWithBlockId: function (e, t) {
                var a = this.getRootReader();
                a && a.setObjWithBlockId && a.setObjWithBlockId(e, t);
            },
            getObjFromBlockId: function (e) {
                var t = this.getRootReader();
                return t && t.getObjFromBlockId ? t.getObjFromBlockId(e) : null;
            },
            addCrossRef: function (e, t, a) {
                var r = this.getRootReader();
                r && r.addCrossRefItem && r.addCrossRefItem(this, this.getBlockId(), e, t, a);
            },
            doCreateChemObjForBlock: function (e) {
                return null;
            },
            getLdrNamePrefixForInfoField: function (e, t, a) {
                var r = "jcamp.";
                return t === l.SPECIFIC || (t === l.PRIVATE && (r += "custom.")), r;
            },
            getLdrStorageParamsForInfoField: function (e, a) {
                var r = t.Utils.analysisLdrLabelName(e),
                    n = r.labelType,
                    i = this.getLdrNamePrefixForInfoField(e, n, a);
                return { fullName: i ? i + r.coreName : r.coreName, labelType: n, labelCategory: r.labelCategory };
            },
            saveLdrValueToChemObjInfoProp: function (e, t, a, r) {
                var n,
                    i = this.getLdrStorageParamsForInfoField(e, a),
                    o = r,
                    s = i.labelCategory;
                s === u.ANNOTATION
                    ? (n = a.setAnnotation)
                    : s === u.PARAMTER
                    ? (n = a.setParameter)
                    : s === u.CONDITION
                    ? (n = a.setCondition)
                    : s === u.META
                    ? (n = a.setMeta)
                    : s === u.GLOBAL
                    ? (n = a.setInfoValue)
                    : i.labelType === l.PRIVATE && (n = a.setAnnotation),
                    n || (n = a.setInfoValue),
                    n.apply(a, [o, t]);
            },
            doStoreTitleLdr: function (e, a, r, n) {
                r.setInfoValue("title", t.LdrValueParserCoder.parseValue(e));
            },
            doStoreCrossRefLdr: function (e, a, r, n) {
                var i = t.LdrValueParserCoder.parseValue(e),
                    o = t.Utils.getCrossReferenceDetail(i);
                o.blockId && this.addCrossRef(o.blockId, o.refType, o.refTypeText);
            },
            doStoreLdrToChemObjInfoProp: function (e, t, a, r, n) {
                var i = d.parseValue(t);
                this.saveLdrValueToChemObjInfoProp(e, i, r, n);
            },
            doStoreDateTimeLdr: function (e, t, a, r) {
                var n,
                    i = e.labelName,
                    s = d.parseValue(e);
                if ("LONGDATE" === i) n = s;
                else if ("DATE" === i) {
                    n = new Date(s.year, s.month - 1, s.day);
                    var l = o.getBlockLdr(t, "TIME");
                    if (l) {
                        var u = d.parseValue(l);
                        n.setHours(u.hour, u.minute, u.second);
                    }
                }
                n && this.saveLdrValueToChemObjInfoProp("date", n, a, "date");
            },
            getPendingLdrNames: function () {
                return [];
            },
            getIgnoredLdrNames: function () {
                return [];
            },
            processLdr: function (e, t, a) {
                return this.doProcessLdr(e, t, a);
            },
            doProcessLdr: function (e, t, a) {
                var r = t.labelName,
                    n = a && a.getSpectrumType && a.getSpectrumType(),
                    o = i.jcampLabelNameToKekule(r, n),
                    s = this.getLdrHandlerMap(),
                    l = s[r] || s._default;
                l && l(t, e, a, o);
            },
            doBuildCrossRef: function (e, t, a, r) {},
            doReadBlockId: function (e) {
                var r = t.BlockUtils.getBlockLdr(e, a.LABEL_BLOCK_ID);
                r && this.setPropStoreFieldValue("blockId", t.LdrValueParserCoder.parseValue(r));
            },
            doSetChemObjFromBlock: function (e, t) {
                if (t) {
                    for (
                        var a = this.getIgnoredLdrNames() || [],
                            r = this.getPendingLdrNames() || [],
                            n = [],
                            i = 0,
                            o = e.ldrs.length;
                        i < o;
                        ++i
                    ) {
                        var s = e.ldrs[i];
                        a.indexOf(s.labelName) >= 0 ||
                            (r.indexOf(s.labelName) >= 0 ? n.push(s) : this.processLdr(e, s, t));
                    }
                    for (i = 0, o = n.length; i < o; ++i) {
                        s = n[i];
                        this.processLdr(e, s, t);
                    }
                }
                return t;
            },
            doReadBlock: function (e, t) {
                this.setPropStoreFieldValue("currOptions", t || {});
                var a = this.doCreateChemObjForBlock(e);
                return (
                    a &&
                        (this.doReadBlockId(e),
                        this.doSetChemObjFromBlock(e, a),
                        this.getBlockId() && this.setObjWithBlockId(this.getBlockId(), a)),
                    a
                );
            },
            doReadData: function (e, t, a, r) {
                return this.doReadBlock(e, r);
            },
        })),
            (Kekule.IO.Jcamp.DataBlockReader = Class.create(Kekule.IO.Jcamp.BlockReader, {
                CLASS_NAME: "Kekule.IO.Jcamp.DataBlockReader",
            })),
            (Kekule.IO.Jcamp.LinkBlockReader = Class.create(Kekule.IO.Jcamp.BlockReader, {
                CLASS_NAME: "Kekule.IO.Jcamp.LinkBlockReader",
                initProperties: function () {
                    this.defineProp("childReaders", {
                        dataType: DataType.ARRAY,
                        serializable: !1,
                        scope: Class.PropertyScope.PUBLIC,
                    });
                },
                doFinalize: function () {
                    this._finalizeChildReaders(), this.tryApplySuper("doFinalize");
                },
                _finalizeChildReaders: function () {
                    var e = this.getChildReaders();
                    if (e) for (var t = 0, a = e.length; t < a; ++t) e[t].finalize();
                    this.setPropStoreFieldValue("childReaders", []);
                },
                _initLdrHandlers: function () {
                    var e = this.tryApplySuper("_initLdrHandlers");
                    (e[a.LABEL_DATA_TYPE] = this._ignoreLdrHandler), (e[a.LABEL_BLOCK_COUNT] = this._ignoreLdrHandler);
                },
                doCreateChemObjForBlock: function (e) {
                    return this._getBlockMeta(e).blockType === t.BlockType.LINK
                        ? new Kekule.ChemObjList()
                        : this.tryApplySuper("doCreateChemObjForBlock", [e]);
                },
                doReadBlock: function (e, t) {
                    var a;
                    if (e.blocks.length <= 0) return null;
                    (a = this.tryApplySuper("doReadBlock", [e, t])), this._finalizeChildReaders();
                    for (var r = [], n = 0, i = e.blocks.length; n < i; ++n) {
                        var o = e.blocks[n],
                            s = this._getBlockMeta(o),
                            l = p.getReaderClass(s.blockType, s.format);
                        if (l) {
                            var u = this._createChildReader(l);
                            try {
                                var c = u.doReadData(o, null, null, t);
                                c && r.push(c);
                            } finally {
                            }
                        }
                    }
                    if (r.length <= 1) return a.finalize(), r[0];
                    for (n = 0, i = r.length; n < i; ++n) a.appendChild(r[n]);
                    return a;
                },
                _createChildReader: function (e) {
                    var t = new e();
                    return t && (t.setParentReader(this), this.getChildReaders().push(t)), t;
                },
            })),
            p.register(t.BlockType.LINK, "*", Kekule.IO.Jcamp.LinkBlockReader),
            p.register(t.BlockType.DATA, "*", Kekule.IO.Jcamp.DataBlockReader),
            (Kekule.IO.Jcamp.BlockWriter = Class.create(Kekule.IO.ChemDataWriter, {
                CLASS_NAME: "Kekule.IO.Jcamp.BlockWriter",
                initialize: function (e) {
                    this.setPropStoreFieldValue("ldrCreatorMap", {}),
                        this.tryApplySuper("initialize", e),
                        this._initLdrCreators();
                },
                initProperties: function () {
                    this.defineProp("blockId", {
                        dataType: DataType.STRING,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    }),
                        this.defineProp("blockDataType", {
                            dataType: DataType.STRING,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("ldrCreatorMap", {
                            dataType: DataType.HASH,
                            setter: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("parentWriter", {
                            dataType: DataType.OBJECT,
                            serializable: !1,
                            scope: Class.PropertyScope.PUBLIC,
                        }),
                        this.defineProp("rootWriter", {
                            dataType: DataType.OBJECT,
                            serializable: !1,
                            scope: Class.PropertyScope.PUBLIC,
                            setter: null,
                            getter: function () {
                                var e = this.getParentWriter();
                                return e ? (e.getRootWriter ? e.getRootWriter() : e) : this;
                            },
                        });
                },
                assignBlockIdAndDataType: function (e) {
                    var t = this.getRootWriter(),
                        a = t && t.generateUniqueBlockId();
                    a && this.setBlockId(a);
                    var r = this.doGetDataTypeForBlock(e);
                    return r && this.setBlockDataType(r), e && this.setBlockInfoForObj(e, { id: a, dataType: r }), a;
                },
                setBlockInfoForObj: function (e, t) {
                    var a = this.getRootWriter();
                    a && a.setBlockInfoForObj(e, t);
                },
                getBlockInfoFromObj: function (e) {
                    var t = this.getRootWriter();
                    return t && t.getBlockInfoFromObj(e);
                },
                getLdrCreator: function (e) {
                    var t = this.getLdrCreatorMap();
                    return t[e] || t._default;
                },
                _initLdrCreators: function () {
                    this.getLdrCreatorMap()._default = this._defaultLdrCreator.bind(this);
                },
                _defaultLdrCreator: function (e, t, a, r) {
                    return this.createLdr(e, t, r);
                },
                _ignoreLdrCreator: function (e, t, a, r) {},
                doWriteData: function (e, t, a, r) {
                    var n = Object.extend({}, Kekule.globalOptions.IO.jcamp);
                    return (n = Object.extend(n, r || {})), this.doWriteBlock(e, n);
                },
                doWriteBlock: function (e, t) {
                    var r = o.createBlock();
                    if (r) {
                        var n = this.getTitleForBlock(e);
                        this.saveToLdrInBlock(r, e, "", n, a.LABEL_BLOCK_BEGIN),
                            this.doSaveJcampVersionToBlock(e, r, t);
                        var i = this.getDataTypeForBlock(e);
                        i && this.saveToLdrInBlock(r, e, "", i, a.LABEL_DATA_TYPE),
                            this.getBlockId() && this.doSaveBlockIdToBlock(e, r, t),
                            this.doSaveChemObjInfoToBlock(e, r, t),
                            this.doSaveChemObjToBlock(e, r, t),
                            this.saveToLdrInBlock(r, e, "", "", a.LABEL_BLOCK_END);
                    }
                    return r;
                },
                getTitleForBlock: function (e) {
                    return null;
                },
                getDataTypeForBlock: function (e) {
                    return this.getBlockDataType() || this.doGetDataTypeForBlock(e);
                },
                doGetDataTypeForBlock: function (e) {
                    return null;
                },
                doSaveJcampVersionToBlock: function (e, t, a) {},
                doSaveBlockIdToBlock: function (e, t, r) {
                    var n = this.getBlockId();
                    n && this.saveToLdrInBlock(t, e, "", n, a.LABEL_BLOCK_ID);
                },
                doSaveChemObjInfoToBlock: function (e, a, r) {
                    for (
                        var n = e.getInfoKeys(), i = this.doGetIgnoredChemObjInfoKeys(e, r), o = 0, s = n.length;
                        o < s;
                        ++o
                    ) {
                        var l = n[o];
                        if (!(i.indexOf(l) >= 0)) {
                            var u = e.getInfoValue(l);
                            Kekule.ObjUtils.notUnset(u) &&
                                this.doSaveChemObjInfoItemToBlock(e, l, "info." + l, u, a, r);
                        }
                    }
                    t.BlockUtils.getBlockLdr(a, "LONGDATE") ||
                        this.saveToLdrInBlock(a, e, "", new Date(), "LONGDATE", !1);
                },
                doSaveChemObjInfoItemToBlock: function (e, a, r, n, i, o) {
                    var s = this.doGetIgnoredChemObjInfoJcampLabelNames(e, o),
                        l = t.Utils.kekuleLabelNameToJcamp(a, null);
                    s.indexOf(l) < 0 && this.saveToLdrInBlock(i, e, r, n, l, !1);
                },
                doGetIgnoredChemObjInfoKeys: function (e, t) {
                    return ["title"];
                },
                doGetIgnoredChemObjInfoJcampLabelNames: function (e, a) {
                    return [
                        t.Consts.LABEL_BLOCK_BEGIN,
                        t.Consts.LABEL_BLOCK_END,
                        t.Consts.LABEL_DX_VERSION,
                        t.Consts.LABEL_CS_VERSION,
                    ];
                },
                doSaveChemObjToBlock: function (e, t, a) {},
                createLdr: function (e, t, a) {
                    return {
                        labelName: a,
                        valueLines: Kekule.ObjUtils.notUnset(t) ? this._convToLdrValueLines(a, t) : [],
                    };
                },
                createLdrRaw: function (t, a) {
                    return { labelName: t, valueLines: e.toArray(a) };
                },
                saveToLdrInBlock: function (e, t, a, r, n, i) {
                    var o = this.getLdrCreator(a),
                        s = o && o(a, r, e, n);
                    s && this.setLdrInBlock(e, s, i);
                },
                setLdrInBlock: function (e, a, r) {
                    if (a) {
                        var n = a.labelName,
                            i = t.BlockUtils.getLabelIndex(n, e);
                        if (i >= 0 && r) t.BlockUtils.getLdrAt(i, e).valueLines = a.valueLines;
                        else t.BlockUtils.addLdrToBlock(e, a);
                    }
                },
                _convJsValueToBasicType: function (e) {
                    return e instanceof Kekule.Scalar ? e.getValue() : e;
                },
                _convToLdrValueLines: function (e, t) {
                    return d.encodeValue(e, this._convJsValueToBasicType(t));
                },
            })),
            (Kekule.IO.Jcamp.LinkBlockWriter = Class.create(Kekule.IO.Jcamp.BlockWriter, {
                CLASS_NAME: "Kekule.IO.Jcamp.LinkBlockWriter",
                initProperties: function () {
                    this.defineProp("childObjWriterClassMap", {
                        dataType: DataType.OBJECT,
                        setter: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    }),
                        this.defineProp("targetChildObjs", {
                            dataType: DataType.ARRAY,
                            setter: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        });
                },
                doWriteData: function (e, t, a, r) {
                    var n = this.doCreateChildObjWriterClassMap(e);
                    return n.children.length > 0
                        ? (this.setPropStoreFieldValue("childObjWriterClassMap", n.map),
                          this.setPropStoreFieldValue("targetChildObjs", n.children),
                          this.tryApplySuper("doWriteData", [e, t, a, r]))
                        : null;
                },
                getTitleForBlock: function (e) {
                    return e.getInfoValue("title") || e.getId();
                },
                doSaveJcampVersionToBlock: function (e, a, r) {
                    this.saveToLdrInBlock(a, e, "", r.outputDxVersion, t.Consts.LABEL_DX_VERSION);
                },
                doGetDataTypeForBlock: function (e) {
                    return "LINK";
                },
                doSaveChemObjToBlock: function (e, a, r) {
                    var n = this.getTargetChildObjs();
                    if (n.length) {
                        var i = new Kekule.MapEx();
                        try {
                            for (var o = 0, s = n.length; o < s; ++o) {
                                if ((c = n[o])) {
                                    var l = this.getChildObjWriterClassMap().get(c);
                                    if (l) (d = this._createChildWriter(l)).assignBlockIdAndDataType(c), i.set(c, d);
                                }
                            }
                            var u = n;
                            for (o = 0, s = u.length; o < s; ++o) {
                                var c = u[o],
                                    d = i.get(c);
                                try {
                                    var p = d.writeData(c, null, null, r);
                                    p && this.doAppendChildBlock(a, p, r);
                                } finally {
                                    d.finalize();
                                }
                            }
                        } finally {
                            i.finalize();
                        }
                    }
                    this.saveToLdrInBlock(a, e, "", a.blocks.length, t.Consts.LABEL_BLOCK_COUNT, !0);
                },
                doCreateChildObjWriterClassMap: function (e) {
                    var t = this,
                        a = { map: new Kekule.MapEx(), children: null },
                        r = [],
                        n = [],
                        i = function (e) {
                            if (e.getChildCount && e.getChildAt)
                                for (var o = 0, s = e.getChildCount(); o < s; ++o) {
                                    var l = e.getChildAt(o);
                                    if (l) {
                                        var u = t.doGetChildWriterClass(l);
                                        u &&
                                            (u === t.getClass()
                                                ? i(l)
                                                : (a.map.set(l, u),
                                                  l instanceof Kekule.Spectroscopy.Spectrum ? r.push(l) : n.push(l)));
                                    }
                                }
                        };
                    return i(e), (a.children = n.concat(r)), a;
                },
                doGetChildWriterClass: function (e) {
                    return t.BlockWriterManager.getWriterClass(e) || null;
                },
                _createChildWriter: function (e) {
                    var t = new e();
                    return t.setParentWriter(this), t;
                },
                doAppendChildBlock: function (e, t, a) {
                    t && e.blocks.push(t);
                },
            })),
            t.BlockWriterManager.register(Kekule.ChemObjList, Kekule.IO.Jcamp.LinkBlockWriter),
            t.BlockWriterManager.register(Kekule.ChemSpace, Kekule.IO.Jcamp.LinkBlockWriter);
    })(),
    (function () {
        "use strict";
        Kekule.IO.Jcamp.Labels.addMaps([
            ["JCAMPCS", "JcampCsVersion"],
            ["JCAMPDX", "JcampDxVersion"],
            ["TITLE", "Title"],
            ["DATATYPE", "DataType"],
            ["DATACLASS", "DataClass"],
            ["XUNITS", "XUnits"],
            ["YUNITS", "YUnits"],
            ["XFACTOR", "XFactor"],
            ["YFACTOR", "YFactor"],
            ["FIRSTX", "FirstX"],
            ["LASTX", "LastX"],
            ["FIRSTY", "FirstY"],
            ["MAXX", "MaxX"],
            ["MINX", "MinX"],
            ["MAXY", "MaxY"],
            ["MINY", "MinY"],
            ["DELTAX", "DeltaX"],
            ["NPOINTS", "NPoints"],
            ["XYDATA", "XYData"],
            ["XYPOINTS", "XYPoints"],
            ["PEAKASSIGNMENTS", "PeakAssignments"],
            ["PEAKTABLE", "PeakTable"],
            ["CLASS", "Class"],
            ["ORIGIN", "Origin"],
            ["OWNER", "Owner"],
            ["DATE", "Date"],
            ["TIME", "Time"],
            ["LONGDATE", "LongDate"],
            ["SOURCEREFERENCE", "SourceReference"],
            ["CROSSREFERENCE", "CrossReference"],
            ["SAMPLEDESCRIPTION", "SampleDescription"],
            ["CASNAME", "CASName"],
            ["NAMES", "Names"],
            ["MOLFORM", "MolForm"],
            ["IUPACNAME", "IUPACName"],
            ["CASREGISTRYNO", "CASRegistryNo"],
            ["WISWESSER", "Wiswesser"],
            ["BEILSTEINLAWSONNO", "BeilsteinLawsonNo"],
            ["BP", "BP"],
            ["MP", "MP"],
            ["PRESSURE", "Pressure"],
            ["TEMPERATURE", "Temperature"],
            ["STATE", "State"],
            ["REFRACTIVEINDEX", "RefractiveIndex"],
            ["DENSITY", "Density"],
            ["MW", "MW"],
            ["CONCENTRATIONS", "Concentrations"],
            ["SOLVENTNAME", "SolventName"],
            ["SPECTROMETERDATASYSTEM", "SpectrometerDataSystem"],
            ["INSTRUMENTALPARAMETERS", "InstrumentalParameters"],
            ["INSTRUMENTPARAMETERS", "InstrumentParameters"],
            ["SAMPLINGPROCEDURE", "SamplingProcedure"],
            ["RESOLUTION", "Resolution"],
            ["PATHLENGTH", "PathLength"],
            ["DATAPROCESSING", "DataProcessing"],
            ["XLABEL", "XLabel"],
            ["YLABEL", "YLabel"],
            ["AUDITTRAIL", "AuditTrail"],
            ["COMMENTS", "Comments"],
            ["END", "END"],
            ["BLOCKS", "BLOCKS"],
            ["BLOCKID", "BLOCKID"],
            ["NTUPLES", "NTUPLES"],
            ["ENDNTUPLES", "ENDNTUPLES"],
            ["PAGE", "PAGE"],
            ["DATATABLE", "DataTable"],
            ["VARDIM", "VARDIM"],
            ["VARFORM", "VARFORM"],
            ["VARNAME", "VARNAME"],
            ["VARTYPE", "VARTYPE"],
            ["FACTOR", "Factor"],
            ["FIRST", "First"],
            ["LAST", "Last"],
            ["MAX", "Max"],
            ["MIN", "Min"],
            ["SYMBOL", "Symbol"],
            ["UNITS", "Units"],
            [".METHOD", "EMR.Method"],
            [".DETECTIONMODE", "EMR.DetectionMode"],
            [".DETECTIONMETHOD", "EMR.DetectionMethod"],
            [".MICROWAVEFREQUENCY1", "EMR.MicrowaveFrequency1"],
            [".MICROWAVEPOWER1", "EMR.MicrowavePower1"],
            [".MICROWAVEPHASE1", "EMR.MicrowavePhase1"],
            [".MICROWAVEFREQUENCY2", "EMR.MicrowaveFrequency2"],
            [".MICROWAVEPOWER2", "EMR.MicrowavePower2"],
            [".MICROWAVEPHASE2", "EMR.MicrowavePhase2"],
            [".MODULATIONUNIT", "EMR.ModulationUnit"],
            [".MODULATIONAMPLITUDE", "EMR.ModulationAmplitude"],
            [".MODULATIONFREQUENCY", "EMR.ModulationFrequency"],
            [".RECEIVERGAIN", "EMR.ReceiverGain"],
            [".RECEIVERHARMONIC", "EMR.ReceiverHarmonic"],
            [".DETECTIONPHASE", "EMR.DetectionPhase"],
            [".SCANTIME", "EMR.ScanTime"],
            [".NUMBEROFSCANS", "EMR.NumberofScans"],
            [".GONIOMETERANGLE", "EMR.GoniometerAngle"],
            [".STATICFIELD", "EMR.StaticField"],
            [".SCANNEDRFPOWER", "EMR.ScannedRFPower"],
            [".PUMPEDRFFREQUENCY1", "EMR.PumpedRFFrequency1"],
            [".PUMPEDRFPOWER1", "EMR.PumpedRFPower1"],
            [".PUMPEDRFFREQUENCY2", "EMR.PumpedRFFrequency2"],
            [".PUMPEDRFPOWER2", "EMR.PumpedRFPower2"],
            [".GRADIENTTHETA", "EMR.GradientTheta"],
            [".GRADIENTPHI", "EMR.GradientPhi"],
            [".GRADIENTSTRENGTHINTHETAPHIDIRECTION", "EMR.GradientStrengthinThetaPhiDirection"],
            [".GRADIENTSTRENGTHX", "EMR.GradientStrengthX"],
            [".GRADIENTSTRENGTHY", "EMR.GradientStrengthY"],
            [".GRADIENTSTRENGTHZ", "EMR.GradientStrengthZ"],
            [".SIMULATIONSOURCE", "EMR.SimulationSource"],
            [".SIMULATIONPARAMETERS", "EMR.SimulationParameters"],
            [".RESONATOR", "EMR.Resonator"],
            [".TIMECONSTANT", "EMR.TimeConstant"],
            [".CALIBRATIONSTANDARD", "EMR.CalibrationStandard"],
            [".XOFFSET", "EMR.X_Offset"],
            [".AVERAGES", "IMS.Averages"],
            [".CARRIERGAS", "IMS.CarrierGas"],
            [".CARRIERGASFLOW", "IMS.CarrierGasFlow"],
            [".CARRIERGASMOISTURE", "IMS.CarrierGasMoisture"],
            [".DRIFTCHAMBER", "IMS.DriftChamber"],
            [".DRIFTGAS", "IMS.DriftGas"],
            [".DRIFTGASFLOW", "IMS.DriftGasFlow"],
            [".ELECTRICFIELD", "IMS.ElectricField"],
            [".IONIZATIONCHAMBER", "IMS.IonizationChamber"],
            [".IONIZATIONENERGY", "IMS.IonizationEnergy"],
            [".IONIZATIONMODE", "IMS.IonizationMode"],
            [".IONIZATIONSOURCE", "IMS.IonizationSource"],
            [".IONPOLARITY", "IMS.IonPolarity"],
            [".PRESSURE", "IMS.Pressure"],
            [".TEMPERATURE", "IMS.Temperature"],
            [".REDUCEDMOBILITY", "IMS.ReducedMobility"],
            [".REPETITIONRATE", "IMS.RepititionRate"],
            [".SHUTTERGRIDPOTENTIAL", "IMS.ShutterGridPotential"],
            [".SHUTTEROPENINGTIME", "IMS.ShutterOpeningTime"],
            [".ACCELERATINGVOLTAGE", "MS.AcceleratingVoltage"],
            [".BASEPEAK", "MS.Basepeak"],
            [".BASEPEAKINTENSITY", "MS.BasepeakIntensity"],
            [".MONOISOTOPICMASS", "MS.MonoisotopicMass"],
            [".NOMINALMASS", "MS.NominalMass"],
            [".RETENTIONTIME", "MS.RetentionTime"],
            [".RIC", "MS.RIC"],
            [".SCANNUMBER", "MS.ScanNumber"],
            [".SCANRATE", "MS.ScanRate"],
            [".SOURCETEMPERATURE", "MS.SourceTemperature"],
            [".SPECTROMETERTYPE", "MS.SpectrometerType"],
            [".TOTALIONCURRENT", "MS.TotalIonCurrent"],
            [".DETECTOR", "MS.Detector"],
            [".INLET", "MS.Inlet"],
            [".INLETTEMPERATURE", "MS.InletTemperature"],
            [".IONIZATIONENERGY", "MS.IonizationEnergy"],
            [".IONIZATIONMODE", "MS.IonizationMode"],
            [".ACQUISITIONMODE", "NMR.AcquisitionMode"],
            [".ACQUISITIONRANGE", "NMR.AcquisitionRange"],
            [".ACQUISITIONTIME", "NMR.AcquisitionTime"],
            [".AVERAGES", "NMR.Averages"],
            [".COUPLINGCONSTANTS", "NMR.CouplingConstants"],
            [".DECOUPLER", "NMR.Decoupler"],
            [".DELAY", "NMR.Delay"],
            [".DIGITISERRES", "NMR.DigitiserRes"],
            [".FIELD", "NMR.Field"],
            [".FILTERWIDTH", "NMR.FilterWidth"],
            [".MASFREQUENCY", "NMR.MASFrequency"],
            [".MAXINTENSITY", "NMR.MaxIntensity"],
            [".MININTENSITY", "NMR.MinIntensity"],
            [".OBSERVE90", "NMR.Observe90"],
            [".OBSERVEFREQUENCY", "NMR.ObserveFrequency"],
            [".OBSERVENUCLEUS", "NMR.ObserveNucleus"],
            [".PHASE0", "NMR.Phase0"],
            [".PHASE1", "NMR.Phase1"],
            [".PULSESEQUENCE", "NMR.PulseSequence"],
            [".RELAXATIONTIMES", "NMR.RelaxationTimes"],
            [".SHIFTREFERENCE", "NMR.ShiftReference"],
            [".SOLVENTREFERENCE", "NMR.SolventReference"],
            [".SPINNINGRATE", "NMR.SpinningRate"],
            [".ZEROFILL", "NMR.ZeroFill"],
            ["AFACTOR", "AFactor"],
            ["ALIAS", "Alias"],
            ["AUNITS", "AUnits"],
            ["FIRSTA", "FirstA"],
            ["MAXA", "MaxA"],
            ["MINA", "MinA"],
            ["DELTAR", "DeltaR"],
            ["FIRSTR", "FirstR"],
            ["LASTR", "LastR"],
            ["RADATA", "RAData"],
            ["RFACTOR", "RFactor"],
            ["RUNITS", "RUnits"],
            ["ZPD", "ZPD"],
            ["ATOMLIST", "AtomList"],
            ["BONDLIST", "BondList"],
            ["CHARGE", "Charge"],
            ["MAXRASTER", "MaxRaster"],
            ["MAXXYZ", "MaxXYZ"],
            ["RADICAL", "Radical"],
            ["STEREOCENTER", "Stereocenter"],
            ["STEREOMOLECULE", "Stereomolecule"],
            ["STEREOPAIR", "Stereopair"],
            ["XYRASTER", "XYRaster"],
            ["XYZ", "XYZ"],
            ["XYZFACTOR", "XYZFactor"],
            ["XYZSOURCE", "XYZSource"],
        ]);
    })(),
    (function () {
        "use strict";
        var e = Kekule.ArrayUtils,
            t = Kekule.IO.Jcamp,
            a = Kekule.Spectroscopy,
            r = Kekule.Unit,
            n = Kekule.Spectroscopy.SpectrumType;
        (Kekule.IO.Jcamp.SpectrumDataStorageStyle = { CLASSIC: 1, NTUPLE: 2, SMART: 0 }),
            Kekule.globalOptions.add("IO.jcamp", {
                outputDxVersion: "5.00",
                dxDataStorageStyle: Kekule.IO.Jcamp.SpectrumDataStorageStyle.SMART,
                dxDataAllowedSavingErrorRatio: 1e-4,
                dxDataPreferredOrdinateScaledRange: { min: -32767, max: 32767 },
                dxDataAsdfTableOutputForm: t.AsdfForm.DIF_DUP,
                useDxMinMaxValueAsDisplayRange: !1,
                disablePeakAssignmentReading: !1,
                disablePeakAssignmentWriting: !1,
                autoHiddenSpectrumRefMolecule: !0,
            }),
            (Kekule.IO.Jcamp.DxConsts = {
                CANDIDATE_INDEPENDENT_VAR_SYMBOLS: ["X", "R", "U", "V", "K", "P"],
                CANDIDATE_DEPENDENT_VAR_SYMBOLS: ["Y", "Z", "A", "B", "C", "D"],
            }),
            (Kekule.IO.Jcamp.DxUtils = {
                _spectrumTypeMap: [
                    ["INFRARED", n.IR],
                    ["NMR", n.NMR],
                    ["MASS", n.MS],
                    ["ION MOBILITY", n.IMS],
                    ["IMS", n.IMS],
                    ["RAMAN", n.RAMAN],
                    ["UV", n.UV_VIS],
                    ["VIS", n.UV_VIS],
                    ["", n.GENERAL],
                ],
                _dxUnitToMetricsObjMap: {
                    "ARBITARY UNITS": r.Arbitrary.ARBITRARY,
                    "ARBITARY UNIT": r.Arbitrary.ARBITRARY,
                    SECONDS: r.Time.SECOND,
                    SECOND: r.Time.SECOND,
                    MILLISECONDS: r.Time.MILLISECOND,
                    MICROSECONDS: r.Time.MICROSECOND,
                    NANOSECONDS: r.Time.NANOSECOND,
                    PPM: r.Dimensionless.PARTS_PER_MILLION,
                    HZ: r.Frequency.HERTZ,
                    "1/CM": r.WaveNumber.RECIPROCAL_CENTIMETER,
                    MICROMETERS: r.Length.MICROMETER,
                    NANOMETERS: r.Length.NANOMETER,
                    TRANSMITTANCE: r.OpticalTransmittance.TRANSMITTANCE_PERCENT,
                    REFLECTANCE: r.OpticalReflectance.REFLECTANCE,
                    ABSORBANCE: r.OpticalAbsorbance.ABSORBANCE,
                    "KUBELKA-MUNK": r.OpticalKubelkaMunk.KUBELKA_MUNK,
                    "CHANNEL NUMBER": null,
                    COUNTS: r.Misc.MS_COUNT,
                    COUNT: r.Misc.MS_COUNT,
                    "M/Z": r.SpectrumMS.MS_MASS_CHARGE_RATIO,
                    "RELATIVE ABUNDANCE ": r.SpectrumMS.MS_RELATIVE_ABUNDANCE,
                    MICROAMPERES: r.ElectricCurrent.MICROAMPERE,
                    NANOAMPERES: r.ElectricCurrent.NANOAMPERE,
                    PICOAMPERES: r.ElectricCurrent.PICOAMPERE,
                },
                jcampSpectrumTypeToKekule: function (e) {
                    for (
                        var a, r = t.DxUtils._spectrumTypeMap, n = (e || "").toUpperCase(), i = 0, o = r.length;
                        i < o;
                        ++i
                    )
                        if (n.indexOf(r[i][0]) >= 0) {
                            a = r[i][1];
                            break;
                        }
                    return a || (a = n), a;
                },
                kekuleSpectrumTypeToJcampCoreName: function (e) {
                    for (var a, r = t.DxUtils._spectrumTypeMap, n = 0, i = r.length; n < i; ++n)
                        if (e === r[n][1]) {
                            a = r[n][0];
                            break;
                        }
                    return a || (a = jType), a;
                },
                dxUnitToMetricsUnitSymbol: function (e) {
                    if (!e) return "";
                    var a = t.DxUtils._dxUnitToMetricsObjMap[e],
                        r = a && a.symbol;
                    return r || (r = e.toLowerCase().upperFirst()), r;
                },
                mertricsUnitSymbolToDxUnit: function (e) {
                    if (!e) return "";
                    for (
                        var a = t.DxUtils._dxUnitToMetricsObjMap,
                            r = Kekule.ObjUtils.getOwnedFieldNames(a),
                            n = 0,
                            i = r.length;
                        n < i;
                        ++n
                    ) {
                        var o = r[n],
                            s = a[o];
                        if (s && s.symbol === e) return o;
                    }
                    return e.toUpperCase();
                },
                calcNumFactorForRange: function (e, a, r, n, i) {
                    return t.Utils.calcNumFactorForRange(e, a, r, n, i);
                },
            }),
            Kekule.IO.Jcamp.LabelTypeInfos.createInfos([
                ["SPECTROMETER TYPE", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.MS],
                ["INLET", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.MS],
                ["IONIZATION MODE", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.MS],
                ["OBSERVE FREQUENCY", t.ValueType.AFFN, null, t.LabelCategory.PARAMTER, a.SpectrumType.NMR],
                ["OBSERVE NUCLEUS", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.NMR],
                ["SOLVENT REFERENCE", t.ValueType.AFFN, null, t.LabelCategory.PARAMTER, a.SpectrumType.NMR],
                ["DELAY", t.ValueType.SIMPLE_AFFN_GROUP, null, t.LabelCategory.PARAMTER, a.SpectrumType.NMR],
                ["ACQUISITION MODE", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.NMR],
                ["IMS PRESSURE", t.ValueType.AFFN, null, t.LabelCategory.PARAMTER, a.SpectrumType.IMS],
                ["CARRIER GAS", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.IMS],
                ["DRIFT GAS", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.IMS],
                ["ELECTRIC FIELD", t.ValueType.SIMPLE_AFFN_GROUP, null, t.LabelCategory.PARAMTER, a.SpectrumType.IMS],
                ["ION POLARITY", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.IMS],
                ["IONIZATION MODE", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.IMS],
                ["IMS TEMPERATURE", t.ValueType.SIMPLE_AFFN_GROUP, null, t.LabelCategory.PARAMTER, a.SpectrumType.IMS],
                ["SHUTTER OPENING TIME", t.ValueType.AFFN, null, t.LabelCategory.PARAMTER, a.SpectrumType.IMS],
                ["MASS ANALYSER", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.CHROMATOGRAPHY],
                [
                    "TANDEM SCANNING METHOD",
                    t.ValueType.STRING,
                    null,
                    t.LabelCategory.PARAMTER,
                    a.SpectrumType.CHROMATOGRAPHY,
                ],
                ["INTERFACE", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.CHROMATOGRAPHY],
                [
                    "CHROMATOGRAPHY TYPE",
                    t.ValueType.STRING,
                    null,
                    t.LabelCategory.PARAMTER,
                    a.SpectrumType.CHROMATOGRAPHY,
                ],
                [
                    "CHROMATOGRAPHY SOLVENTS",
                    t.ValueType.STRING,
                    null,
                    t.LabelCategory.PARAMTER,
                    a.SpectrumType.CHROMATOGRAPHY,
                ],
                ["ADDITIVES", t.ValueType.STRING, null, t.LabelCategory.PARAMTER, a.SpectrumType.CHROMATOGRAPHY],
                ["DIMENSIONALITY", t.ValueType.AFFN, null, t.LabelCategory.PARAMTER, a.SpectrumType.CHROMATOGRAPHY],
            ]),
            (Kekule.IO.Jcamp.DxDataBlockReader = Class.create(Kekule.IO.Jcamp.DataBlockReader, {
                CLASS_NAME: "Kekule.IO.Jcamp.DxDataBlockReader",
                initProperties: function () {
                    this.defineProp("currDataClass", {
                        dataType: DataType.STRING,
                        setter: !1,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    }),
                        this.defineProp("currVarInfos", {
                            dataType: DataType.HASH,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currNTuplesInfos", {
                            dataType: DataType.HASH,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currNTuplesVarInfos", {
                            dataType: DataType.HASH,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                            getter: function () {
                                var e = this.getCurrNTuplesInfos();
                                return e && e.varInfos;
                            },
                        }),
                        this.defineProp("currNTuplesVarRawInfos", {
                            dataType: DataType.HASH,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                            getter: function () {
                                var e = this.getCurrNTuplesInfos();
                                return e && e.varRawInfos;
                            },
                        }),
                        this.defineProp("dataSectionsWithPeakAssignments", {
                            dataType: DataType.ARRAY,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        });
                },
                initPropValues: function () {
                    this.tryApplySuper("initPropValues"), this._initCurrVarInfos();
                },
                _initCurrVarInfos: function () {
                    this.setPropStoreFieldValue("currVarInfos", {}),
                        this.setPropStoreFieldValue("currNTuplesVarInfos", {});
                },
                _initLdrHandlers: function () {
                    var e = this.tryApplySuper("_initLdrHandlers");
                    (e[t.Consts.LABEL_BLOCK_BEGIN] = this.doStoreSpectrumTitleLdr.bind(this)),
                        (e.DATATYPE = this.doStoreSpectrumDataTypeLdr.bind(this, "DATATYPE")),
                        (e.DATACLASS = this.doStoreSpectrumDataClassLdr.bind(this));
                    for (
                        var a = this.doStoreSpectrumDataLdr.bind(this),
                            r = this._getDataTableLdrNames(),
                            n = 0,
                            i = r.length;
                        n < i;
                        ++n
                    )
                        e[r[n]] = a;
                    var o = this._getDataTableVarDefLdrNames(),
                        s = this.doStoreDataVarInfoLdr.bind(this);
                    for (n = 0, i = o.length; n < i; ++n) e[o[n]] = s;
                    var l = this._getNTuplesDefinitionLdrNames(),
                        u = this.doStoreNTuplesAttributeLdr.bind(this);
                    for (n = 0, i = l.length; n < i; ++n) e[l[n]] = u;
                    e.DATATABLE = this.doStoreNTuplesDataLdr.bind(this);
                    for (
                        var c = this._getSpectrumParamLdrNames(),
                            d = Kekule.ObjUtils.getOwnedFieldNames(c),
                            p = ((n = 0), d.length);
                        n < p;
                        ++n
                    )
                        for (
                            var f = d[n], m = this.doStoreSpectrumParamLdr.bind(this, f), h = c[f], S = 0, A = h.length;
                            S < A;
                            ++S
                        )
                            e[h[S]] = m;
                    return e;
                },
                _getDataTableVarDefLdrNames: function () {
                    return [
                        "XUNITS",
                        "FIRSTX",
                        "LASTX",
                        "MAXX",
                        "MINX",
                        "XFACTOR",
                        "YUNITS",
                        "MAXY",
                        "MINY",
                        "FIRSTY",
                        "LASTY",
                        "YFACTOR",
                        "NPOINTS",
                        "DELTAX",
                        "XLABEL",
                        "YLABEL",
                        "RUNITS",
                        "AUNITS",
                        "FIRSTR",
                        "LASTR",
                        "DELTAR",
                        "MAXA",
                        "MINA",
                        "RFACTOR",
                        "AFACTOR",
                        "FIRSTA",
                        "ALIAS",
                        "ZPD",
                    ];
                },
                _getNTuplesDefinitionLdrNames: function () {
                    return [
                        "NTUPLES",
                        "VARNAME",
                        "SYMBOL",
                        "VARTYPE",
                        "VARFORM",
                        "VARDIM",
                        "UNITS",
                        "FIRST",
                        "LAST",
                        "MIN",
                        "MAX",
                        "FACTOR",
                        "PAGE",
                        "POINTS",
                        "ENDNTUPLES",
                    ];
                },
                _getDataTableLdrNames: function () {
                    return ["XYDATA", "XYPOINTS", "PEAKTABLE", "PEAKASSIGNMENTS", "ASSIGNMENTS", "RADATA"];
                },
                _isDataTableLabelName: function (e) {
                    return this._getDataTableLdrNames().indexOf(e) >= 0;
                },
                _getSpectrumParamLdrNames: function () {
                    return {
                        ir: ["RESOLUTION"],
                        uv_vis: ["RESOLUTION"],
                        nmr: [
                            ".OBSERVEFREQUENCY",
                            ".OBSERVENUCLEUS",
                            ".SOLVENTREFERENCE",
                            ".DELAY",
                            ".ACQUISITIONMODE",
                        ],
                        ms: [".SPECTROMETERTYPE", ".INLET", ".IONIZATIONMODE"],
                        ims: [
                            ".IMSPRESSURE",
                            ".CARRIERGAS",
                            ".DRIFTGAS",
                            ".ELECTRICFIELD",
                            ".IONPOLARITY",
                            ".IONIZATIONMODE",
                            ".IMSTEMPERATURE",
                            ".SHUTTEROPENINGTIME",
                        ],
                        chromatography: [
                            ".MASSANALYSER",
                            ".TANDEMSCANNINGMETHOD",
                            ".INTERFACE",
                            ".CHROMATOGRAPHYTYPE",
                            ".CHROMATOGRAPHYSOLVENTS",
                            ".ADDITIVES",
                            ".DIMENSIONALITY",
                        ],
                    };
                },
                getLdrNamePrefixForInfoField: function (e, a, r) {
                    var n = this.tryApplySuper("getLdrNamePrefixForInfoField", [e, a, r]);
                    if (a === t.LabelType.SPECIFIC) {
                        var i = r.getSpectrumType();
                        i && (n += i + ".");
                    }
                    return n;
                },
                getPendingLdrNames: function () {
                    return this.tryApplySuper("getPendingLdrNames").concat(["RESOLUTION"]);
                },
                doStoreSpectrumTitleLdr: function (e, a, r, n) {
                    r.setTitle(t.LdrValueParserCoder.parseValue(e));
                },
                doStoreDataVarInfoLdr: function (e, a, r, n) {
                    this.getCurrVarInfos()[e.labelName] = t.LdrValueParserCoder.parseValue(e);
                },
                doStoreNTuplesAttributeLdr: function (e, a, r, n) {
                    var i = this.getCurrNTuplesInfos(),
                        o = t.LdrValueParserCoder.parseValue(e);
                    "ENDNTUPLES" === e.labelName
                        ? (o !== i.name &&
                              Kekule.error(Kekule.$L("ErrorMsg.JCAMP_NTUPLES_BEGIN_END_NAME_NOT_MATCH", i.value, o)),
                          this.setPropStoreFieldValue("currNTuplesInfos", null))
                        : "NTUPLES" === e.labelName
                        ? this.setPropStoreFieldValue("currNTuplesInfos", { name: o, varRawInfos: {} })
                        : "PAGE" === e.labelName
                        ? this._doStoreNTuplesPageAttributeLdr(e)
                        : (i.varRawInfos[e.labelName] = o);
                },
                _doStoreNTuplesPageAttributeLdr: function (e) {
                    var t = this.getCurrNTuplesInfos(),
                        a = e.valueLines.join(""),
                        r = a.split("=");
                    if (2 !== r.length)
                        Kekule.error(Kekule.$L("ErrorMsg.JCAMP_NTUPLES_PAGE_DECLARATION_FORMAT_ERROR", a));
                    else {
                        var n = r[0].trim(),
                            i = r[1].trim();
                        t[e.labelName] = { varSymbol: n, sValue: i };
                    }
                },
                doStoreSpectrumDataTypeLdr: function (e, a, r, n, i) {
                    var o = t.LdrValueParserCoder.parseValue(a);
                    if (o && o.toUpperCase) {
                        var s = t.DxUtils.jcampSpectrumTypeToKekule(o);
                        n.setSpectrumType(s);
                    }
                },
                doStoreSpectrumDataClassLdr: function (e, a, r, n) {
                    var i = t.LdrValueParserCoder.parseValue(e);
                    this.setPropStoreFieldValue("currDataClass", i);
                },
                doStoreSpectrumDataLdr: function (e, a, r, n) {
                    if (!this._isSpectrumDataLdr(e, a, r))
                        return this.doStoreLdrToChemObjInfoProp(e.labelName, e, a, r);
                    if (this._isDataTableLabelName(e.labelName)) {
                        var i = t.LdrValueParserCoder.parseValue(e, { doValueCheck: !0 }),
                            o = i.formatDetail,
                            s = o.vars,
                            l = this._retrieveSpectrumDataVarInfos(s, a, r);
                        l[0].dependency = Kekule.VarDependency.INDEPENDENT;
                        for (var u = 1, c = l.length; u < c; ++u) l[u].dependency = Kekule.VarDependency.DEPENDENT;
                        var d = this._createSpectrumVariableDefinitions(l),
                            p = r.getData();
                        p.setVariables(d);
                        var f = e.labelName.indexOf("PEAK") < 0 && e.labelName.indexOf("ASSIGNMENT") < 0,
                            m = e.labelName.indexOf("ASSIGNMENT") >= 0;
                        p.setMode(f ? Kekule.Spectroscopy.DataMode.CONTINUOUS : Kekule.Spectroscopy.DataMode.PEAK);
                        this._createSpectrumDataSectionByFormat(o, i.values, l, p, m, this.getCurrOptions());
                    }
                },
                _retrieveSpectrumDataVarInfos: function (e, t, a) {
                    var r = [];
                    (r._symbols = []), (r._bySymbol = {});
                    for (
                        var n = this.getCurrVarInfos(),
                            i = function (e) {
                                return n[e];
                            },
                            o = 0,
                            s = e.length;
                        o < s;
                        ++o
                    ) {
                        var l = e[o],
                            u = {
                                symbol: l,
                                units: i(l + "UNITS"),
                                firstValue: i("FIRST" + l),
                                lastValue: i("LAST" + l),
                                maxValue: i("MAX" + l),
                                minValue: i("MIN" + l),
                                factor: i(l + "FACTOR"),
                            };
                        u.units || 2 !== o || "W" !== l || (u.units = i("XUNITS")),
                            r.push(u),
                            r._symbols.push(l),
                            (r._bySymbol[l] = r[r.length - 1]);
                    }
                    return r;
                },
                _createSpectrumVariableDefinitions: function (e) {
                    for (var a = [], r = this.getCurrOptions(), n = 0, i = e.length; n < i; ++n) {
                        var o = e[n],
                            s = o.varType;
                        if (s)
                            if ("DEPENDENT" === s) o.dependency = Kekule.VarDependency.DEPENDENT;
                            else if ("INDEPENDENT" === s) o.dependency = Kekule.VarDependency.INDEPENDENT;
                            else if ("PAGE" === s) continue;
                        var l = new Kekule.Spectroscopy.SpectrumVarDefinition({
                            name: (o.name || "").toLowerCase(),
                            symbol: o.symbol,
                            unit: t.DxUtils.dxUnitToMetricsUnitSymbol(o.units),
                            dependency: Kekule.ObjUtils.notUnset(o.dependency)
                                ? o.dependency
                                : Kekule.VarDependency.DEPENDENT,
                        });
                        Kekule.ObjUtils.notUnset(o.minValue) &&
                            Kekule.ObjUtils.notUnset(o.maxValue) &&
                            r.useDxMinMaxValueAsDisplayRange &&
                            o.minValue !== o.maxValue &&
                            l.setInfoValue("displayRange", { min: o.minValue, max: o.maxValue }),
                            a.push(l);
                    }
                    return a;
                },
                doStoreNTuplesDataLdr: function (e, a, r) {
                    var n = this.getCurrNTuplesInfos(),
                        i = this.getCurrNTuplesVarInfos();
                    if ((i || ((i = this._retrieveNTupleVariableInfos()), (n.varInfos = i)), !(o = n.spectrumData))) {
                        var o,
                            s = this._createSpectrumVariableDefinitions(i);
                        (o = r.getData()).setVariables(s), (n.spectrumData = o);
                    }
                    var l = t.LdrValueParserCoder.parseValue(e, { doValueCheck: !0 }),
                        u = l.formatDetail,
                        c = u.plotDescriptor || "",
                        d = (u.vars, c.indexOf("PEAK") < 0 && c.indexOf("ASSIGNMENT") < 0),
                        p = c.indexOf("ASSIGNMENT") >= 0,
                        f = d ? Kekule.Spectroscopy.DataMode.CONTINUOUS : Kekule.Spectroscopy.DataMode.PEAK,
                        m = this._createSpectrumDataSectionByFormat(u, l.values, i, o, p, this.getCurrOptions());
                    m.setMode(f);
                    var h = n.PAGE;
                    m.setName(h.varSymbol + ": " + h.sValue);
                },
                _retrieveNTupleVariableInfos: function () {
                    var a = [];
                    (a._bySymbol = {}), (a._symbols = []);
                    var r = this.getCurrNTuplesVarRawInfos(),
                        n = function (n, i, o) {
                            for (
                                var s = t.Utils.standardizeLdrLabelName(n), l = e.toArray(r[s]), u = 0, c = l.length;
                                u < c;
                                ++u
                            )
                                o[u] || (o[u] = {}), (o[u][i] = l[u]), "SYMBOL" === n && (a._symbols[u] = l[u]);
                            return o;
                        };
                    n("VAR_NAME", "name", a),
                        n("SYMBOL", "symbol", a),
                        n("VAR_TYPE", "varType", a),
                        n("VAR_FORM", "varForm", a),
                        n("VAR_DIM", "varDim", a),
                        n("UNITS", "units", a),
                        n("FIRST", "firstValue", a),
                        n("LAST", "lastValue", a),
                        n("MIN", "minValue", a),
                        n("MAX", "maxValue", a),
                        n("FACTOR", "factor", a);
                    for (var i = 0, o = a.length; i < o; ++i) a[i].symbol && (a._bySymbol[a[i].symbol] = a[i]);
                    return a;
                },
                doStoreSpectrumParamLdr: function (e, r, n, i, o) {
                    var s = e.toUpperCase();
                    if (!i.getSpectrumType() || i.getSpectrumType() === s) {
                        var l = r.labelName,
                            u = t.LdrValueParserCoder.parseValue(r),
                            c = function (e) {
                                i.setParameter(o, e);
                            };
                        if (s === a.SpectrumType.IR || s === a.SpectrumType.UV_VIS) {
                            if ("RESOLUTION" === l) {
                                if (u.indexOf(t.Consts.SIMPLE_VALUE_DELIMITER) < 0) {
                                    var d;
                                    u = parseFloat(u) || u;
                                    for (var p = 0, f = i.getVariableCount(); p < f; ++p) {
                                        var m = i.getVariable(p);
                                        if (m.isIndependent()) {
                                            var h = m.getUnit();
                                            if ((h && Kekule.Unit.getUnit(h)).category === Kekule.Unit.Length) {
                                                d = h;
                                                break;
                                            }
                                        }
                                    }
                                    d && (u = Kekule.Scalar.create(u, d));
                                }
                                c(u);
                            }
                        } else if (s === a.SpectrumType.NMR) {
                            if (".OBSERVENUCLEUS" === l)
                                c(
                                    u.indexOf("C") >= 0 && u.indexOf("13") >= 0
                                        ? a.SpectrumNMR.TargetNucleus.C13
                                        : u.indexOf("H") >= 0
                                        ? a.SpectrumNMR.TargetNucleus.H
                                        : u
                                );
                            else
                                ".OBSERVEFREQUENCY" === l
                                    ? (Kekule.NumUtils.isNormalNumber(u) &&
                                          (u = Kekule.Scalar.create(u, Kekule.Unit.Frequency.MEGAHERTZ.symbol)),
                                      c(u))
                                    : ".SOLVENTREFERENCE" === l
                                    ? (Kekule.NumUtils.isNormalNumber(u) &&
                                          (u = Kekule.Scalar.create(
                                              u,
                                              Kekule.Unit.Dimensionless.PARTS_PER_MILLION.symbol
                                          )),
                                      c(u))
                                    : ".DELAY" === l
                                    ? (Kekule.NumUtils.isNormalNumber(u) &&
                                          (u = Kekule.Scalar.create(u, Kekule.Unit.Time.MICROSECOND.symbol)),
                                      c(u))
                                    : c(u);
                        } else s === a.SpectrumType.MS ? c(u) : (a.SpectrumType.IMS, c(u));
                    }
                },
                _calcActualVarValue: function (e, t) {
                    return e * (t.factor || 1);
                },
                _createSpectrumDataSectionByFormat: function (e, a, r, n, i, o) {
                    var s;
                    return (
                        e.format === t.Consts.DATA_VARLIST_FORMAT_XYDATA
                            ? (s = this._createXyDataFormatSpectrumDataSection(e, a, r, n, o))
                            : e.format === t.Consts.DATA_VARLIST_FORMAT_XYPOINTS
                            ? (s = this._createXyPointsFormatSpectrumDataSection(e, a, r, n, o))
                            : e.format === t.Consts.DATA_VARLIST_FORMAT_VAR_GROUPS &&
                              (s = i
                                  ? this._createPeakAssignmentsVarGroupFormatSpectrumDataSection(e, a, r, n, o)
                                  : this._createVarGroupFormatSpectrumDataSection(e, a, r, n, o)),
                        s
                    );
                },
                _createXyDataFormatSpectrumDataSection: function (e, a, r, n, i) {
                    var o = e.varInc,
                        s = e.varLoop,
                        l = n.createSection(e.vars, Kekule.Spectroscopy.DataMode.CONTINUOUS);
                    l.beginUpdate();
                    try {
                        var u = { firstValue: this._calcActualVarValue(a[0][0], r._bySymbol[o]), lastValue: null };
                        if (a.length > 1) {
                            var c = (a[a.length - 1][0] - a[a.length - 2][0]) / (a[a.length - 2].length - 1);
                            u.lastValue = this._calcActualVarValue(
                                a[a.length - 1][0] + c * (a[a.length - 1].length - 2),
                                r._bySymbol[o]
                            );
                        } else u.lastValue = r[o].lastValue;
                        var d = Math.abs(u.lastValue - u.firstValue) * i.dxDataAllowedSavingErrorRatio;
                        (0 === t.Utils.compareFloat(u.firstValue, r._bySymbol[o].firstValue, d) &&
                            0 === t.Utils.compareFloat(u.lastValue, r._bySymbol[o].lastValue, d)) ||
                            Kekule.error(Kekule.$L("ErrorMsg.JCAMP_DATA_TABLE_VALUE_FIRST_LAST_NOT_MATCH")),
                            l.setContinuousVarRange(o, u.firstValue, u.lastValue);
                        for (var p = 0, f = a.length; p < f; ++p)
                            for (var m = a[p], h = 1, S = m.length; h < S; ++h)
                                l.appendData([void 0, this._calcActualVarValue(m[h], r._bySymbol[s])]);
                        l.setDataSorted(!0);
                    } finally {
                        l.endUpdate();
                    }
                    return l;
                },
                _createXyPointsFormatSpectrumDataSection: function (e, t, a, r, n) {
                    var i = r.createSection(e.vars);
                    i.beginUpdate();
                    try {
                        for (var o = 0, s = t.length; o < s; ++o) {
                            for (var l = t[o], u = [], c = 0, d = l.length; c < d; ++c) {
                                var p = this._calcActualVarValue(l[c], a[c]);
                                u.push(p);
                            }
                            i.appendData(u);
                        }
                        i.setDataSorted(!0);
                    } finally {
                        i.endUpdate();
                    }
                    return i;
                },
                _createVarGroupFormatSpectrumDataSection: function (e, t, a, r, n) {
                    var i = r.createSection(e.vars);
                    i.beginUpdate();
                    try {
                        for (var o = 0, s = t.length; o < s; ++o) {
                            for (var l = t[o], u = [], c = 0, d = l.length; c < d; ++c) {
                                var p = this._calcActualVarValue(l[c], a[c]);
                                u.push(p);
                            }
                            i.appendData(u);
                        }
                        i.setDataSorted(!0);
                    } finally {
                        i.endUpdate();
                    }
                    return i;
                },
                _createPeakAssignmentsVarGroupFormatSpectrumDataSection: function (e, t, a, r, n) {
                    var i = e.vars.slice(0, 2),
                        o = [null, null];
                    if (e.vars.length > 2) {
                        for (var s = 2, l = e.vars.length; s < l; ++s) {
                            var u = e.vars[s].toUpperCase()[0];
                            ["A", "W", "M"].indexOf(u) >= 0 ? o.push(u) : (o.push(null), i.push(e.vars[s]));
                        }
                        var c = !1,
                            d = r.createSection(i);
                        d.beginUpdate();
                        try {
                            var p = [];
                            for (s = 0, l = t.length; s < l; ++s)
                                if (o.length) {
                                    for (var f = t[s], m = [], h = {}, S = 0, A = o.length; S < A; ++S) {
                                        var T = o[S];
                                        if ("M" === T);
                                        else if ("W" === T) m.push(f[S]);
                                        else if ("A" === T)
                                            Kekule.ObjUtils.notUnset(f[S]) &&
                                                !n.disablePeakAssignmentReading &&
                                                (h.peakAssignmentRaw = [f[S]]);
                                        else {
                                            var I = this._calcActualVarValue(f[S], a[S]);
                                            m.push(I);
                                        }
                                    }
                                    Kekule.ObjUtils.getOwnedFieldNames(h).length &&
                                        ((m._extra = new Kekule.Spectroscopy.SpectrumPeakDetails()),
                                        (m._extra._peakAssignmentRaw = h.peakAssignmentRaw),
                                        (c = !0)),
                                        p.push(m);
                                } else p.push(t[s]);
                            c && (p = this._mergePeakAssignmentDataRows(p, o));
                            for (s = 0, l = p.length; s < l; ++s) d.appendData(p[s]);
                            d.setDataSorted(!0), c && this.getDataSectionsWithPeakAssignments().push(d);
                        } finally {
                            d.endUpdate();
                        }
                        return d;
                    }
                    return this._createVarGroupFormatSpectrumDataSection(e, t, a, r, n);
                },
                _mergePeakAssignmentDataRows: function (e, t) {
                    var a = Kekule.NumUtils,
                        r = function (e, r) {
                            for (var n = !0, i = 0, o = t.length; i < o; ++i)
                                if ("A" !== t[i]) {
                                    var s = e[i],
                                        l = r[i];
                                    if (
                                        s != l &&
                                        a.isNormalNumber(s) &&
                                        a.isNormalNumber(l) &&
                                        !Kekule.NumUtils.isFloatEqual(s, l)
                                    ) {
                                        n = !1;
                                        break;
                                    }
                                }
                            return n;
                        },
                        n = function (e, t) {
                            for (var a = 0, n = t.length; a < n; ++a) if (r(e, t[a])) return t[a];
                            return null;
                        };
                    if (t.indexOf("A") >= 0) {
                        for (var i = [], o = 0, s = e.length; o < s; ++o) {
                            var l = e[o],
                                u = n(l, i);
                            u && l._extra._peakAssignmentRaw
                                ? u._extra._peakAssignmentRaw
                                    ? (u._extra._peakAssignmentRaw = u._extra._peakAssignmentRaw.concat(
                                          l._extra._peakAssignmentRaw
                                      ))
                                    : (u._extra._peakAssignmentRaw = l._extra._peakAssignmentRaw)
                                : i.push(l);
                        }
                        return i;
                    }
                    return e;
                },
                _isSpectrumDataLdr: function (e, t, a) {
                    var r = !a.getData() || a.getData().getSectionCount() <= 0;
                    if (r) {
                        var n = this.getCurrDataClass() || null;
                        n && (r = e.labelName.replace(/\s/g, "").indexOf(n.replace(/\s/g, "")) >= 0);
                    }
                    return r;
                },
                doCreateChemObjForBlock: function (e) {
                    var a,
                        r = this._getBlockMeta(e);
                    return (
                        r.blockType === t.BlockType.DATA && r.format === t.Format.DX
                            ? ((a = new Kekule.Spectroscopy.Spectrum()),
                              this.setPropStoreFieldValue("dataSectionsWithPeakAssignments", []))
                            : (a = this.tryApplySuper("doCreateChemObjForBlock", [e])),
                        a
                    );
                },
                doBuildCrossRef: function (e, a, r, n) {
                    if (
                        (this.tryApplySuper("doBuildCrossRef", [e, a, r, n]),
                        r === t.CrossRefType.STRUCTURE &&
                            a instanceof Kekule.StructureFragment &&
                            e instanceof Kekule.Spectroscopy.Spectrum)
                    ) {
                        t.Utils.addMoleculeSpectrumCrossRef(e, a);
                        var i = this.getDataSectionsWithPeakAssignments();
                        if (i.length) for (var o = 0, s = i.length; o < s; ++o) this._buildPeakAssignmentRefs(i[o], a);
                        this.getCurrOptions().autoHiddenSpectrumRefMolecule && a.setVisible && a.setVisible(!1);
                    }
                },
                _buildPeakAssignmentRefs: function (t, a) {
                    for (var r = 0, n = t.getDataCount(); r < n; ++r) {
                        var i = t.getExtraInfoAt(r);
                        if (i && i._peakAssignmentRaw) {
                            for (var o = [], s = 0, l = i._peakAssignmentRaw.length; s < l; ++s) {
                                var u = i._peakAssignmentRaw[s],
                                    c = parseInt(u);
                                if (Kekule.NumUtils.isNormalNumber(c) && c > 0) {
                                    var d = a.getNodeAt(c - 1);
                                    d && e.pushUnique(o, d);
                                }
                            }
                            i.setAssignments(o), delete i._peakAssignmentRaw;
                        }
                    }
                },
            })),
            (Kekule.IO.Jcamp.DxDataBlockWriter = Class.create(Kekule.IO.Jcamp.BlockWriter, {
                CLASS_NAME: "Kekule.IO.Jcamp.DxDataBlockWriter",
                initProperties: function () {
                    this.defineProp("varSymbolMap", {
                        dataType: DataType.HASH,
                        setter: !1,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    });
                },
                _initLdrCreators: function () {
                    this.tryApplySuper("_initLdrCreators");
                    var e = this.getLdrCreatorMap();
                    (e["metaData.date"] = this._dateLdrCreator.bind(this)),
                        (e["parameters.NMR.ObserveNucleus"] = this._nmrObserveNucleusLdrCreator.bind(this)),
                        (e["parameters.NMR.ObserveFrequency"] = this._scalarWithSpecifiedUnitLdrCreator.bind(
                            this,
                            Kekule.Unit.Frequency.MEGAHERTZ
                        )),
                        (e["parameters.NMR.SolventReference"] = this._scalarWithSpecifiedUnitLdrCreator.bind(
                            this,
                            Kekule.Unit.Dimensionless.PARTS_PER_MILLION
                        )),
                        (e["parameters.NMR.Delay"] = this._scalarWithSpecifiedUnitLdrCreator.bind(
                            this,
                            Kekule.Unit.Time.MICROSECOND
                        ));
                },
                doWriteBlock: function (e, t) {
                    return this.tryApplySuper("doWriteBlock", [e, t]);
                },
                getTitleForBlock: function (e) {
                    return e.getTitle() || e.getName() || e.getId();
                },
                doSaveJcampVersionToBlock: function (e, a, r) {
                    this.saveToLdrInBlock(
                        a,
                        e,
                        "",
                        r.outputDxVersion || Kekule.globalOptions.IO.jcamp.outputDxVersion,
                        t.Consts.LABEL_DX_VERSION
                    );
                },
                doGetDataTypeForBlock: function (e) {
                    return this.doGetJcampSpectrumDataType(e);
                },
                doSaveChemObjToBlock: function (e, t, a) {
                    this.tryApplySuper("doSaveChemObjToBlock", [e, t, a]),
                        this.saveToLdrInBlock(t, e, "", "", "DATA CLASS"),
                        this.doSaveChemObjCrossRefToBlock(e, t, a),
                        this.doSaveSpectrumDataToBlock(e, t, a);
                },
                doSaveChemObjCrossRefToBlock: function (e, a, r) {
                    var n = e.getRefMolecule();
                    if (n) {
                        var i = this.getBlockInfoFromObj(n);
                        if (i && i.id) {
                            var o =
                                "STRUCTURE" +
                                t.Consts.CROSS_REF_TYPE_TERMINATOR +
                                " BLOCK_ID" +
                                t.Consts.DATA_LABEL_TERMINATOR +
                                i.id;
                            this.saveToLdrInBlock(a, e, "", o, t.Consts.LABEL_CROSS_REF);
                        }
                    }
                },
                doSaveChemObjInfoToBlock: function (e, t, a) {
                    this.doSaveSpectrumKeyMetaToBlock(e, t, a), this.doSaveSpectrumInfoToBlock(e, t, a);
                },
                doSaveSpectrumKeyMetaToBlock: function (e, t, a) {},
                doGetJcampSpectrumDataType: function (e) {
                    var t = e.getSpectrumType(),
                        a = this._getSpectrumPeakDetails(e);
                    return t === n.IR
                        ? a.isPeak
                            ? "INFRARED PEAK TABLE"
                            : "INFRARED SPECTRUM"
                        : t === n.RAMAN
                        ? "RAMAN SPECTRUM"
                        : t === n.NMR
                        ? a.isPeakAssignment
                            ? "NMR PEAK ASSIGNMENTS"
                            : a.isPeak
                            ? "NMR PEAK TABLE"
                            : "NMR SPECTRUM"
                        : t === n.MS
                        ? a.isPeak
                            ? "MASS SPECTRUM"
                            : "CONTINUOUS MASS SPECTRUM"
                        : t === n.UV_VIS
                        ? "UV/VIS SPECTRUM"
                        : t === n.IMS
                        ? a.isPeakAssignment
                            ? "IMS PEAK ASSIGNMENTS"
                            : a.isPeak
                            ? "IMR PEAK TABLE"
                            : "ION MOBILITY SPECTRUM"
                        : null;
                },
                _getSpectrumPeakDetails: function (e) {
                    for (var t = { isPeak: !0, isPeakAssignment: !0 }, a = 0, r = e.getDataSectionCount(); a < r; ++a) {
                        var n = e.getDataSectionAt(a);
                        if (
                            ((t.isPeak = t.isPeak && n.isPeakSection()),
                            (t.isPeakAssignment = t.isPeakAssignment && n.hasPeakAssignments()),
                            !t.isPeak && !t.isPeakAssignment)
                        )
                            break;
                    }
                    return t;
                },
                doSaveSpectrumInfoToBlock: function (t, a, r) {
                    var n = t.getSpectrumType(),
                        i = t.getSpectrumInfoCategories();
                    e.pushUnique(i, "");
                    for (var o = 0, s = i.length; o < s; ++o)
                        for (var l = i[o], u = t.getSpectrumInfoKeysOfCategory(l), c = 0, d = u.length; c < d; ++c) {
                            var p = u[c],
                                f = l + "." + p,
                                m = t.getSpectrumInfoValue(p, l);
                            Kekule.ObjUtils.notUnset(m) && this.doSaveSpectrumInfoItemToBlock(t, p, f, m, a, n, r);
                        }
                },
                doSaveSpectrumInfoItemToBlock: function (e, a, r, n, i, o, s) {
                    var l = [
                            t.Consts.LABEL_BLOCK_BEGIN,
                            t.Consts.LABEL_BLOCK_END,
                            t.Consts.LABEL_DX_VERSION,
                            t.Consts.LABEL_CS_VERSION,
                        ],
                        u = t.Utils.kekuleLabelNameToJcamp(a, o);
                    l.indexOf(u) < 0 && this.saveToLdrInBlock(i, e, r, n, u, !1);
                },
                doInsertDataClassToBlock: function (e, t, a, r) {
                    if (a) {
                        var n = this.createLdrRaw("DATA CLASS", [a]);
                        this.setLdrInBlock(t, n, !0);
                    }
                },
                doSaveSpectrumDataToBlock: function (e, a, r) {
                    if (this.doGetSpectrumDataStorageStyle(e, r) === t.SpectrumDataStorageStyle.CLASSIC)
                        this.doSaveSpectrumSectionDataToClassic(e, e.getActiveDataSection(), a, r);
                    else {
                        for (var n = [], i = 0, o = e.getDataSectionCount(); i < o; ++i) {
                            var s = e.getDataSectionAt(i);
                            s.getDataCount() && n.push(s);
                        }
                        this.doSaveSpectrumSectionsDataToNTuple(e, n, a, r);
                    }
                },
                doGetSpectrumDataStorageStyle: function (e, a) {
                    var r = Kekule.oneOf(a.dxDataStorageStyle, Kekule.globalOptions.IO.jcamp.dxDataStorageStyle);
                    r === t.SpectrumDataStorageStyle.SMART &&
                        (r =
                            e.getDataSectionCount() > 1
                                ? t.SpectrumDataStorageStyle.NTUPLE
                                : t.SpectrumDataStorageStyle.CLASSIC);
                    return r;
                },
                doGetSpectrumSectionDataStorageFormat: function (e, a, r) {
                    if (a.isPeakSection()) {
                        var n = a.getActualLocalVarInfos().length;
                        return a.hasPeakAssignments() && !r.disablePeakAssignmentWriting
                            ? t.Consts.DATA_VARLIST_FORMAT_VAR_GROUPS
                            : n <= 2
                            ? t.Consts.DATA_VARLIST_FORMAT_XYPOINTS
                            : t.Consts.DATA_VARLIST_FORMAT_XYWPOINTS;
                    }
                    var i = e.getVariablesOfDependency(Kekule.VarDependency.INDEPENDENT)[0];
                    return i && a.getContinuousVarRange(i)
                        ? t.Consts.DATA_VARLIST_FORMAT_XYDATA
                        : t.Consts.DATA_VARLIST_FORMAT_XYPOINTS;
                },
                doGetSpectrumVariableInfoOfSections: function (e, a, r) {
                    for (var n = [], i = !1, o = [], s = new Kekule.MapEx(), l = 0, u = a.length; l < u; ++l) {
                        var c = a[l];
                        i = i || c.hasPeakAssignments();
                        var d = {},
                            p = {};
                        c.getDataCount() && ((d = c.getValueAt(0)), (p = c.getValueAt(c.getDataCount() - 1)));
                        for (var f = 0, m = c.getActualLocalVarInfos().length; f < m; ++f) {
                            var h = c.getLocalVarDef(f);
                            if (o.indexOf(h) < 0)
                                o.push(h),
                                    s.set(h, {
                                        dataCount: c.getDataCount(),
                                        firstValue: d[h.getSymbol()],
                                        lastValue: p[h.getSymbol()],
                                    });
                            else {
                                (g = s.get(h)).dataCount = Math.max(g.dataCount, c.getDataCount());
                                var S = g.firstValue,
                                    A = g.lastValue;
                                Kekule.ObjUtils.notUnset(d[h.getSymbol()]) &&
                                    (Kekule.ObjUtils.isUnset(S) || d[h.getSymbol()] < S) &&
                                    (g.firstValue = d[h.getSymbol()]),
                                    Kekule.ObjUtils.notUnset(p[h.getSymbol()]) &&
                                        (Kekule.ObjUtils.isUnset(A) || p[h.getSymbol()] > A) &&
                                        (g.lastValue = p[h.getSymbol()]);
                            }
                        }
                    }
                    var T = e.getData().calcDataRangeOfSections(a, o, { basedOnInternalUnit: !0, ignorePeakRoot: !0 }),
                        I = [];
                    for (l = 0, u = o.length; l < u; ++l) {
                        h = o[l];
                        var g,
                            E = s.get(h);
                        ((g = {
                            symbol: h.getSymbol(),
                            name: h.getName() || h.getDisplayLabel(),
                            isIndependent: h.isIndependent(),
                            dependency: h.getDependency(),
                            unit: h.getUnit() || Kekule.Unit.Arbitrary.ARBITRARY.symbol,
                            dim: E.dataCount,
                            _varDef: h,
                        }).first = E.firstValue || 0),
                            (g.last = E.lastValue || 0);
                        var R = T[g.symbol];
                        if (((g.range = R), R)) {
                            var D = t.DxUtils.calcNumFactorForRange(
                                R.min,
                                R.max,
                                r.dxDataAllowedSavingErrorRatio,
                                r.dxDataPreferredOrdinateScaledRange.min,
                                r.dxDataPreferredOrdinateScaledRange.max
                            );
                            (g.factor = D), (g.min = R.min), (g.max = R.max);
                        }
                        n.push(g), I.push(g.symbol);
                    }
                    return (
                        i &&
                            n.push({
                                symbol: "A",
                                Name: "Peak assignment",
                                isIndependent: !1,
                                dependency: Kekule.VarDependency.DEPENDENT,
                                unit: Kekule.Unit.Arbitrary.ARBITRARY.symbol,
                                dim: null,
                                varForm: "STRING",
                                _varDef: new Kekule.Spectroscopy.SpectrumVarDefinition(),
                                _isPeakAssignment: !0,
                            }),
                        s.finalize(),
                        n
                    );
                },
                _getVarDetailOfDefinition: function (e, t) {
                    for (var a = 0, r = t.length; a < r; ++a) if (t[a]._varDef === e) return t[a];
                    return null;
                },
                _generateNTupleVarSymbolsForJcamp: function (e) {
                    for (
                        var t = [],
                            a = function (e, t) {
                                var a = e;
                                if (t.length >= 26) return null;
                                for (var r = "A".charCodeAt(0); t.indexOf(a) >= 0; ) {
                                    var n = ((a.charCodeAt(0) - r) % 26) + 1 + r;
                                    a = String.fromCharCode(n);
                                }
                                return a;
                            },
                            r = 0,
                            n = e.length;
                        r < n;
                        ++r
                    ) {
                        var i = (e[r].symbol || e[r].name).charAt(0).toUpperCase();
                        if (!(i = a(i, t))) break;
                        t.push(i);
                    }
                    return t;
                },
                doSaveSpectrumSectionDataToClassic: function (e, a, r, n) {
                    for (
                        var i = this.doGetSpectrumVariableInfoOfSections(e, [a], n),
                            o = [],
                            s = [],
                            l = 0,
                            u = i.length;
                        l < u;
                        ++l
                    ) {
                        var c = i[l];
                        c.isIndependent ? o.push(c) : c.isIndependent || s.push(c);
                    }
                    var d = o[0],
                        p = s[0];
                    if (
                        (this.doSaveSepctrumSectionVarInfoToClassic(e, a, d, p, r, n),
                        this.saveToLdrInBlock(r, e, "", a.getDataCount() || 0, "NPOINTS"),
                        a.getDataCount())
                    ) {
                        var f,
                            m,
                            h = this.doGetSpectrumSectionDataStorageFormat(e, a, n);
                        if (h === t.Consts.DATA_VARLIST_FORMAT_XYDATA) {
                            var S = a.getContinuousVarRange(d.symbol);
                            S &&
                                (this.saveToLdrInBlock(r, e, "", S.fromValue, "FIRSTX"),
                                this.saveToLdrInBlock(r, e, "", S.toValue, "LASTX")),
                                (A = this._createXyDataFormatDataLines(a, d, p, n)),
                                (m = t.Utils.generateDataTableFormatDescriptor(h, ["X", "Y"])),
                                (f = "XYDATA");
                        } else if (
                            h === t.Consts.DATA_VARLIST_FORMAT_XYPOINTS ||
                            h === t.Consts.DATA_VARLIST_FORMAT_XYWPOINTS
                        ) {
                            var A = this._createXyPointsFormatDataLines(a, d, p, n);
                            (m = t.Utils.generateDataTableFormatDescriptor(h, ["X", "Y"])),
                                (f = a.isPeakSection() ? "PEAK TABLE" : "XYPOINTS");
                        } else if (h === t.Consts.DATA_VARLIST_FORMAT_VAR_GROUPS) {
                            var T = a.hasPeakAssignments(),
                                I =
                                    i.length <= 2
                                        ? ["X", "Y"]
                                        : i.length <= 3
                                        ? T
                                            ? ["X", "Y", "A"]
                                            : ["X", "Y", "W"]
                                        : ["X", "Y", "W", "A"];
                            A = this._createVarGroupFormatDataLines(a, o, s, T, n);
                            (m = t.Utils.generateDataTableFormatDescriptor(h, I)),
                                (f = T ? "PEAK ASSIGNMENTS" : "PEAK TABLE");
                        }
                        if ((A && m && A.unshift(m), f && A)) {
                            var g = { labelName: f, valueLines: A };
                            this.setLdrInBlock(r, g, !0), this.doInsertDataClassToBlock(e, r, f, n);
                        }
                    }
                },
                doSaveSepctrumSectionVarInfoToClassic: function (e, a, r, n, i, o) {
                    for (
                        var s = [r, n],
                            l = ["X", "Y"],
                            u = this,
                            c = function (e, t) {
                                var a = u.createLdr("", t, e);
                                u.setLdrInBlock(i, a, !0);
                            },
                            d = 0,
                            p = s.length;
                        d < p;
                        ++d
                    ) {
                        var f = s[d],
                            m = l[d];
                        if (f.unit) c(m + "UNITS", t.DxUtils.mertricsUnitSymbolToDxUnit(f.unit));
                        f.name && c(m + "LABEL", f.name),
                            f.range && (c("MIN" + m, f.range.min), c("MAX" + m, f.range.max)),
                            f.factor && c(m + "FACTOR", f.factor);
                    }
                },
                doSaveSpectrumSectionsDataToNTuple: function (e, t, a, r) {
                    var n = this.doGetSpectrumVariableInfoOfSections(e, t, r);
                    n.push({
                        _varDef: null,
                        symbol: "n",
                        name: "Page number",
                        dependency: "PAGE",
                        isIndependent: !0,
                        isPageNumber: !0,
                        dim: t.length,
                        factor: 1,
                        unit: Kekule.Unit.Arbitrary.ARBITRARY.symbol,
                        min: 1,
                        max: t.length,
                        first: 1,
                        last: t.length,
                    });
                    for (
                        var i,
                            o = this._generateNTupleVarSymbolsForJcamp(n),
                            s = {},
                            l = new Kekule.MapEx(),
                            u = 0,
                            c = o.length;
                        u < c;
                        ++u
                    ) {
                        var d = o[u];
                        (s[d] = n[u]), n[u]._varDef && l.set(n[u]._varDef, d), n[u].isPageNumber && (i = d);
                    }
                    var p = this.doGetJcampSpectrumDataType(e);
                    this.saveToLdrInBlock(a, e, "", p, "NTUPLES"),
                        this.doSaveSpectrumSectionVarInfoToNTuple(e, t, n, o, s, a, r);
                    for (u = 0, c = t.length; u < c; ++u)
                        this.doSaveSpectrumSectionDataToNTuplePage(e, t[u], n, l, i, u, a, r);
                    this.saveToLdrInBlock(a, e, "", p, "END NTUPLES"),
                        this.doInsertDataClassToBlock(e, a, "NTUPLES", r),
                        l.finalize();
                },
                doSaveSpectrumSectionDataToNTuplePage: function (e, a, r, n, i, o, s, l) {
                    var u = i + "=" + (o + 1);
                    this.saveToLdrInBlock(s, e, "", u, "PAGE"),
                        this.saveToLdrInBlock(s, e, "", a.getDataCount(), "NPOINTS");
                    for (var c = [], d = [], p = [], f = [], m = 0, h = a.getActualLocalVarInfos().length; m < h; ++m) {
                        var S = a.getLocalVarDef(m),
                            A = n.get(S);
                        if (S) {
                            var T = this._getVarDetailOfDefinition(S, r);
                            S.isIndependent() ? (c.push(T), p.push(A)) : (d.push(T), f.push(A));
                        }
                    }
                    var I = !1;
                    for (m = r.length - 1; m >= 0; --m) {
                        if ((T = r[m])._isPeakAssignment) {
                            (I = !0), d.push(T);
                            A = n.get(T._varDef);
                            f.push(A);
                            break;
                        }
                    }
                    var g,
                        E,
                        R,
                        D = this.doGetSpectrumSectionDataStorageFormat(e, a, l);
                    if (D === t.Consts.DATA_VARLIST_FORMAT_XYDATA) {
                        E = "XYDATA";
                        var C = c[0],
                            _ = d[0];
                        (g = this._createXyDataFormatDataLines(a, C, _, l)),
                            (R = t.Utils.generateDataTableFormatDescriptor(D, [p[0], f[0]]));
                    } else if (
                        D === t.Consts.DATA_VARLIST_FORMAT_XYPOINTS ||
                        D === t.Consts.DATA_VARLIST_FORMAT_XYWPOINTS
                    ) {
                        E = a.isPeakSection() ? "PEAK TABLE" : "XYPOINTS";
                        (C = c[0]), (_ = d[0]);
                        (g = this._createXyPointsFormatDataLines(a, C, _, l)),
                            (R = t.Utils.generateDataTableFormatDescriptor(D, [p[0], f[0]]));
                    } else if (D === t.Consts.DATA_VARLIST_FORMAT_VAR_GROUPS) {
                        E = I ? "PEAK ASSIGNMENTS" : "PEAK TABLE";
                        var L = [].concat(p).concat(f);
                        (R = t.Utils.generateDataTableFormatDescriptor(D, L)),
                            (g = this._createVarGroupFormatDataLines(a, c, d, I, l));
                    }
                    if (g) {
                        g.unshift(R + t.Consts.GROUPED_VALUE_ITEM_DELIMITER + " " + E);
                        var O = this.createLdrRaw("DATA TABLE", g);
                        this.setLdrInBlock(s, O);
                    }
                },
                doSaveSpectrumSectionVarInfoToNTuple: function (e, a, r, n, i, o, s) {
                    for (
                        var l = {},
                            u = function (e, t) {
                                var a = l[e];
                                a || ((a = []), (l[e] = a)), a.push(t);
                            },
                            c = function (e) {
                                return Kekule.ObjUtils.isUnset(e) ? "" : t.LdrValueParserCoder.affnCoder(e);
                            },
                            d = 0,
                            p = n.length;
                        d < p;
                        ++d
                    ) {
                        var f = n[d],
                            m = r[d],
                            h = m.isPageNumber ? "PAGE" : m.isIndependent ? "INDEPENDENT" : "DEPENDENT";
                        u("SYMBOL", f),
                            u("VARNAME", m.name || ""),
                            u("VARTYPE", h),
                            u("VARFORM", m.varForm || "ASDF"),
                            u("VARDIM", c(m.dim || 0)),
                            u("UNITS", m.unit ? t.DxUtils.mertricsUnitSymbolToDxUnit(m.unit) : ""),
                            u("FIRST", c(m.first)),
                            u("LAST", c(m.last)),
                            u("MIN", c(m.min)),
                            u("MAX", c(m.max)),
                            u("FACTOR", c(m.factor));
                    }
                    var S = Kekule.ObjUtils.getOwnedFieldNames(l, !1);
                    for (d = 0, p = S.length; d < p; ++d) {
                        var A = S[d],
                            T = l[A].join(t.Consts.NTUPLE_DEFINITION_ITEM_DELIMITER),
                            I = this.createLdrRaw(A, T);
                        this.setLdrInBlock(o, I, !1);
                    }
                },
                _createVarGroupFormatDataLines: function (a, r, n, i, o) {
                    var s = [].concat(r).concat(n),
                        l = [],
                        u = a.getParentSpectrum().getRefMolecule();
                    return (
                        a.forEach(function (t, r) {
                            for (var n = [], o = [], c = !1, d = 0, p = s.length; d < p; ++d) {
                                var f,
                                    m = s[d];
                                if (m._isPeakAssignment) {
                                    if (i) {
                                        f = "";
                                        var h = -1,
                                            S = a.getExtraInfoOf(t);
                                        if (S && S.getAssignments && u) {
                                            for (var A = S.getAssignments(), T = [], I = 0, g = A.length; I < g; ++I) {
                                                var E = A[I];
                                                E && u && (h = u.indexOfNode(E)), h >= 0 && T.push((h + 1).toString());
                                            }
                                            T.length <= 0 ? (f = 0) : 1 === T.length ? (f = T[0]) : ((f = T), (c = d));
                                        }
                                    }
                                } else {
                                    var R = t[m.symbol];
                                    f = "number" == typeof R ? Math.round(R / m.factor || 1) : R;
                                }
                                o.push(f);
                            }
                            if (!1 !== c) {
                                var D = o[c];
                                for (n = [], d = 0, p = D.length; d < p; ++d) {
                                    var C = e.clone(o);
                                    (C[c] = D[d]), n.push(C);
                                }
                            } else n = [o];
                            l = l.concat(n);
                        }),
                        t.Utils.encodeAffnGroupTableLines(l, { explicitlyEnclosed: !0 })
                    );
                },
                _createXyPointsFormatDataLines: function (e, a, r, n) {
                    var i = a.factor,
                        o = r.factor,
                        s = [];
                    return (
                        e.forEach(function (e, t) {
                            var n = Math.round(e[a.symbol] / i),
                                l = Math.round(e[r.symbol] / o);
                            s.push([n, l]);
                        }),
                        t.Utils.encodeAffnGroupTableLines(s)
                    );
                },
                _createXyDataFormatDataLines: function (e, a, r, n) {
                    var i,
                        o = function (e, t) {
                            var a = Math.round(e).toFixed(0).length,
                                r = Math.round(t).toFixed(0).length;
                            return Math.max(a, r);
                        },
                        s = e.getContinuousVarRange(a.symbol),
                        l = a.factor,
                        u = s.fromValue,
                        c = s.toValue,
                        d = r.factor,
                        p = e.calcDataRange([r.symbol], { basedOnInternalUnit: !0 })[r.symbol],
                        f = o(u, c) + 1,
                        m = o(p.min / d, p.max / d) + 1,
                        h = Math.floor((n.maxCharsPerLine - f) / m),
                        S = n.dxDataAsdfTableOutputForm,
                        A = S === t.AsdfForm.DIF || S === t.AsdfForm.DIF_DUP,
                        T = e.getDataCount(),
                        I = 0,
                        g = [],
                        E = [];
                    return (
                        e.forEach(
                            function (e, t) {
                                var n,
                                    o = e[r.symbol],
                                    s = Kekule.NumUtils.isNormalNumber(o),
                                    u = t >= T;
                                (n = s ? Math.round(o / d) : NaN),
                                    (!i || u || (s && I > h)) &&
                                        ((E = []),
                                        g.push(E),
                                        (I = 0),
                                        A && i && i.push(n),
                                        E.push(Math.round(e[a.symbol] / l)),
                                        (i = E)),
                                    E.push(n),
                                    ++I;
                            },
                            this,
                            { basedOnInternalUnit: !0 }
                        ),
                        t.Utils.encodeAsdfTableLines(g, S, { abscissaFirst: !0 })
                    );
                },
                _getSpectrumDataLabelAndVarFormatOfSection: function (e, t, a) {
                    var r;
                    t.isPeak()
                        ? (r = t.hasPeakAssignments() ? "PEAKASSIGNMENTS" : "PEAKTABLE")
                        : (r = t.getContinuousVarSymbols() || [] ? "XYDATA" : "XYPOINTS");
                    return r;
                },
                _dateLdrCreator: function (e, t, a, r) {
                    return this.createLdr(e, t, "LONGDATE");
                },
                _scalarWithSpecifiedUnitLdrCreator: function (e, t, a, r, n) {
                    var i;
                    if (a instanceof Kekule.Scalar && (i = a.getValue()) && Kekule.NumUtils.isNormalNumber(i)) {
                        var o = a.getUnit();
                        if (o && o !== e.symbol) {
                            var s = Kekule.Unit.getUnit(o);
                            if (s && s.category === e.category) i = s.convertValueTo(i, e);
                            else {
                                var l = Kekule.$L("ErrorMsg.JCAMP_LDR_TARGET_UNIT_NOT_MATCH_WITH_DETAIL").format(
                                    t,
                                    o,
                                    e.symbol,
                                    n
                                );
                                Kekule.warn(l);
                            }
                        }
                    }
                    return Kekule.NumUtils.isNormalNumber(i) ? this.createLdr(t, i, n) : null;
                },
                _nmrObserveNucleusLdrCreator: function (e, t, a, r) {
                    var n = Kekule.Spectroscopy.SpectrumNMR.TargetNucleus,
                        i = t === n.C13 ? "^13C" : t === n.H ? "^1H" : t;
                    return this.createLdr(e, i, r);
                },
            })),
            t.BlockReaderManager.register(t.BlockType.DATA, t.Format.DX, Kekule.IO.Jcamp.DxDataBlockReader),
            t.BlockWriterManager.register(Kekule.Spectroscopy.Spectrum, Kekule.IO.Jcamp.DxDataBlockWriter);
    })(),
    (function () {
        "use strict";
        var e = Kekule.ObjUtils,
            t = (Kekule.ArrayUtils, Kekule.IO.Jcamp);
        Kekule.globalOptions.add("IO.jcamp", {
            determinateBondStereoByZIndex: !0,
            enableCloserBondBetweenPositiveZIndexAtoms: !0,
            outputCsVersion: "3.7",
            csCoordAllowedSavingErrorRatio: 1e-4,
            csCoordPreferredScaledRange: { min: -16384, max: 16384 },
            autoScaleCsRasterCoords: !0,
            csRasterAutoScaleRefLength: Kekule.globalOptions.structure.defaultBondLength2D || 0.8,
        }),
            Object.extend(t.Consts, {
                MOL_STRUCTURE_VALUE_GROUP_DELIMITER: "\t",
                MOL_STRUCTURE_VALUE_GROUP_DELIMITER_PATTERN: /\s+/g,
                MOL_ATOM_SYMBOL_ANY: "A",
                MOL_ATOM_MASS_NUMBER_PREFIX: "^",
                LABEL_MOL_NAMES: "NAMES",
                LABEL_MOL_FORMULA: "MOLFORM",
                LABEL_MOL_ATOMLIST: "ATOMLIST",
                LABEL_MOL_BONDLIST: "BONDLIST",
                LABEL_MOL_CHARGELIST: "CHARGE",
                LABEL_MOL_RADICALLIST: "RADICAL",
                LABEL_MOL_RASTERLIST: "XYRASTER",
                LABEL_MOL_MAX_RASTER: "MAXRASTER",
                LABEL_MOL_COORDLIST: "XYZ",
                LABEL_MOL_COORD_FACTOR: "XYZFACTOR",
                LABEL_MOL_MAX_COORD: "MAXXYZ",
                LABEL_MOL_COORD_CENTER: t.Consts.PRIVATE_LABEL_PREFIX + "XYZCENTER",
                LABEL_MOL_RASTER_CENTER: t.Consts.PRIVATE_LABEL_PREFIX + "XYRASTERCENTER",
                LABEL_MOL_RASTER_FACTOR: t.Consts.PRIVATE_LABEL_PREFIX + "XYRASTERFACTOR",
            }),
            Kekule.IO.Jcamp.LabelTypeInfos.createInfos([
                [t.Consts.LABEL_MOL_FORMULA, t.ValueType.STRING, null, t.LabelCategory.GLOBAL],
                [t.Consts.LABEL_MOL_ATOMLIST, t.ValueType.STRING, null, t.LabelCategory.GLOBAL],
                [t.Consts.LABEL_MOL_BONDLIST, t.ValueType.STRING, null, t.LabelCategory.GLOBAL],
                [t.Consts.LABEL_MOL_COORD_FACTOR, t.ValueType.AFFN, null, t.LabelCategory.GLOBAL],
                [t.Consts.LABEL_MOL_COORD_CENTER, t.ValueType.STRING, t.LabelType.PRIVATE, t.LabelCategory.ANNOTATION],
                [t.Consts.LABEL_MOL_RASTER_FACTOR, t.ValueType.AFFN, t.LabelType.PRIVATE, t.LabelCategory.ANNOTATION],
                [t.Consts.LABEL_MOL_RASTER_CENTER, t.ValueType.STRING, t.LabelType.PRIVATE, t.LabelCategory.ANNOTATION],
                [t.Consts.LABEL_MOL_MAX_COORD, t.ValueType.AFFN, null, t.LabelCategory.GLOBAL],
                [t.Consts.LABEL_MOL_MAX_RASTER, t.ValueType.AFFN, null, t.LabelCategory.GLOBAL],
            ]),
            (Kekule.IO.Jcamp.CsUtils = {
                getJcampIsotopeIdDetails: function (e) {
                    var a = new RegExp("\\" + t.Consts.MOL_ATOM_MASS_NUMBER_PREFIX + "?([0-9]*)([A-z]+)"),
                        r = e.match(a);
                    return r ? { massNumber: r[1] ? parseInt(r[1]) : null, symbol: r[2] } : null;
                },
                jcampIsotopeIdToKekule: function (e) {
                    var a = t.CsUtils.getJcampIsotopeIdDetails(e);
                    return a ? a.symbol + a.massNumber : e;
                },
                kekuleIsotopeToJcampIsotopeId: function (e) {
                    var a = e.getSymbol(),
                        r = e.getMassNumber();
                    return r && (a = t.Consts.MOL_ATOM_MASS_NUMBER_PREFIX + Math.round(r) + a), a;
                },
                jcampBondTypeToKekule: function (e) {
                    var t = Kekule.BondType,
                        a = Kekule.BondOrder,
                        r = e.toUpperCase(),
                        n = {};
                    return (
                        "A" === r
                            ? ((n.bondType = t.UNKNOWN), (n.bondOrder = a.UNSET))
                            : ((n.bondType = t.COVALENT),
                              (n.bondOrder =
                                  "S" === r
                                      ? a.SINGLE
                                      : "D" === r
                                      ? a.DOUBLE
                                      : "T" === r
                                      ? a.TRIPLE
                                      : "Q" === r
                                      ? a.QUAD
                                      : a.UNSET)),
                        n
                    );
                },
                kekuleBondTypeAndOrderToJcampBondType: function (e, t) {
                    var a = Kekule.BondType,
                        r = Kekule.BondOrder;
                    return e === a.COVALENT
                        ? t === r.QUAD
                            ? "Q"
                            : t === r.TRIPLE
                            ? "T"
                            : t === r.DOUBLE
                            ? "D"
                            : t === r.SINGLE
                            ? "S"
                            : "A"
                        : "A";
                },
                jcampRadicalToKekule: function (e) {
                    return Math.round(e);
                },
                kekuleRadicalToJcamp: function (e) {
                    return Math.round(e);
                },
                calcFactorForCoordRange: function (a, r, n, i, o) {
                    for (var s, l, u = ["x", "y", "z"], c = 0, d = u.length; c < d; ++c) {
                        var p = a[u[c]],
                            f = r[u[c]];
                        if (e.notUnset(p) && e.notUnset(f)) {
                            var m = t.Utils.calcNumFactorForRange(p, f, n);
                            (e.isUnset(s) || s > m) && (s = m);
                        }
                    }
                    for (c = 0, d = u.length; c < d; ++c) {
                        (p = a[u[c]]), (f = r[u[c]]);
                        var h = i[u[c]],
                            S = o[u[c]];
                        m = t.Utils.calcNumFactorForRange(p, f, null, h, S);
                        (e.isUnset(l) || l > m) && (l = m);
                    }
                    return Math.min(s, l);
                },
            }),
            (Kekule.IO.Jcamp.CsDataBlockReader = Class.create(Kekule.IO.Jcamp.DataBlockReader, {
                CLASS_NAME: "Kekule.IO.Jcamp.CsDataBlockReader",
                initProperties: function () {
                    this.defineProp("currAtomInfos", {
                        dataType: DataType.ARRAY,
                        setter: !1,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    }),
                        this.defineProp("currBondInfos", {
                            dataType: DataType.ARRAY,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currChargeInfos", {
                            dataType: DataType.ARRAY,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currRadicalInfos", {
                            dataType: DataType.ARRAY,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currCoordFactor", {
                            dataType: DataType.FLOAT,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currCoordCenter", {
                            dataType: DataType.HASH,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currCoordInfos", {
                            dataType: DataType.ARRAY,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currRasterFactor", {
                            dataType: DataType.FLOAT,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currRasterCenter", {
                            dataType: DataType.HASH,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        }),
                        this.defineProp("currRasterInfos", {
                            dataType: DataType.ARRAY,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        });
                },
                doCreateChemObjForBlock: function (e) {
                    var a = this._getBlockMeta(e);
                    return a.blockType === t.BlockType.DATA && a.format === t.Format.CS
                        ? new Kekule.Molecule()
                        : this.tryApplySuper("doCreateChemObjForBlock", [e]);
                },
                doSetChemObjFromBlock: function (e, t) {
                    var a = this.tryApplySuper("doSetChemObjFromBlock", [e, t]);
                    return (
                        this._buildStructure(
                            t,
                            {
                                atomInfos: this.getCurrAtomInfos(),
                                bondInfos: this.getCurrBondInfos(),
                                chargeInfos: this.getCurrChargeInfos(),
                                radicalInfos: this.getCurrRadicalInfos(),
                                coordFactor: this.getCurrCoordFactor(),
                                coordCenter: this.getCurrCoordCenter(),
                                coordInfos: this.getCurrCoordInfos(),
                                rasterFactor: this.getCurrRasterFactor(),
                                rasterCenter: this.getCurrRasterCenter(),
                                rasterInfos: this.getCurrRasterInfos(),
                            },
                            this.getCurrOptions()
                        ),
                        a
                    );
                },
                doBuildCrossRef: function (e, a, r, n) {
                    this.tryApplySuper("doBuildCrossRef", [e, a, r, n]),
                        r === t.CrossRefType.SPECTRUM &&
                            e instanceof Kekule.StructureFragment &&
                            a instanceof Kekule.Spectroscopy.Spectrum &&
                            t.Utils.addMoleculeSpectrumCrossRef(a, e);
                },
                _initLdrHandlers: function () {
                    var e = this.tryApplySuper("_initLdrHandlers");
                    (e[t.Consts.LABEL_MOL_NAMES] = this.doStoreMolNamesLdr.bind(this)),
                        (e[t.Consts.LABEL_MOL_FORMULA] = this.doStoreMolFormulaLdr.bind(this)),
                        (e[t.Consts.LABEL_MOL_ATOMLIST] = this.doStoreMolAtomListLdr.bind(this)),
                        (e[t.Consts.LABEL_MOL_BONDLIST] = this.doStoreMolBondListLdr.bind(this)),
                        (e[t.Consts.LABEL_MOL_CHARGELIST] = this.doStoreMolChargeOrRadicalListLdr.bind(this, "charge")),
                        (e[t.Consts.LABEL_MOL_RADICALLIST] = this.doStoreMolChargeOrRadicalListLdr.bind(
                            this,
                            "radical"
                        )),
                        (e[t.Consts.LABEL_MOL_COORD_FACTOR] = this.doStoreMolCoordOrRasterFactorLdr.bind(
                            this,
                            "coord"
                        )),
                        (e[t.Consts.LABEL_MOL_COORD_CENTER] = this.doStoreMolCoordOrRasterCenterLdr.bind(
                            this,
                            "coord"
                        )),
                        (e[t.Consts.LABEL_MOL_COORDLIST] = this.doStoreMolCoordOrRasterListLdr.bind(this, "coord")),
                        (e[t.Consts.LABEL_MOL_RASTER_FACTOR] = this.doStoreMolCoordOrRasterFactorLdr.bind(
                            this,
                            "raster"
                        )),
                        (e[t.Consts.LABEL_MOL_RASTER_CENTER] = this.doStoreMolCoordOrRasterCenterLdr.bind(
                            this,
                            "raster"
                        )),
                        (e[t.Consts.LABEL_MOL_RASTERLIST] = this.doStoreMolCoordOrRasterListLdr.bind(this, "raster"));
                },
                getIgnoredLdrNames: function () {
                    return ["MAXRASTER", "MAXXYZ", "STEREOCENTER", "STEREOPAIR", "STEREOMOLECULE"];
                },
                doStoreMolNamesLdr: function (e, t, a, r) {
                    var n = e.valueLines[0].trim();
                    a.setName && a.setName(n);
                },
                doStoreMolFormulaLdr: function (e, a, r, n) {
                    var i = t.LdrValueParserCoder.parseValue(e);
                    i && i instanceof Kekule.MolecularFormula && r.setFormula(i);
                },
                doStoreMolAtomListLdr: function (a, r, n, i) {
                    for (var o = [], s = a.valueLines, l = 0, u = s.length; l < u; ++l) {
                        var c = s[l].trim();
                        if (c) {
                            var d = c.split(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER_PATTERN),
                                p = parseInt(d[0]),
                                f = (d[1] || "").trim(),
                                m = parseInt(d[2]) || null;
                            f && e.notUnset(p) && (o[p] = { symbol: f, implicitHCount: m });
                        }
                    }
                    this.setPropStoreFieldValue("currAtomInfos", o);
                },
                doStoreMolBondListLdr: function (a, r, n, i) {
                    for (var o = [], s = a.valueLines, l = 0, u = s.length; l < u; ++l) {
                        var c = s[l].trim();
                        if (c) {
                            var d = c.split(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER_PATTERN),
                                p = parseInt(d[0]),
                                f = parseInt(d[1]),
                                m = d[2].trim();
                            e.notUnset(p) &&
                                e.notUnset(f) &&
                                m &&
                                o.push({ atomIndex1: p, atomIndex2: f, bondType: m });
                        }
                    }
                    this.setPropStoreFieldValue("currBondInfos", o);
                },
                doStoreMolChargeOrRadicalListLdr: function (a, r, n, i, o) {
                    for (var s = [], l = a, u = r.valueLines, c = 0, d = u.length; c < d; ++c) {
                        var p = u[c].trim();
                        if (p) {
                            for (
                                var f = p.split(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER_PATTERN),
                                    m = parseFloat(f[0]),
                                    h = [],
                                    S = 1,
                                    A = f.length;
                                S < A;
                                ++S
                            ) {
                                var T = parseInt(f[S]);
                                e.notUnset(T) && T >= 0 && h.push(T);
                            }
                            if (e.notUnset(m) && h.length) {
                                var I = { atomIndexes: h };
                                (I[l] = m), s.push(I);
                            }
                        }
                    }
                    "charge" === l
                        ? this.setPropStoreFieldValue("currChargeInfos", s)
                        : "radical" === l && this.setPropStoreFieldValue("currRadicalInfos", s);
                },
                doStoreMolCoordOrRasterFactorLdr: function (e, a, r, n, i) {
                    var o = t.LdrValueParserCoder.parseValue(a) || 1;
                    "coord" === e
                        ? this.setPropStoreFieldValue("currCoordFactor", o)
                        : "raster" === e && this.setPropStoreFieldValue("currRasterFactor", o);
                },
                doStoreMolCoordOrRasterCenterLdr: function (e, a, r, n, i) {
                    var o = a.valueLines[0];
                    if (o) {
                        var s = o.split(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER_PATTERN),
                            l = { x: parseFloat(s[0]), y: parseFloat(s[1]) };
                        s[2] && (l.z = parseFloat(s[2])),
                            "coord" === e
                                ? this.setPropStoreFieldValue("currCoordCenter", l)
                                : "raster" === e && this.setPropStoreFieldValue("currRasterCenter", l);
                    }
                },
                doStoreMolCoordOrRasterListLdr: function (a, r, n, i, o) {
                    for (var s = [], l = r.valueLines, u = 0, c = l.length; u < c; ++u) {
                        var d = l[u].trim();
                        if (d) {
                            for (
                                var p = d.split(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER_PATTERN),
                                    f = parseInt(p[0]),
                                    m = [],
                                    h = 1,
                                    S = p.length;
                                h < S;
                                ++h
                            ) {
                                var A = parseFloat(p[h]);
                                e.notUnset(A) && m.push(A);
                            }
                            if (e.notUnset(f) && m.length) {
                                var T = { atomIndex: f, x: m[0], y: m[1], z: m[2] };
                                s.push(T);
                            }
                        }
                    }
                    "coord" === a
                        ? this.setPropStoreFieldValue("currCoordInfos", s)
                        : "raster" === a && this.setPropStoreFieldValue("currRasterInfos", s);
                },
                _buildStructure: function (a, r, n) {
                    var i,
                        o = r.atomInfos || this.getCurrAtomInfos() || [],
                        s = r.bondInfos || this.getCurrBondInfos() || [],
                        l = r.chargeInfos || this.getCurrChargeInfos() || [],
                        u = r.radicalInfos || this.getCurrRadicalInfos() || [],
                        c = r.coordInfos || this.getCurrCoordInfos() || [],
                        d = r.coordFactor || this.getCurrCoordFactor() || 1,
                        p = r.coordCenter || this.getCurrCoordCenter(),
                        f = r.rasterInfos || this.getCurrRasterInfos() || [],
                        m = r.rasterFactor || this.getCurrRasterFactor(),
                        h = r.rasterCenter || this.getCurrRasterCenter();
                    a.beginUpdate();
                    try {
                        for (var S = [], A = 0, T = o.length; A < T; ++A) {
                            if ((w = o[A])) {
                                if (w.symbol && w.symbol !== t.Consts.MOL_ATOM_SYMBOL_ANY) {
                                    var I = t.CsUtils.getJcampIsotopeIdDetails(w.symbol);
                                    X = a.appendAtom(I.symbol, I.massNumber);
                                } else (X = new Kekule.Pseudoatom(null, Kekule.PseudoatomType.ANY)), a.appendNode(X);
                                S[A] = X;
                            }
                        }
                        var g = Kekule.CoordUtils;
                        if (c.length) {
                            var E = p || { x: 0, y: 0, z: 0 };
                            for (A = 0, T = c.length; A < T; ++A) {
                                if ((w = c[A]))
                                    if ((X = S[w.atomIndex])) {
                                        var R = g.multiply(g.add({ x: w.x, y: w.y, z: w.z }, E), d);
                                        X.setCoord3D(R);
                                    }
                            }
                        }
                        if (f.length) {
                            i = !m && n.autoScaleCsRasterCoords && n.csRasterAutoScaleRefLength;
                            for (E = h || { x: 0, y: 0 }, A = 0, T = f.length; A < T; ++A) {
                                if ((w = f[A]))
                                    if ((X = S[w.atomIndex])) {
                                        R = g.multiply(g.add({ x: w.x, y: w.y }, E), m || 1);
                                        X.setCoord2D(R), w.z && X.setZIndex2D(w.z);
                                    }
                            }
                        }
                        var D = [];
                        for (A = 0, T = s.length; A < T; ++A) {
                            if ((w = s[A])) {
                                var C = S[w.atomIndex1],
                                    _ = S[w.atomIndex2],
                                    L = w.bondType,
                                    O = t.CsUtils.jcampBondTypeToKekule(L),
                                    y = a.appendBond([C, _], O.bondOrder, O.bondType);
                                if (i) {
                                    var N = g.getDistance(C.getCoord2D(), _.getCoord2D());
                                    N && D.push(N);
                                }
                                if (
                                    n.determinateBondStereoByZIndex &&
                                    O.bondType === Kekule.BondType.COVALENT &&
                                    O.bondOrder === Kekule.BondOrder.SINGLE
                                ) {
                                    var M = C.getZIndex2D() || 0,
                                        v = _.getZIndex2D() || 0,
                                        P = M < v ? Kekule.BondStereo.UP : M > v ? Kekule.BondStereo.DOWN : null;
                                    !P &&
                                        M > 0 &&
                                        n.enableCloserBondBetweenPositiveZIndexAtoms &&
                                        (P = Kekule.BondStereo.CLOSER),
                                        P && y.setStereo(P);
                                }
                            }
                        }
                        if (i && D.length) {
                            var b = Kekule.ArrayUtils.getMedian(D),
                                k = n.csRasterAutoScaleRefLength / b;
                            for (A = 0, T = S.length; A < T; ++A) {
                                if ((X = S[A])) {
                                    var V = X.getCoord2D();
                                    V && X.setCoord2D(g.multiply(V, k));
                                }
                            }
                        }
                        for (A = 0, T = l.length; A < T; ++A) {
                            if ((w = l[A]) && w.charge) {
                                var U = w.atomIndexes.length;
                                if (U) {
                                    for (var x = [], F = 0; F < U; ++F) {
                                        var K = w.atomIndexes[F];
                                        S[K] && x.push(S[K]);
                                    }
                                    for (var B = w.charge / x.length, G = ((F = 0), x.length); F < G; ++F)
                                        x[F].setCharge(B);
                                }
                            }
                        }
                        for (A = 0, T = u.length; A < T; ++A) {
                            var j = (w = u[A]) && w.radical;
                            if (j)
                                for (F = 0, G = w.atomIndexes.length; F < G; ++F) {
                                    (X = S[w.atomIndexes[F]]) && X.setRadical(t.CsUtils.jcampRadicalToKekule(j));
                                }
                        }
                        for (A = 0, T = o.length; A < T; ++A) {
                            var w;
                            if ((w = o[A])) {
                                var X = S[A],
                                    H = w.implicitHCount;
                                if (e.notUnset(H)) {
                                    var W = X.getImplicitHydrogenCount();
                                    H !== W &&
                                        (X.setExplicitHydrogenCount
                                            ? X.setExplicitHydrogenCount(H)
                                            : Kekule.error(
                                                  Kekule.$L(
                                                      "ErrorMsg.JCAMP_IMPLICIT_HYDROGEN_COUNT_NOT_MATCH_DETAIL"
                                                  ).format(A, w.symbol, H, W)
                                              ));
                                }
                            }
                        }
                        a.hasCtab() && a.hasFormula() && a.removeFormula();
                    } finally {
                        a.endUpdate();
                    }
                },
            })),
            (Kekule.IO.Jcamp.CsDataBlockWriter = Class.create(Kekule.IO.Jcamp.BlockWriter, {
                CLASS_NAME: "Kekule.IO.Jcamp.CsDataBlockWriter",
                initProperties: function () {
                    this.defineProp("atomIndexMap", {
                        dataType: DataType.OBJECT,
                        setter: !1,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    });
                },
                _initLdrCreators: function () {
                    this.tryApplySuper("_initLdrCreators");
                },
                getTitleForBlock: function (e) {
                    return e.getInfoValue("title") || e.getName() || e.getId();
                },
                doSaveJcampVersionToBlock: function (e, a, r) {
                    this.saveToLdrInBlock(
                        a,
                        e,
                        "",
                        r.outputCsVersion || Kekule.globalOptions.IO.jcamp.outputCsVersion,
                        t.Consts.LABEL_CS_VERSION
                    );
                },
                doSaveChemObjToBlock: function (e, t, a) {
                    this.tryApplySuper("doSaveChemObjToBlock", [e, t, a]);
                    var r = new Kekule.MapEx();
                    try {
                        this.setPropStoreFieldValue("atomIndexMap", r);
                        var n = e.clone(!0);
                        try {
                            n.kekulize() && n.kekulize();
                            var i = n.getFlattenedShadowFragment();
                        } finally {
                            n.finalize();
                        }
                        if ((this.doSaveMolFormulaToBlock(e, t, a), i.hasCtab())) {
                            var o = this.doGenerateMolAtomsLdrs(i, a),
                                s = this.doGenerateMolBondsLdrs(i, a);
                            o.atoms && this.setLdrInBlock(t, o.atoms),
                                s.bonds && this.setLdrInBlock(t, s.bonds),
                                o.charges && this.setLdrInBlock(t, o.charges),
                                o.radicals && this.setLdrInBlock(t, o.radicals),
                                o.rasters &&
                                    (o.maxRaster && this.setLdrInBlock(t, o.maxRaster),
                                    o.rasterFactor && this.setLdrInBlock(t, o.rasterFactor),
                                    o.rasterCenter && this.setLdrInBlock(t, o.rasterCenter),
                                    this.setLdrInBlock(t, o.rasters)),
                                o.coords &&
                                    o.coordFactor &&
                                    (o.maxCoord && this.setLdrInBlock(t, o.maxCoord),
                                    this.setLdrInBlock(t, o.coordFactor),
                                    o.coordCenter && this.setLdrInBlock(t, o.coordCenter),
                                    this.setLdrInBlock(t, o.coords));
                        }
                    } finally {
                        r.finalize();
                    }
                },
                doSaveMolFormulaToBlock: function (e, a, r) {
                    var n = e.calcFormula();
                    n && this.saveToLdrInBlock(a, e, "", n, t.Consts.LABEL_MOL_FORMULA);
                },
                doGenerateMolAtomsLdrs: function (e, a) {
                    for (
                        var r,
                            n,
                            i,
                            o,
                            s,
                            l,
                            u,
                            c,
                            d,
                            p,
                            f,
                            m,
                            h,
                            S = this.getAtomIndexMap(),
                            A = 1,
                            T = [""],
                            I = [],
                            g = [],
                            E = [],
                            R = [],
                            D = function (e, t) {
                                return e.hasCoordOfMode(t)
                                    ? (e.getAbsCoordOfMode || e.getCoordOfMode).apply(e, [t])
                                    : null;
                            },
                            C = 0,
                            _ = e.getNodeCount();
                        C < _;
                        ++C
                    ) {
                        var L = e.getNodeAt(C);
                        if (L instanceof Kekule.ChemStructureNode) {
                            var O,
                                y = L.getPrimaryIsotope && L.getPrimaryIsotope();
                            O = y ? t.CsUtils.kekuleIsotopeToJcampIsotopeId(y) : t.Consts.MOL_ATOM_SYMBOL_ANY;
                            var N = L.getHydrogenCount && L.getHydrogenCount(!1),
                                M = [A, O];
                            N && M.push(N), T.push(M.join(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER));
                            var v = D(L, Kekule.CoordMode.COORD3D);
                            v ? (m = !0) : (v = { x: 0, y: 0, z: 0 }), (v._index = A), E.push(v);
                            var P = D(L, Kekule.CoordMode.COORD2D);
                            P ? (h = !0) : (P = { x: 0, y: 0 }), (P._index = A);
                            var b = L.getZIndex2D && L.getZIndex2D();
                            b && (P.zIndex = b), R.push(P);
                            var k = L.getCharge && L.getCharge();
                            k && I.push({ charge: Math.round(k), atomIndex: A });
                            var V = L.getRadical && L.getRadical();
                            V && (g[(V = t.CsUtils.kekuleRadicalToJcamp(V))] ? g[V].push(A) : (g[V] = [A])),
                                S.set(L, A),
                                ++A;
                        }
                    }
                    if ((T.length > 1 && (r = this.createLdrRaw(t.Consts.LABEL_MOL_ATOMLIST, T)), I.length)) {
                        var U = [""];
                        for (C = 0, _ = I.length; C < _; ++C) {
                            if ((x = I[C])) {
                                M = [x.charge > 0 ? "+" + x.charge : x.charge.toString(), x.atomIndex];
                                U.push(M.join(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER));
                            }
                        }
                        n = this.createLdrRaw(t.Consts.LABEL_MOL_CHARGELIST, U);
                    }
                    if (g.length) {
                        for (U = [""], C = 0, _ = g.length; C < _; ++C) {
                            var x;
                            if ((x = g[C]))
                                (M = (M = [C]).concat(g[C])),
                                    U.push(M.join(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER));
                        }
                        U.length > 1 && (i = this.createLdrRaw(t.Consts.LABEL_MOL_RADICALLIST, U));
                    }
                    var F = Kekule.CoordUtils,
                        K = [h ? R : [], m ? E : []];
                    for (C = 0, _ = K.length; C < _; ++C) {
                        var B,
                            G = K[C],
                            j = ((U = [""]), 0 === C ? ["x", "y"] : ["x", "y", "z"]);
                        if (G.length) {
                            var w = F.getCenter(G),
                                X = F.getContainerBoxCorners(G);
                            (X.min = F.substract(X.min, w)), (X.max = F.substract(X.max, w));
                            var H = {},
                                W = {};
                            (H.x = H.y = H.z = a.csCoordPreferredScaledRange.min),
                                (W.x = W.y = W.z = a.csCoordPreferredScaledRange.max);
                            for (
                                var Y = t.CsUtils.calcFactorForCoordRange(
                                        X.min,
                                        X.max,
                                        a.csCoordAllowedSavingErrorRatio,
                                        H,
                                        W
                                    ),
                                    z = 0,
                                    J = G.length;
                                z < J;
                                ++z
                            ) {
                                M = [G[z]._index];
                                for (var q = F.divide(F.substract(G[z], w), Y), Z = 0, Q = j.length; Z < Q; ++Z) {
                                    var $ = j[Z],
                                        ee = Math.round(q[$] || 0);
                                    M.push(ee), (Kekule.ObjUtils.isUnset(B) || ee > B) && (B = ee);
                                }
                                G[z].zIndex && M.push(G[z].zIndex),
                                    U.push(M.join(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER));
                            }
                            for (q = F.divide(w, Y), M = [], Z = 0, Q = j.length; Z < Q; ++Z) {
                                $ = j[Z];
                                M.push(Math.round(q[$] || 0));
                            }
                            var te = M.join(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER);
                            U.length > 1 &&
                                (0 === C
                                    ? ((u = this.createLdrRaw(t.Consts.LABEL_MOL_RASTERLIST, U)),
                                      (c = this.createLdr("", Y, t.Consts.LABEL_MOL_RASTER_FACTOR)),
                                      (d = this.createLdr("", te, t.Consts.LABEL_MOL_RASTER_CENTER)),
                                      (f = this.createLdr("", B, t.Consts.LABEL_MOL_MAX_RASTER)))
                                    : ((o = this.createLdrRaw(t.Consts.LABEL_MOL_COORDLIST, U)),
                                      (s = this.createLdr("", Y, t.Consts.LABEL_MOL_COORD_FACTOR)),
                                      (l = this.createLdr("", te, t.Consts.LABEL_MOL_COORD_CENTER)),
                                      (p = this.createLdr("", B, t.Consts.LABEL_MOL_MAX_COORD))));
                        }
                    }
                    return {
                        atoms: r,
                        charges: n,
                        radicals: i,
                        rasters: u,
                        rasterFactor: c,
                        rasterCenter: d,
                        coords: o,
                        coordFactor: s,
                        coordCenter: l,
                        maxCoord: p,
                        maxRaster: f,
                    };
                },
                doGenerateMolBondsLdrs: function (a, r) {
                    for (var n = this.getAtomIndexMap(), i = [""], o = 0, s = a.getConnectorCount(); o < s; ++o) {
                        var l = a.getConnectorAt(o);
                        if (l instanceof Kekule.Bond) {
                            for (var u = [], c = l.getConnectedChemNodes(), d = 0, p = c.length; d < p; ++d) {
                                var f = n.get(c[d]);
                                if (e.notUnset(f) && (u.push(f), u.length >= 2)) break;
                            }
                            var m = t.CsUtils.kekuleBondTypeAndOrderToJcampBondType(l.getBondType(), l.getBondOrder());
                            u.push(m), i.push(u.join(t.Consts.MOL_STRUCTURE_VALUE_GROUP_DELIMITER));
                        }
                    }
                    var h = {};
                    return i.length > 1 && (h.bonds = this.createLdrRaw(t.Consts.LABEL_MOL_BONDLIST, i)), h;
                },
            })),
            t.BlockReaderManager.register(t.BlockType.DATA, t.Format.CS, Kekule.IO.Jcamp.CsDataBlockReader),
            t.BlockWriterManager.register(Kekule.StructureFragment, Kekule.IO.Jcamp.CsDataBlockWriter);
    })(),
    (function () {
        "use strict";
        Kekule.ArrayUtils;
        var e = Kekule.IO.Jcamp,
            t = e.Consts;
        (Kekule.IO.JcampReader = Class.create(Kekule.IO.ChemDataReader, {
            CLASS_NAME: "Kekule.IO.JcampReader",
            initialize: function (e) {
                this.tryApplySuper("initialize", e);
            },
            doFinalize: function () {
                this.tryApplySuper("doFinalize");
            },
            initProperties: function () {
                this.defineProp("blockIdObjMap", {
                    dataType: DataType.HASH,
                    setter: !1,
                    serializable: !1,
                    scope: Class.PropertyScope.PRIVATE,
                }),
                    this.defineProp("crossRefs", {
                        dataType: DataType.ARRAY,
                        setter: !1,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    });
            },
            _removeInlineComments: function (e) {
                var a = e.indexOf(t.INLINE_COMMENT_FLAG);
                return a >= 0 ? e.substring(0, a) : e;
            },
            _parseLdrLines: function (a) {
                var r = a[0].indexOf(t.DATA_LABEL_TERMINATOR),
                    n = !1;
                if (r < 0) (i = a[0].substring(t.DATA_LABEL_FLAG.length).trim()), (n = !0);
                else var i = a[0].substring(t.DATA_LABEL_FLAG.length, r).trim();
                if (i) {
                    var o = null;
                    if (!n) {
                        o = [];
                        var s = this._removeInlineComments(a[0].substr(r + 1)).trim();
                        o.push(s || "");
                        for (var l = 1, u = a.length; l < u; ++l)
                            (s = this._removeInlineComments(a[l].trim())) && o.push(s);
                    }
                    return { labelName: e.Utils.standardizeLdrLabelName(i), valueLines: o };
                }
                return null;
            },
            doCreateAnalysisTree: function (a) {
                var r = e.BlockUtils.createBlock,
                    n = r(),
                    i = n,
                    o = this,
                    s = function (a) {
                        var n = o._parseLdrLines(a);
                        if (n) {
                            if (e.Utils.ldrLabelNameEqual(n.labelName, t.LABEL_BLOCK_BEGIN)) {
                                var s = r(i);
                                i.blocks.push(s), (i = s);
                            }
                            !(function (t, a) {
                                var r = o._parseLdrLines(t);
                                r && e.BlockUtils.addLdrToBlock(a, r);
                            })(a, i),
                                e.Utils.ldrLabelNameEqual(n.labelName, t.LABEL_BLOCK_END) && (i = i._parent);
                        }
                    },
                    l = new Kekule.TextLinesBuffer(a);
                l.reset();
                for (var u = []; !l.eof(); ) {
                    var c = l.readLine().trim();
                    c.startsWith(t.DATA_LABEL_FLAG) ? (u.length && s(u), (u = [c])) : u.push(c);
                }
                return u.length && s(u), n;
            },
            doCheckAnalysisTree: function (t) {
                t.ldrs.length && Kekule.error(Kekule.$L("ErrorMsg.JCAMP_OTHER_LABEL_BEFORE_TITLE_LINE")),
                    t.blocks.length > 1 && Kekule.error(Kekule.$L("ErrorMsg.JCAMP_MORE_THAN_ONE_ROOT_BLOCK"));
                var a = t.blocks[0];
                return (
                    a || Kekule.error(Kekule.$L("ErrorMsg.JCAMP_DATA_WITHOUT_TITLE_LINE")),
                    e.BlockUtils.getNestedBlockLevelCount(a) > 2 &&
                        Kekule.error(Kekule.$L("ErrorMsg.JCAMP_MORE_THAN_TWO_NEST_LEVEL")),
                    !0
                );
            },
            buildAnalysisTree: function (e) {
                var t = this.doCreateAnalysisTree(e);
                return this.doCheckAnalysisTree(t) ? t : null;
            },
            setObjWithBlockId: function (e, t) {
                this.getBlockIdObjMap()[e] = t;
            },
            getObjFromBlockId: function (e) {
                return this.getBlockIdObjMap()[e];
            },
            addCrossRefItem: function (e, t, a, r, n) {
                this.getCrossRefs().push({ srcReader: e, srcBlockId: t, targetBlockId: a, refType: r, refTypeText: n });
            },
            doHandleCrossRefs: function () {
                for (var e = this.getCrossRefs() || [], t = 0, a = e.length; t < a; ++t) {
                    var r = e[t],
                        n = r.srcReader;
                    if (n && n.doBuildCrossRef) {
                        var i = this.getObjFromBlockId(r.srcBlockId),
                            o = this.getObjFromBlockId(r.targetBlockId);
                        i && o && n.doBuildCrossRef(i, o, r.refType, r.refTypeText);
                    }
                }
            },
            doReadData: function (t, a, r, n) {
                var i,
                    o = this.buildAnalysisTree(t).blocks[0],
                    s = e.BlockUtils.getBlockMeta(o),
                    l = e.BlockReaderManager.getReaderClass(s.blockType, s.format);
                if (l) {
                    var u = new l();
                    u.setParentReader(this);
                    try {
                        var c = Object.extend({}, Kekule.globalOptions.IO.jcamp);
                        (c = Object.extend(c, n || {})),
                            this.setPropStoreFieldValue("blockIdObjMap", {}),
                            this.setPropStoreFieldValue("crossRefs", []),
                            (i = u.doReadData(o, null, null, c)),
                            this.doHandleCrossRefs();
                    } finally {
                        u.finalize();
                    }
                }
                return i;
            },
        })),
            (Kekule.IO.JcampWriter = Class.create(Kekule.IO.ChemDataWriter, {
                CLASS_NAME: "Kekule.IO.JcampWriter",
                initProperties: function () {
                    this.defineProp("maxBlockId", {
                        dataType: DataType.INT,
                        setter: !1,
                        serializable: !1,
                        scope: Class.PropertyScope.PRIVATE,
                    }),
                        this.defineProp("objBlockIdMap", {
                            dataType: DataType.OBJECT,
                            setter: !1,
                            serializable: !1,
                            scope: Class.PropertyScope.PRIVATE,
                        });
                },
                doWriteData: function (e, t, a, r) {
                    var n = e,
                        i = this.doGetChildWriter(n);
                    if (!i && e.getChildAt && e.getChildCount)
                        for (var o = 0, s = e.getChildCount(); o < s; ++o) {
                            var l = e.getChildAt(o);
                            if (l && (i = this.doGetChildWriter(l))) {
                                n = l;
                                break;
                            }
                        }
                    if (i && n) {
                        this._prepareWriting();
                        var u = Object.extend({}, Kekule.globalOptions.IO.jcamp);
                        (u = Object.extend(u, r || {})), i.setParentWriter(this);
                        var c = i.writeData(n, t, a, u),
                            d = [];
                        return c && (d = this.encodeBlockToTextLines(c)), i.finalize(), d.join("\n");
                    }
                    return "";
                },
                _prepareWriting: function () {
                    this.setPropStoreFieldValue("maxBlockId", 0),
                        this.getObjBlockIdMap() && this.getObjBlockIdMap().finalize(),
                        this.setPropStoreFieldValue("objBlockIdMap", new Kekule.MapEx());
                },
                doGetChildWriter: function (t) {
                    var a = e.BlockWriterManager.getWriterClass(t);
                    return a ? new a() : null;
                },
                encodeBlockToTextLines: function (a) {
                    for (var r, n = a.ldrs, i = [], o = 0, s = n.length; o < s; ++o) {
                        var l = n[o],
                            u = l.labelName;
                        if (u === t.LABEL_BLOCK_END) r = l;
                        else {
                            var c = l.valueLines || [],
                                d = e.Consts.DATA_LABEL_FLAG + u + e.Consts.DATA_LABEL_TERMINATOR + c.join("\n");
                            i.push(d);
                        }
                    }
                    var p = a.blocks || [];
                    for (o = 0, s = p.length; o < s; ++o) i = i.concat(this.encodeBlockToTextLines(p[o]));
                    if (r) {
                        d =
                            e.Consts.DATA_LABEL_FLAG +
                            r.labelName +
                            e.Consts.DATA_LABEL_TERMINATOR +
                            (l.valueLines || []).join("\n");
                        i.push(d);
                    }
                    return i;
                },
                generateUniqueBlockId: function () {
                    var e = this.getMaxBlockId(),
                        t = ++e;
                    return this.setPropStoreFieldValue("maxBlockId", t), t.toString();
                },
                setBlockInfoForObj: function (e, t) {
                    this.getObjBlockIdMap().set(e, t);
                },
                getBlockInfoFromObj: function (e) {
                    return this.getObjBlockIdMap().get(e);
                },
            })),
            Kekule.Spectroscopy.MetaPropNamespace.register("jcamp"),
            (Kekule.IO.DataFormat.JCAMP_DX = "jcamp-dx"),
            (Kekule.IO.MimeType.JCAMP_DX = "chemical/x-jcamp-dx"),
            Kekule.IO.DataFormatsManager.register(
                Kekule.IO.DataFormat.JCAMP_DX,
                Kekule.IO.MimeType.JCAMP_DX,
                ["jdx", "dx", "jcm", "jcamp"],
                Kekule.IO.ChemDataType.TEXT,
                "JCAMP-DX format"
            ),
            Kekule.IO.ChemDataReaderManager.register(Kekule.IO.DataFormat.JCAMP_DX, Kekule.IO.JcampReader, [
                Kekule.IO.DataFormat.JCAMP_DX,
            ]),
            Kekule.IO.ChemDataWriterManager.register(
                Kekule.IO.DataFormat.JCAMP_DX,
                Kekule.IO.JcampWriter,
                [Kekule.Spectroscopy.Spectrum, Kekule.StructureFragment, Kekule.ChemObjList, Kekule.ChemSpace],
                [Kekule.IO.DataFormat.JCAMP_DX]
            );
    })(),
    (function () {
        "use strict";
        Kekule.globalOptions.add("IO.cml", {
            enableExtractSampleInsideSpectrum: !0,
            autoHideSampleInsideSpectrum: !0,
            autoInsertHiddenRefMoleculeToSample: !0,
            spectrumDataValueOutputPrecisionCount: 8,
            autoConvertNmrDataFreqToUnit: "Hz",
        });
        var e = Kekule.ArrayUtils,
            t = Kekule.ObjUtils,
            a = Kekule.DomUtils,
            r = Kekule.IO.CmlUtils,
            n = Kekule.IO.CmlDomUtils,
            i = Kekule.Spectroscopy.SpectrumType,
            o = Kekule.Spectroscopy.PeakShape,
            s = Kekule.Spectroscopy.PeakMultiplicity;
        Kekule.IO.CmlUtils._cmlUnitConvMap.push(["moverz", "m/z", "m/z", !1]),
            (Kekule.IO.CML.SPECTRUM_OBJREF_FIELDNAME = "__$objRef$__"),
            (Kekule.IO.CML.SPECTRUM_DATA_OBJREF_FLAG_FIELDNAME = "__$hasObjRef$__"),
            (Kekule.IO.CML.Spect = {}),
            (Kekule.IO.CML.Spect.Consts = {
                SI_UNITS_NAMESPACE_DEF_PREFIX: "siUnits",
                SI_UNITS_NAMESPACE_URI: "http://www.xml-cml.org/units/siUnits",
                UNITS_NAMESPACE_DEF_PREFIX: "units",
                UNITS_NAMESPACE_URI: "http://www.xml-cml.org/units/units",
                JSPECVIEW_NAMESPACE_DEF_PREFIX: "jspecview",
                JSPECVIEW_NAMESPACE_URI: "http://jspecview.sf.net/convention.html",
                JCAMP_NAMESPACE_DEF_PREFIX: "jcamp",
                JCAMP_NAMESPACE_URI: "http://www.iupac.org/jcamp/dict",
                JCAMP_UNITS_NAMESPACE_DEF_PREFIX: "jcampUnits",
                JCAMP_UNITS_NAMESPACE_URI: "http://www.iupac.org/jcamp/dict/units",
                CML_DICT_NAMESPACE_DEF_PREFIX: "cml",
                CML_DICT_NAMESPACE_URI: "http://www.xml-cml.org/dict/cmlDict",
                XML_SCHEMA_INSTANCE_NAMESPACE_DEF_PREFIX: "xsi",
                XML_SCHEMA_INSTANCE_NAMESPACE_URI: "http://www.w3.org/2001/XMLSchema-instance",
                CMLSPECT_SCHEMA_LOCATIONS_ATTRIBNAME: "schemaLocation",
                CMLSPECT_SCHEMA_LOCATIONS: [
                    "http://www.xml-cml.org/dict/jcampDict dict/jcampDict.xml",
                    "http://www.xml-cml.org/schema schema.xsd",
                    "http://www.xml-cml.org/dict/cml dict/cmlDict.xml",
                    "http://www.xml-cml.org/dict/cmlDict dict/simpleCmlDict.xml",
                    "http://www.xml-cml.org/units/units dict/unitsDict.xml",
                    "http://www.xml-cml.org/units/siUnits dict/siUnitsDict.xml",
                ],
                ANNOTATION_METATYPE: "annotation",
                INFO_METATYPE: "info",
            });
        var l = Kekule.IO.CML.Spect.Consts;
        Kekule.IO.CmlSpectUtils = {
            _spectrumTypeMap: [
                ["NMR", i.NMR],
                ["infrared", i.IR],
                ["ir", i.IR],
                ["massSpectrum", i.MS],
                ["mass", i.MS],
                ["UV/VIS", i.UV_VIS],
                ["uv", i.UV_VIS],
                ["vis", i.UV_VIS],
            ],
            _peakShapeMap: [
                ["sharp", o.SHARP],
                ["broad", o.BROAD],
            ],
            _peakMultiplicityMap: [
                ["singlet", s.SINGLET],
                ["doublet", s.DOUBLET],
                ["triplet", s.TRIPLET],
                ["quartet", s.QUARTET],
                ["quintet", s.QUINTET],
                ["sextuplet", s.SEXTUPLET],
                ["multiplet", s.MULTIPLET],
                ["s", s.SINGLET],
                ["d", s.DOUBLET],
                ["dd", s.DOUBLE_DOUBLET],
                ["ddd", s.TRIPLE_DOUBLET],
                ["t", s.TRIPLET],
                ["m", s.MULTIPLET],
            ],
            _spectrumInfoKeyMap: [
                ["jcamp:NMR_OBSERVEFREQUENCY", "NMR.ObserveFrequency"],
                ["cml:field", "NMR.ObserveFrequency"],
                ["jcamp:NMR_OBSERVENUCLEUS", "NMR.ObserveNucleus"],
                ["nmr:OBSERVENUCLEUS", "NMR.ObserveNucleus"],
                ["jcamp:resolution", "Resolution"],
            ],
            cmlSpectrumTypeToKekule: function (e) {
                for (
                    var t = Kekule.IO.CmlSpectUtils._spectrumTypeMap,
                        a = i.GENERAL,
                        r = e.toLowerCase(),
                        n = 0,
                        o = t.length;
                    n < o;
                    ++n
                ) {
                    var s = t[n];
                    if (r.indexOf(s[0].toLowerCase()) >= 0) {
                        a = s[1];
                        break;
                    }
                }
                return a;
            },
            kekuleSpectrumTypeToCml: function (e) {
                for (var t = null, a = Kekule.IO.CmlSpectUtils._spectrumTypeMap, r = 0, n = a.length; r < n; ++r) {
                    var i = a[r];
                    if (e === i[1]) {
                        t = i[0];
                        break;
                    }
                }
                return t;
            },
            cmlSpectrumInfoDataKeyToKekule: function (e, t, a) {
                a || (a = l.JCAMP_NAMESPACE_DEF_PREFIX);
                for (var n = u._spectrumInfoKeyMap, i = 0, o = n.length; i < o; ++i) if (e === n[i][0]) return n[i][1];
                var s = r.getCmlNsValueDetails(e);
                if (s.namespace && s.namespace === a) {
                    var c = s.localName;
                    if (t) {
                        var d = t && t + "_",
                            p = c.indexOf(d);
                        p >= 0 && (c = Kekule.IO.Jcamp.Consts.SPECIFIC_LABEL_PREFIX + c.substr(p + d.length));
                    }
                    var f = c.toUpperCase();
                    return Kekule.IO.Jcamp.Utils.jcampLabelNameToKekule(f, t);
                }
                return r.cmlNsTokenToKekule(e);
            },
            kekuleSpectrumInfoDataKeyToCml: function (e, t, a) {
                a || (a = l.JCAMP_NAMESPACE_DEF_PREFIX);
                for (var r = u._spectrumInfoKeyMap, n = 0, i = r.length; n < i; ++n) if (e === r[n][1]) return r[n][0];
                var o = Kekule.Spectroscopy.MetaPropNamespace.getPropertyNameDetail(e);
                if (o.namespace === a) return o.namespace + ":" + o.coreName;
                var s = Kekule.IO.Jcamp.Utils.kekuleLabelNameToJcamp(e, t, !0);
                return s ? u._convPossibleJcampLabelNameToCml(s, t, a) : o.namespace + ":" + o.coreName;
            },
            _convPossibleJcampLabelNameToCml: function (e, t, a) {
                var r = Kekule.IO.Jcamp.Utils.analysisLdrLabelName(e, !1),
                    n = r.labelType === Kekule.IO.Jcamp.LabelType.SPECIFIC,
                    i = r.labelType === Kekule.IO.Jcamp.LabelType.PRIVATE,
                    o = r.coreName,
                    s = n && t ? t + "_" + o : o;
                return i ? s : a + ":" + s;
            },
            cmlPeakShapeToKekule: function (e) {
                for (var t = u._peakShapeMap, a = e.toLowerCase(), r = 0, n = t.length; r < n; ++r)
                    if (a === t[r][0]) return t[r][1];
                return e;
            },
            kekulePeakShapeToCml: function (e) {
                for (var t = u._peakShapeMap, a = 0, r = t.length; a < r; ++a) if (e === t[a][1]) return t[a][0];
                return e;
            },
            cmlPeakMultiplicityToKekule: function (e) {
                for (var t = u._peakMultiplicityMap, a = e.toLowerCase(), r = 0, n = t.length; r < n; ++r)
                    if (a === t[r][0]) return t[r][1];
                return e;
            },
            kekulePeakMultiplicityToCml: function (e) {
                for (var t = u._peakMultiplicityMap, a = 0, r = t.length; a < r; ++a) if (e === t[a][1]) return t[a][0];
                return e;
            },
            floatToCmlString: function (e, t) {
                return t ? Kekule.NumUtils.toPrecision(e, t, !0, !0) : e.toString();
            },
            getSpectrumVarDef: function (e, t, a, r, n) {
                n || (n = Kekule.VarDependency.INDEPENDENT);
                for (var i = e.getVariables(), o = 0, s = i.length; o < s; ++o) {
                    var l = i[o];
                    if (
                        !(
                            (t && t !== l.getSymbol()) ||
                            (a && a !== l.getUnit()) ||
                            (r && r !== l.getName()) ||
                            n !== l.getDependency()
                        )
                    )
                        return l;
                }
                return null;
            },
        };
        var u = Kekule.IO.CmlSpectUtils;
        (Kekule.IO.CmlSampleReader = Class.create(Kekule.IO.CmlBaseListReader, {
            CLASS_NAME: "Kekule.IO.CmlSampleReader",
        })),
            (Kekule.IO.CmlSpectrumDataSectionBaseWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumDataWriter",
                getSpectrumDataSectionVarInfos: function (e) {
                    for (
                        var t = { dependent: {}, independent: {} }, a = 0, r = e.getActualLocalVarInfos().length;
                        a < r;
                        ++a
                    ) {
                        var n = e.getLocalVarDef(a),
                            i = t[n.getDependency() === Kekule.VarDependency.DEPENDENT ? "dependent" : "independent"];
                        (i.symbol = n.getSymbol()),
                            (i.unitSymbol = n.getUnit()),
                            (i.name = n.getName()),
                            (i.description = n.getDescription());
                        var o = e.getContinuousVarRange(a);
                        if (
                            (o && (i.range = { fromValue: o.fromValue, toValue: o.toValue, count: e.getDataCount() }),
                            t.dependent.symbol && t.independent.symbol)
                        )
                            break;
                    }
                    return (t.varCount = (t.dependent.symbol ? 1 : 0) + (t.independent.symbol ? 1 : 0)), t;
                },
            })),
            (Kekule.IO.CmlSpectrumPeakListReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumPeakListReader",
                initialize: function () {
                    this.tryApplySuper("initialize"), (this._peakDetailsWithAssignments = []);
                },
                doFinalize: function () {
                    (this._peakDetailsWithAssignments = null), this.tryApplySuper("doFinalize");
                },
                doReadElement: function (e, t, a, r) {
                    var n = t instanceof Kekule.Spectroscopy.Spectrum ? t : null;
                    if (n) {
                        var i = [],
                            o = this.getDomHelper().getElementsByTagNameNS(this.getCoreNamespaceURI(), "peak", e),
                            s = this.doGetChildElementReader("peak");
                        if (s)
                            try {
                                for (var l = 0, u = o.length; l < u; ++l) {
                                    var c = s.readElement(o[l], null, this);
                                    c && i.push(c);
                                }
                            } finally {
                            }
                        if (i.length) {
                            var d,
                                p = n.getData(),
                                f = this._analysisPeakVarInfo(i, n);
                            if (f) {
                                var m = this._addPeakVariablesToSpectrumData(f, p, n);
                                m &&
                                    m.length &&
                                    ((d = p.createSection(m, Kekule.Spectroscopy.DataMode.PEAK)),
                                    this._setVarLocalInfos(f, d),
                                    this._addPeakDataToSpectrumData(i, m, d, p, n));
                            }
                            return d;
                        }
                        return null;
                    }
                    return null;
                },
                doDoneReadingDocument: function () {
                    for (var e = this._peakDetailsWithAssignments, t = 0, a = e.length; t < a; ++t) {
                        var r = e[t];
                        if (r instanceof Kekule.Spectroscopy.SpectrumPeakDetails) {
                            for (
                                var n = r.getOwner(),
                                    i = r.getInfoValue(Kekule.IO.CML.SPECTRUM_OBJREF_FIELDNAME),
                                    o = [],
                                    s = 0,
                                    l = i.length;
                                s < l;
                                ++s
                            ) {
                                var u = i[s],
                                    c = this.getLoadedObjById(u) || (n && n.getObjById && n.getObjById(u));
                                c && o.push(c);
                            }
                            o.length && r.setAssignments(o),
                                delete r.getInfo()[Kekule.IO.CML.SPECTRUM_OBJREF_FIELDNAME];
                        }
                    }
                    this._peakDetailsWithAssignments = [];
                },
                _analysisPeakVarInfo: function (e, t) {
                    for (var a = {}, r = 0, n = 0, i = e.length; n < i; ++n) {
                        for (
                            var o = e[n],
                                s = o.value,
                                l = 0,
                                u = (d = (s && Kekule.ObjUtils.getOwnedFieldNames(s, !1)) || []).length;
                            l < u;
                            ++l
                        )
                            a[d[l]] || ((a[d[l]] = {}), ++r);
                        var c = o.units;
                        if (c) {
                            var d;
                            for (l = 0, u = (d = Kekule.ObjUtils.getOwnedFieldNames(c, !1) || []).length; l < u; ++l)
                                if (a[d[n]] && !a[d[n]].units) {
                                    var p = Kekule.IO.CmlUtils.cmlUnitStrToMetricsUnitSymbol(c[d[n]]);
                                    (a[d[n]].units = p),
                                        p || (a[d[n]].title = Kekule.IO.CmlUtils.getCmlNsValueLocalPart(c[d[n]]));
                                }
                        }
                    }
                    return r <= 0
                        ? null
                        : (1 === r &&
                              t &&
                              t.getSpectrumType() === Kekule.Spectroscopy.SpectrumType.NMR &&
                              (a.y = {
                                  units: Kekule.Unit.Arbitrary.ARBITRARY.symbol,
                                  displayLabel: Kekule.Unit.Arbitrary.ARBITRARY.name,
                                  defaultValue: 1,
                              }),
                          a);
                },
                _addPeakVariablesToSpectrumData: function (e, t, a) {
                    if (!e) return null;
                    var r = Kekule.ObjUtils.getOwnedFieldNames(e, !1),
                        n = r.indexOf("x");
                    n < 0 && (n = r.indexOf("X")), n < 0 && (n = 0);
                    var i = r.splice(n, 1);
                    r.unshift(i[0]);
                    for (var o = [], s = 0, l = r.length; s < l; ++s) {
                        var u = {
                            symbol: r[s],
                            dependency: 0 === s ? Kekule.VarDependency.INDEPENDENT : Kekule.VarDependency.DEPENDENT,
                        };
                        e[r[s]].title && (u.displayLabel = e[r[s]].title), e[r[s]].units && (u.unit = e[r[s]].units);
                        var c = Kekule.IO.CmlSpectUtils.getSpectrumVarDef(a, u.symbol, u.unit, null, u.dependency);
                        c && !c.getDisplayLabel() && u.displayLabel && c.setDisplayLabel(u.displayLabel),
                            c || ((c = new Kekule.Spectroscopy.SpectrumVarDefinition(u)), t.appendVariable(c)),
                            o.push(u.symbol);
                    }
                    return o;
                },
                _setVarLocalInfos: function (e, t) {
                    for (var a = Kekule.ObjUtils.getOwnedFieldNames(e, !1), r = 0, n = a.length; r < n; ++r) {
                        var i = e[a[r]];
                        Kekule.ObjUtils.notUnset(i.defaultValue) && t.setDefaultVarValue(a[r], i.defaultValue);
                    }
                },
                _addPeakDataToSpectrumData: function (e, t, a, r, n) {
                    for (var i = 0, o = e.length; i < o; ++i) {
                        for (var s = e[i], l = [], u = 0, c = t.length; u < c; ++u) {
                            var d = t[u],
                                p = s.value[d];
                            l.push(p);
                        }
                        this._setPeakDetails(s, l, a), a.appendData(l);
                    }
                    a.setDataSorted(!0);
                },
                _setPeakDetails: function (e, t, a) {
                    if (e.subStructure || e.multiplicity || e.shape) {
                        var r = new Kekule.Spectroscopy.SpectrumPeakDetails({
                            multiplicity: e.multiplicity,
                            shape: e.shape,
                        });
                        e.subStructure && r.setInfoValue("structure", e.subStructure);
                        var n = this._getPeakObjRefIds(e);
                        return (
                            n &&
                                (r.setInfoValue(Kekule.IO.CML.SPECTRUM_OBJREF_FIELDNAME, n),
                                this._peakDetailsWithAssignments.push(r)),
                            a.setExtraInfoOf(t, r),
                            r
                        );
                    }
                    return null;
                },
                _getPeakObjRefIds: function (e) {
                    for (var t = [], a = 0, r = Kekule.IO.CML.ATOMS_REF_ATTRIBS.length; a < r; ++a) {
                        e[(n = Kekule.IO.CML.ATOMS_REF_ATTRIBS[a])] && (t = t.concat(e[n].split(/\s/)));
                    }
                    for (a = 0, r = Kekule.IO.CML.BONDS_REF_ATTRIBS.length; a < r; ++a) {
                        var n;
                        e[(n = Kekule.IO.CML.BONDS_REF_ATTRIBS[a])] && (t = t.concat(e[n].split(/\s/)));
                    }
                    var i = [];
                    for (a = 0, r = t.length; a < r; ++a) {
                        var o = t[a].trim();
                        o && i.push(o);
                    }
                    return i.length ? i : null;
                },
            })),
            (Kekule.IO.CmlSpectrumPeakListWriter = Class.create(Kekule.IO.CmlSpectrumDataSectionBaseWriter, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumPeakListWriter",
                doCreateElem: function (e, t) {
                    return this.createChildElem("peakList", t);
                },
                doWriteObject: function (e, t, a) {
                    return this.writePeaks(e, t, a);
                },
                writePeaks: function (e, t, a) {
                    var r = this.getSpectrumDataSectionVarInfos(e);
                    if (r.varCount < 2);
                    else {
                        var n = this.getChildPeakWriter();
                        if (n) {
                            var i = r.independent.symbol,
                                o = r.independent.unitSymbol,
                                s = r.dependent.symbol,
                                l = r.dependent.unitSymbol,
                                u = this;
                            e.forEach(function (r, c) {
                                var d,
                                    p = { xValue: r[i], xUnits: o, yValue: r[s], yUnits: l },
                                    f = e.getExtraInfoOf(r);
                                f instanceof Kekule.Spectroscopy.SpectrumPeakDetails
                                    ? (d = u._peakDetailsToHash(f))
                                    : DataType.isObjectValue(f) && (d = f),
                                    d && (p = Object.extend(p, d)),
                                    n.writeObject(p, t, a);
                            });
                        }
                    }
                },
                getChildPeakWriter: function () {
                    var e = new Kekule.IO.CmlSpectrumPeakWriter();
                    return e && (this.copySettingsToChildHandler(e), this._appendChildHandler(e)), e;
                },
                _peakDetailsToHash: function (e) {
                    var t = { shape: e.getShape(), multiplicity: e.getMultiplicity(), assignments: e.getAssignments() },
                        a = e.getInfoValue("structure");
                    return a && (t.structure = a), t;
                },
            })),
            (Kekule.IO.CmlSpectrumPeakReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumPeakReader",
                doReadElement: function (e, t, r, n) {
                    var i = {};
                    return (
                        this.readPeakAttribs(i, e, this.getDomHelper()),
                        this.iterateChildElements(e, i, this, function (e, t) {
                            "peakstructure" === a.getLocalName(e).toLowerCase() &&
                                (i.subStructure || (i.subStructure = []), i.subStructure.push(t));
                        }),
                        i
                    );
                },
                readPeakAttribs: function (e, t, a) {
                    for (
                        var r = Kekule.IO.CmlDomUtils.fetchCmlElemAttributeValuesToJson(t, null, !0, a),
                            n = Kekule.ObjUtils.getOwnedFieldNames(r),
                            i = 0,
                            o = n.length;
                        i < o;
                        ++i
                    ) {
                        var s = n[i],
                            l = s.toLowerCase();
                        "peakheight" === l && ((s = "yValue"), (l = "yvalue"));
                        var c = r[s];
                        if (l.indexOf("units") >= 0) {
                            var d = this._getVarSymbolInName(s, "units");
                            e.units || (e.units = {}),
                                (e.units[d] = Kekule.IO.CmlUtils.cmlUnitStrToMetricsUnitSymbol(c));
                        } else if (l.indexOf("value") >= 0) {
                            d = this._getVarSymbolInName(s, "value");
                            e.value || (e.value = {}), (e.value[d] = Kekule.IO.CmlUtils.tryParseFloat(c));
                        } else
                            "peakmultiplicity" === l
                                ? (e.multiplicity = u.cmlPeakMultiplicityToKekule(c))
                                : "peakshape" === l
                                ? (e.shape = u.cmlPeakShapeToKekule(c))
                                : (e[s] = c);
                    }
                },
                _getVarSymbolInName: function (e, t) {
                    var a = e.toLowerCase().indexOf(t.toLowerCase());
                    return a > 0 ? e.substring(0, a) : null;
                },
            })),
            (Kekule.IO.CmlSpectrumPeakWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumPeakWriter",
                doCreateElem: function (e, t) {
                    return this.createChildElem("peak", t);
                },
                doWriteObject: function (e, t, a) {
                    this.writePeakAttribs(e, t, a);
                },
                writePeakAttribs: function (e, t, a) {
                    for (
                        var r = this.getDomHelper(),
                            i = this._peakHashToCmlHash(e),
                            o = Kekule.ObjUtils.getOwnedFieldNames(i),
                            s = a.spectrumDataValueOutputPrecisionCount || 0,
                            l = 0,
                            c = o.length;
                        l < c;
                        ++l
                    ) {
                        var d = o[l],
                            p = i[d];
                        ["xvalue", "yvalue"].indexOf(d.toLowerCase()) >= 0 &&
                            n.setCmlElemAttribute(t, d, u.floatToCmlString(p, s), r),
                            "structure" === d.toLowerCase() && DataType.isObjectValue(p)
                                ? this.writePeakSubStructure(p, t, a)
                                : n.setCmlElemAttribute(t, d, p, r);
                    }
                },
                getChildPeakStructureWriter: function () {
                    var e = new Kekule.IO.CmlSpectrumPeakStructureWriter();
                    return e && (this.copySettingsToChildHandler(e), this._appendChildHandler(e)), e;
                },
                writePeakSubStructure: function (e, t, a) {
                    var r = this.getChildPeakStructureWriter();
                    r && r.writeObj(e, t, a);
                },
                _peakHashToCmlHash: function (e) {
                    for (var t = {}, a = ["xValue", "yValue"], n = 0, i = a.length; n < i; ++n) {
                        var o = a[n],
                            s = e[o];
                        Kekule.ObjUtils.notUnset(s) && (t[o] = s);
                    }
                    if (
                        (e.xUnits && (t.xUnits = r.metricsUnitSymbolToCmlUnitStr(e.xUnits)),
                        e.yUnits && (t.yUnits = r.metricsUnitSymbolToCmlUnitStr(e.yUnits)),
                        e.shape && (t.peakShape = u.kekulePeakShapeToCml(e.shape)),
                        e.multiplicity && (t.peakMultiplicity = u.kekulePeakMultiplicityToCml(e.multiplicity)),
                        e.assignments && e.assignments.length)
                    ) {
                        var l = [],
                            c = [];
                        for (n = 0, i = e.assignments.length; n < i; ++n) {
                            var d = e.assignments[n],
                                p =
                                    d instanceof Kekule.AbstractAtom
                                        ? l
                                        : d instanceof Kekule.ChemStructureConnector
                                        ? c
                                        : null;
                            if (p) {
                                var f = (d.getId && d.getId()) || this.autoIdentifyForObj(d);
                                f && p.push(f);
                            }
                        }
                        l.length && (t.atomRefs = l.join(" ")), c.length && (t.bondRefs = c.join(" "));
                    }
                    return t;
                },
            })),
            (Kekule.IO.CmlSpectrumPeakStructureReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumPeakStructureReader",
                doReadElement: function (e, t, a, r) {
                    for (
                        var n = {},
                            i = Kekule.IO.CmlDomUtils.fetchCmlElemAttributeValuesToJson(
                                e,
                                null,
                                !0,
                                this.getDomHelper()
                            ),
                            o = Kekule.ObjUtils.getOwnedFieldNames(i),
                            s = 0,
                            l = o.length;
                        s < l;
                        ++s
                    ) {
                        var u = o[s],
                            c = u.toLowerCase(),
                            d = i[u];
                        Kekule.IO.CML.ATOMS_REF_ATTRIBS.indexOf(u) >= 0 ||
                            Kekule.IO.CML.BONDS_REF_ATTRIBS.indexOf(u) >= 0 ||
                            ("units" === c
                                ? (n.unit =
                                      Kekule.IO.CmlUtils.cmlUnitStrToMetricsUnitSymbol(d) ||
                                      Kekule.IO.CmlUtils.getCmlNsValueLocalPart(d))
                                : (n[u] = d));
                    }
                    return n;
                },
            })),
            (Kekule.IO.CmlSpectrumPeakStructureWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumPeakStructureWriter",
                doCreateElem: function (e, t) {
                    return this.createChildElem("peakStructure", t);
                },
                doWriteObject: function (e, t, a) {
                    for (
                        var i = this.getDomHelper(), o = Kekule.ObjUtils.getOwnedFieldNames(e), s = 0, l = o.length;
                        s < l;
                        ++s
                    ) {
                        var u = o[s],
                            c = e[u];
                        "unit" === u && (c = r.metricsUnitSymbolToCmlUnitStr(c)), n.setCmlElemAttribute(t, u, c, i);
                    }
                    return t;
                },
            })),
            (Kekule.IO.CmlSpectrumDataAxisReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumDataAxisReader",
                initProperties: function () {
                    this.defineProp("axisSymbol", { dataType: DataType.STRING, serializable: !1 }),
                        this.defineProp("childArrayObj", { dataType: DataType.OBJECT, serializable: !1 });
                },
                doReadElement: function (e, t, r, n) {
                    var i = a.getLocalName(e).toLowerCase(),
                        o = i.indexOf("axis"),
                        s = i.substring(0, o),
                        l = a.getSameNSAttributeValue(e, "multiplierToData", this.getDomHelper());
                    l && (l = parseFloat(l)),
                        this.setAxisSymbol(s),
                        this.tryApplySuper("doReadElement", [e, t, r]),
                        this.iterateChildElements(e, t, r);
                    var u = { symbol: this.getAxisSymbol(), array: this.getChildArrayObj() };
                    return l && (u.dataMultiplier = l), u;
                },
                doReadChildElement: function (e, t, r) {
                    if ("array" !== a.getLocalName(e).toLowerCase())
                        return this.tryApplySuper("doReadChildElement", [e, t, r]);
                    var n = this.doGetChildElementReader(e);
                    if (n) {
                        n.setExpandSteppedArray && n.setExpandSteppedArray(!1),
                            n.setDefaultItemDataType && n.setDefaultItemDataType("xsd:float");
                        var i = n.readElement(e, t, r);
                        i && this.setChildArrayObj(i);
                    }
                },
            })),
            (Kekule.IO.CmlSpectrumDataReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumDataReader",
                doReadElement: function (e, t, a, r) {
                    if (t instanceof Kekule.Spectroscopy.Spectrum) {
                        var n = new Kekule.Spectroscopy.SpectrumDataSection();
                        t.appendDataSection(n);
                        var i = this.iterateChildElements(e, t, a);
                        return this._handleChildResults(i, n), n;
                    }
                },
                _handleChildResults: function (e, t) {
                    for (var r = [], n = 0, i = e.length; n < i; ++n) {
                        var o = e[n],
                            s = o.element;
                        a.getLocalName(s).toLowerCase().indexOf("axis") >= 0 &&
                            ("x" === o.result.symbol.toLowerCase() ? r.unshift(o.result) : r.push(o.result));
                    }
                    r.length >= 2 && this._fillSpectrumData(r, t);
                },
                _fillSpectrumData: function (e, t) {
                    for (
                        var a = t.getParentSpectrum(), r = a.getData(), n = 0, i = [], o = 0, s = e.length;
                        o < s;
                        ++o
                    ) {
                        var l = 0 === o,
                            u = this._getAxisVarDefParams(e[o], l);
                        i.push(u);
                        var c = e[o].array.size || (e[o].array.values && e[o].array.values.length);
                        c > n && (n = c);
                    }
                    var d = this._addSpectrumDataVarDefs(i, r, a);
                    t.setLocalVarSymbols(d), this._setDataSectionLocalVarInfos(i, t);
                    for (o = 0; o < n; ++o) {
                        for (var p = [], f = 0, m = e.length; f < m; ++f) {
                            var h = e[f].dataMultiplier || 1,
                                S = e[f].array.values;
                            S ? p.push(S[o] * h) : p.push(void 0);
                        }
                        t.appendData(p);
                    }
                    t.setDataSorted(!0);
                },
                _getAxisVarDefParams: function (e, a) {
                    for (
                        var r = e.symbol,
                            n = {
                                symbol: r,
                                dependency: a ? Kekule.VarDependency.INDEPENDENT : Kekule.VarDependency.DEPENDENT,
                            },
                            i = {},
                            o = e.array,
                            s = t.getOwnedFieldNames(o),
                            l = !1,
                            u = 0,
                            c = s.length;
                        u < c;
                        ++u
                    ) {
                        var d = s[u].toLowerCase(),
                            p = o[s[u]];
                        "unit" === d || "units" === d
                            ? ((n.unit = Kekule.IO.CmlUtils.cmlUnitStrToMetricsUnitSymbol(p)),
                              n.unit ||
                                  n.displayLabel ||
                                  (n.displayLabel = Kekule.IO.CmlUtils.getCmlNsValueLocalPart(p)))
                            : "title" === d
                            ? (n.name = p)
                            : "start" === d ||
                              "end" === d ||
                              "size" === d ||
                              "stepsize" === d ||
                              "value" === d ||
                              "values" === d ||
                              "datatype" === d ||
                              ((i[s[u]] = p), (l = !0));
                    }
                    var f;
                    return (
                        !o.values &&
                            Kekule.ObjUtils.notUnset(o.start) &&
                            Kekule.ObjUtils.notUnset(o.end) &&
                            (f = { start: o.start, end: o.end }),
                        { symbol: r, initParams: n, continuousInfo: f, hasExtraInfo: l, extraInfo: i }
                    );
                },
                _addSpectrumDataVarDefs: function (e, t, a) {
                    for (var r = [], n = 0, i = e.length; n < i; ++n) {
                        var o = e[n].initParams,
                            s = Kekule.IO.CmlSpectUtils.getSpectrumVarDef(a, o.symbol, o.unit, o.name, o.dependency);
                        s && !s.getDisplayLabel() && o.displayLabel && s.setDisplayLabel(o.displayLabel),
                            s || ((s = new Kekule.Spectroscopy.SpectrumVarDefinition(o)), t.appendVariable(s)),
                            r.push(s.getSymbol());
                    }
                    return r;
                },
                _setDataSectionLocalVarInfos: function (e, t) {
                    for (var a = 0, r = e.length; a < r; ++a) {
                        var n = e[a],
                            i = n.symbol,
                            o = n.continuousInfo;
                        if ((o && t.setContinuousVarRange(i, o.start, o.end), n.hasExtraInfo)) {
                            var s = n.extraInfo,
                                l = Kekule.ObjUtils.getOwnedFieldNames(s);
                            for (a = 0, r = l.length; a < r; ++a) t.setLocalVarInfoValue(i, l[a], s[l[a]]);
                        }
                    }
                },
            })),
            (Kekule.IO.CmlSpectrumDataWriter = Class.create(Kekule.IO.CmlSpectrumDataSectionBaseWriter, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumDataWriter",
                doCreateElem: function (e, t) {
                    return this.createChildElem("spectrumData", t);
                },
                doWriteObject: function (e, t, a) {
                    return this.writeSpectrumData(e, t, a);
                },
                writeSpectrumData: function (e, t, a) {
                    var r = this.getSpectrumDataSectionVarInfos(e);
                    if (r.varCount < 2);
                    else {
                        for (var n = ["independent", "dependent"], i = [], o = 0, s = n.length; o < s; ++o) {
                            var l = n[o],
                                c = "independent" === l,
                                d = {
                                    _tagName: c ? "xaxis" : "yaxis",
                                    varSymbol: r[l].symbol,
                                    unit: r[l].unitSymbol,
                                    title: r[l].name,
                                    dataType: DataType.FLOAT,
                                    size: DataType.count || e.getDataCount(),
                                },
                                p = r[l].range;
                            p ? ((d.start = p.fromValue), (d.end = p.toValue), (d.isContinuous = !0)) : (d.values = []),
                                (d = this._prepareUnitConversionInfoForArrayObj(d, c, e, a)),
                                i.push(d);
                        }
                        var f = (a && a.spectrumDataValueOutputPrecisionCount) || 0;
                        e.forEach(function (e, t) {
                            for (var a = 0, r = i.length; a < r; ++a) {
                                var n = i[a]._originUnitObj && i[a]._unitObj;
                                if (!i[a].isContinuous) {
                                    var o = e[i[a].varSymbol] || 0;
                                    n && (o = i[a]._originUnitObj.convertValueTo(o, i[a]._unitObj)),
                                        i[a].values.push(u.floatToCmlString(o, f));
                                }
                            }
                        });
                        var m = this.doGetChildObjectWriter(DataType.ARRAY, e, this);
                        if (m)
                            for (o = 0, s = i.length; o < s; ++o) {
                                d = i[o];
                                var h = this.createChildElem(d._tagName, t);
                                m.writeObject(d, h, a);
                            }
                    }
                },
                _prepareUnitConversionInfoForArrayObj: function (e, t, a, r) {
                    var n = a.getParentSpectrum();
                    if (
                        t &&
                        n &&
                        n.getSpectrumType() === Kekule.Spectroscopy.SpectrumType.NMR &&
                        r.autoConvertNmrDataFreqToUnit
                    ) {
                        var i = e.unit && Kekule.Unit.getUnit(e.unit),
                            o = Kekule.Unit.getUnit(r.autoConvertNmrDataFreqToUnit);
                        i &&
                            o &&
                            i.category === o.category &&
                            i !== o &&
                            ((e.unit = r.autoConvertNmrDataFreqToUnit),
                            (e._originUnitObj = i),
                            (e._unitObj = o),
                            e.start && (e.start = i.convertValueTo(e.start, o)),
                            e.end && (e.end = i.convertValueTo(e.end, o)));
                    }
                    return e;
                },
            })),
            (Kekule.IO.CmlSpectrumReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumReader",
                initialize: function () {
                    this.tryApplySuper("initialize"), (this._spectrumWithRefMolecules = []);
                },
                initProperties: function () {
                    this.defineProp("convention", { dataType: DataType.STRING, serializable: !1 }),
                        this.defineProp("additionalRefMolecules", { dataType: DataType.ARRAY, serializable: !1 });
                },
                doFinalize: function () {
                    (this._spectrumWithRefMolecules = null),
                        this.setPropStoreFieldValue("additionalRefMolecules", null),
                        this.tryApplySuper("doFinalize");
                },
                readElement: function (t, a, r, n) {
                    this.setAdditionalRefMolecules([]);
                    var i = this.tryApplySuper("readElement", [t, a, r, n]),
                        o = this.getAdditionalRefMolecules();
                    if (o.length) {
                        var s = e.clone(o);
                        s.push(i);
                        var l = this._createChildObjsHolder(s, n.defaultRootObjListHolder);
                        return i.setRefMolecules(o), l;
                    }
                    return i;
                },
                doReadElement: function (e, t, a, r) {
                    return this.readSpectrum(e, this.getDomHelper(), r);
                },
                doReadChildElement: function (e, t, r) {
                    var n = a.getLocalName(e).toLowerCase();
                    return this._isInfoListElemTagName(n)
                        ? this.tryApplySuper("doReadChildElement", [e, null, r])
                        : this.tryApplySuper("doReadChildElement", [e, t, r]);
                },
                doDoneReadingDocument: function () {
                    for (var e = this._spectrumWithRefMolecules, t = 0, a = e.length; t < a; ++t) {
                        for (
                            var r = e[t],
                                n = r.getOwner(),
                                i = r[Kekule.IO.CML.SPECTRUM_OBJREF_FIELDNAME] || [],
                                o = [],
                                s = 0,
                                l = i.length;
                            s < l;
                            ++s
                        ) {
                            var u = i[s].trim();
                            if (u) {
                                var c = this.getLoadedObjById(u) || (n && n.getObjById && n.getObjById(u));
                                c && o.push(c);
                            }
                        }
                        o.length && r.setRefMolecules(o), delete r[Kekule.IO.CML.SPECTRUM_OBJREF_FIELDNAME];
                    }
                    this._spectrumWithRefMolecules = [];
                },
                _isInfoListElemTagName: function (e) {
                    return ["metadatalist", "parameterlist", "conditionlist", "substancelist"].indexOf(e) >= 0;
                },
                readSpectrum: function (e, t, a) {
                    var r = new Kekule.Spectroscopy.Spectrum();
                    this.readSpectrumAttribs(r, e, t);
                    var n = this;
                    this.iterateChildElements(e, r, this, function (e, t) {
                        n._handleChildResult(e, t, r, a);
                    });
                    return r;
                },
                readSpectrumAttribs: function (e, t, a) {
                    for (
                        var r = Kekule.IO.CmlDomUtils.fetchCmlElemAttributeValuesToJson(t, null, !0, a),
                            n = Kekule.ObjUtils.getOwnedFieldNames(r),
                            i = [],
                            o = 0,
                            s = n.length;
                        o < s;
                        ++o
                    ) {
                        var l = n[o],
                            u = r[l];
                        switch ((Kekule.IO.CML.MOL_REF_ATTRIBS.indexOf(l) >= 0 && i.push((u || "").trim()), l)) {
                            case "id":
                                this.setObjId(e, u);
                                break;
                            case "title":
                                e.setTitle(u);
                                break;
                            case "type":
                                var c = Kekule.IO.CmlSpectUtils.cmlSpectrumTypeToKekule(u);
                                e.setSpectrumType(c);
                                break;
                            case "convention":
                                this.setConvention(u);
                                break;
                            default:
                                e.setInfoValue(l, u);
                        }
                    }
                    if (i.length) {
                        var d = i.join(" ").split(/\s/);
                        (e[Kekule.IO.CML.SPECTRUM_OBJREF_FIELDNAME] = d), this._spectrumWithRefMolecules.push(e);
                    }
                },
                _handleChildResult: function (e, t, r, n) {
                    var i = a.getLocalName(e).toLowerCase();
                    "spectrumdata" === i ||
                        "peaklist" === i ||
                        ("sample" === i && n.enableExtractSampleInsideSpectrum
                            ? this._handleSampleData(t, r, n)
                            : this._isInfoListElemTagName(i) && this._handleInfoData(i, t, r));
                },
                _handleSampleData: function (e, t, a) {
                    for (var r = [], n = 0, i = e.length; n < i; ++n) {
                        var o = e[n];
                        o instanceof Kekule.Molecule &&
                            (r.push(o), a.autoHideSampleInsideSpectrum && o.setVisible && o.setVisible(!1));
                    }
                    r.length && this.setAdditionalRefMolecules(this.getAdditionalRefMolecules().concat(r));
                },
                _handleInfoData: function (e, t, a) {
                    for (
                        var r = function (e, t, r, n) {
                                if ("metadatalist" === n) {
                                    var i = r.metadataType;
                                    i === l.ANNOTATION_METATYPE
                                        ? a.setAnnotation(e, t)
                                        : i === l.INFO_METATYPE
                                        ? a.setInfoValue(e, t)
                                        : a.setMeta(e, t);
                                }
                            },
                            n = (function (e, t) {
                                var a = null;
                                return (
                                    "metadatalist" === e
                                        ? (a = null)
                                        : "parameterlist" === e
                                        ? (a = t.setParameter)
                                        : "conditionlist" === e
                                        ? (a = t.setCondition)
                                        : "substancelist" === e || (a = t.setAnnotation),
                                    a
                                );
                            })(e, a),
                            i = 0,
                            o = t.length;
                        i < o;
                        ++i
                    ) {
                        var s,
                            u,
                            c = n,
                            d = t[i];
                        if (d.key) (s = d.key), (u = d.value);
                        else if (d instanceof Kekule.Scalar) {
                            (s = d.getInfoValue("dictRef") || d.getName()), (u = d);
                        }
                        if (s) {
                            var p = this.getPrefixForNamespaceUri(l.JCAMP_NAMESPACE_URI) || null,
                                f = a.getSpectrumType(),
                                m = this._convertCmlSpectrumInfoKey(s, f, p);
                            this._processCmlSpectrumInfoItem(s, m, u, d, a, e) ||
                                (c ? c.apply(a, [m, u]) : r(m, u, d, e));
                        }
                    }
                },
                _convertCmlSpectrumInfoKey: function (e, t, a) {
                    return u.cmlSpectrumInfoDataKeyToKekule(e, t, a);
                },
                _processCmlSpectrumInfoItem: function (e, t, a, r, n, i) {
                    if ("NMR.ObserveFrequency" === t) {
                        if (a instanceof Kekule.Scalar) {
                            var o = a.getValue(),
                                s = a.getUnit();
                            if (s && s === Kekule.Unit.Frequency.HERTZ.symbol)
                                return (
                                    Kekule.UnitUtils.convertValue(o, s, Kekule.Unit.Frequency.MEGAHERTZ) < 1 &&
                                        a.setUnit(Kekule.Unit.Frequency.MEGAHERTZ.symbol),
                                    n.setParameter(t, a),
                                    !0
                                );
                        }
                    } else if ("NMR.ObserveNucleus" === t && "string" == typeof a) {
                        var l =
                            a.indexOf("C") >= 0 && a.indexOf("13") >= 0
                                ? Kekule.Spectroscopy.SpectrumNMR.TargetNucleus.C13
                                : Kekule.Spectroscopy.SpectrumNMR.TargetNucleus.H;
                        return n.setParameter(t, l), !0;
                    }
                    return !1;
                },
            })),
            (Kekule.IO.CmlSpectrumWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlSpectrumWriter",
                initProperties: function () {
                    this.defineProp("convention", { dataType: DataType.STRING, serializable: !1 });
                },
                doCreateElem: function (e, t) {
                    return this.createChildElem("spectrum", t);
                },
                doWriteObject: function (e, t, a) {
                    var r = this.getSpectNamespaces();
                    return (
                        this.addNamespaces(t.ownerDocument, r),
                        this._addSchemaLocation(t.ownerDocument.documentElement),
                        this.writeSpectrum(e, t, a)
                    );
                },
                getObjInfoKeysNeedToSaveToMetaList: function (t) {
                    var a = this.tryApplySuper("getObjInfoKeysNeedToSaveToMetaList", [t]);
                    return a && (a = e.exclude(a, ["metaData", "parameters", "conditions", "annotations"])), a;
                },
                doWriteObjInfoValueItem: function (e, t, a, r, n) {
                    return this.writeObjMetaValueToListElem(a, e, t, l.INFO_METATYPE, r);
                },
                writeSpectrum: function (e, t, a) {
                    this.writeSpectrumAttribs(e, t, a),
                        this.writeSpectrumInfoLists(e, t, a),
                        this.writeSpectrumDataSections(e, t, a);
                },
                writeSpectrumAttribs: function (e, t) {
                    var a = [],
                        r = e.getTitle();
                    r && a.push({ key: "title", value: r });
                    var n = Kekule.IO.CmlSpectUtils.kekuleSpectrumTypeToCml(e.getSpectrumType() || "");
                    n && a.push({ key: "type", value: n });
                    for (var i = 0, o = a.length; i < o; ++i)
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(t, a[i].key, a[i].value, this.getDomHelper());
                    var s = e.getRefMolecules();
                    if (s && s.length) {
                        var l = [];
                        for (i = 0, o = s.length; i < o; ++i) {
                            var u = s[i],
                                c = u && u.getId && u.getId();
                            c || (c = this.autoIdentifyForObj(u)), c && l.push(c);
                        }
                        if (l.length) {
                            var d = l.length > 1 ? Kekule.IO.CML.MOL_REF_ATTRIBS[1] : Kekule.IO.CML.MOL_REF_ATTRIBS[0];
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(t, d, l.join(" "), this.getDomHelper());
                        }
                    }
                },
                writeSpectrumInfoLists: function (e, t, a) {
                    for (
                        var r = this.getDomHelper(),
                            n = e.getSpectrumInfoCategories(),
                            i = this._getSpectrumInfoProcessors(),
                            o = e.getSpectrumType(),
                            s = this.getPrefixForNamespaceUri(l.JCAMP_NAMESPACE_URI) || null,
                            u = 0,
                            c = n.length;
                        u < c;
                        ++u
                    ) {
                        var d,
                            p = n[u],
                            f = i[p];
                        if (f && f.listElemGetter && f.infoWriter && (d = f.listElemGetter.apply(this, [t, r])))
                            for (var m = e.getSpectrumInfoKeysOfCategory(p), h = 0, S = m.length; h < S; ++h) {
                                var A = m[h],
                                    T = e.getSpectrumInfoValue(A, p);
                                "NMR.ObserveFrequency" === A &&
                                    T instanceof Kekule.Scalar &&
                                    a.autoConvertNmrDataFreqToUnit &&
                                    (T = this._convertScalarUnit(T, a.autoConvertNmrDataFreqToUnit)),
                                    Kekule.ObjUtils.notUnset(T) &&
                                        f.infoWriter.apply(this, [
                                            e,
                                            Kekule.IO.CmlSpectUtils.kekuleSpectrumInfoDataKeyToCml(A, o, s),
                                            T,
                                            d,
                                            a,
                                        ]);
                            }
                    }
                },
                _convertScalarUnit: function (e, t) {
                    var a = e.getUnit(),
                        r = e.getValue();
                    if (r) {
                        var n = Kekule.Unit.getUnit(a),
                            i = Kekule.Unit.getUnit(t);
                        if (n && i && n.category === i.category && n !== i) {
                            var o = e.clone();
                            return o.setUnit(t), o.setValue(n.convertValueTo(r, i)), o;
                        }
                    }
                    return e;
                },
                _getSpectrumInfoProcessors: function () {
                    return {
                        metaData: {
                            listElemGetter: this._spectrumInfoListElemGetter.bind(this, "metaDataList"),
                            infoWriter: this._writeSpectrumMeta,
                        },
                        annotations: {
                            listElemGetter: this._spectrumInfoListElemGetter.bind(this, "metaDataList"),
                            infoWriter: this._writeSpectrumAnnotation,
                        },
                        conditions: {
                            listElemGetter: this._spectrumInfoListElemGetter.bind(this, "conditionList"),
                            infoWriter: this._writeSpectrumCondition,
                        },
                        parameters: {
                            listElemGetter: this._spectrumInfoListElemGetter.bind(this, "parameterList"),
                            infoWriter: this._writeSpectrumParameter,
                        },
                    };
                },
                _spectrumInfoListElemGetter: function (e, t, a) {
                    var r = a.getElementsByTagNameNS(this.getCoreNamespaceURI(), e, t)[0];
                    return r || (r = this.createChildElem(e, t)), r;
                },
                _writeSpectrumMeta: function (e, t, a, r, n) {
                    this.writeObjMetaValueToListElem(e, t, a, null, r, null, n);
                },
                _writeSpectrumAnnotation: function (e, t, a, r, n) {
                    this.writeObjMetaValueToListElem(e, t, a, l.ANNOTATION_METATYPE, r, null, n);
                },
                _writeSpectrumCondition: function (e, t, a, r, n) {
                    if (a instanceof ObjectEx) {
                        var i = this.doGetChildObjectWriter(a, e, this);
                        i && i.writeObject(a, r, n);
                    } else this.writeObjMetaValueToListElem(e, t, a, null, r, null, n);
                },
                _writeSpectrumParameter: function (e, t, a, r, n) {
                    var i = this.createChildElem("parameter", r);
                    if ((i.setAttribute("dictRef", t), DataType.isSimpleValue(a)))
                        i.setAttribute("value", DataType.StringUtils.serializeValue(a));
                    else if (DataType.isObjectExValue(a)) {
                        var o = this.doGetChildObjectWriter(a, e, this);
                        o && o.writeObject(a, i, n);
                    }
                },
                writeSpectrumDataSections: function (e, t, a) {
                    for (var r = 0, n = e.getDataSectionCount(); r < n; ++r) {
                        var i = e.getDataSectionAt(r),
                            o = this.createDataSectionWriter(i);
                        o && o.writeObject(i, t, a);
                    }
                },
                createDataSectionWriter: function (e) {
                    var t =
                            e.getMode() === Kekule.Spectroscopy.DataMode.PEAK
                                ? Kekule.IO.CmlSpectrumPeakListWriter
                                : Kekule.IO.CmlSpectrumDataWriter,
                        a = t && new t();
                    return a && (this.copySettingsToChildHandler(a), this._appendChildHandler(a)), a;
                },
                getSpectNamespaces: function () {
                    var e = function (e, t) {
                        return { prefix: e, namespaceURI: t };
                    };
                    return [
                        e(l.XML_SCHEMA_INSTANCE_NAMESPACE_DEF_PREFIX, l.XML_SCHEMA_INSTANCE_NAMESPACE_URI),
                        e(l.SI_UNITS_NAMESPACE_DEF_PREFIX, l.SI_UNITS_NAMESPACE_URI),
                        e(l.UNITS_NAMESPACE_DEF_PREFIX, l.UNITS_NAMESPACE_URI),
                        e(l.JSPECVIEW_NAMESPACE_DEF_PREFIX, l.JSPECVIEW_NAMESPACE_URI),
                        e(l.JCAMP_NAMESPACE_DEF_PREFIX, l.JCAMP_NAMESPACE_URI),
                        e(l.JCAMP_UNITS_NAMESPACE_DEF_PREFIX, l.JCAMP_UNITS_NAMESPACE_URI),
                        e(l.CML_DICT_NAMESPACE_DEF_PREFIX, l.CML_DICT_NAMESPACE_URI),
                    ];
                },
                _addSchemaLocation: function (e) {
                    this.getDomHelper().setAttributeNS(
                        l.XML_SCHEMA_INSTANCE_NAMESPACE_URI,
                        l.CMLSPECT_SCHEMA_LOCATIONS_ATTRIBNAME,
                        l.CMLSPECT_SCHEMA_LOCATIONS.join("    "),
                        e
                    );
                },
            })),
            Kekule.Spectroscopy.MetaPropNamespace.register("cml");
        var c = Kekule.IO.CmlElementReaderFactory;
        c.register("spectrum", Kekule.IO.CmlSpectrumReader),
            c.register("peakList", Kekule.IO.CmlSpectrumPeakListReader),
            c.register("peak", Kekule.IO.CmlSpectrumPeakReader),
            c.register("peakStructure", Kekule.IO.CmlSpectrumPeakStructureReader),
            c.register("spectrumData", Kekule.IO.CmlSpectrumDataReader),
            c.register(["parameterList", "substanceList"], Kekule.IO.CmlBaseListReader),
            c.register("sample", Kekule.IO.CmlSampleReader),
            c.register(["xaxis", "yaxis"], Kekule.IO.CmlSpectrumDataAxisReader),
            Kekule.IO.CmlElementWriterFactory.register("Kekule.Spectroscopy.Spectrum", Kekule.IO.CmlSpectrumWriter);
        var d = Kekule.IO.DataFormatsManager.findFormatId(Kekule.IO.MimeType.CML);
        Kekule.IO.ChemDataWriterManager.register("cml", Kekule.IO.CmlWriter, [Kekule.Spectroscopy.Spectrum], [d]);
    })(),
    (function () {
        "use strict";
        Kekule._registerAfterLoadSysProc(function () {
            if (Kekule.Render && Kekule.Render.ChemObj2DRenderer) {
                Kekule.globalOptions.add("render.spectrum", { continuousSpectrumResampleRatio: 1 });
                var e = Kekule.CoordUtils,
                    t = Kekule.ArrayUtils;
                (Kekule.Render.SpectrumDisplayConfigs = Class.create(Kekule.AbstractConfigs, {
                    CLASS_NAME: "Kekule.Render.SpectrumDisplayConfigs",
                    initProperties: function () {
                        this.addHashConfigProp("defSize2DRatio"),
                            this.addBoolConfigProp("reversedAxises", !1),
                            this.addBoolConfigProp("reverseIndependentDataDirection", !1),
                            this.addBoolConfigProp("reverseDependentDataDirection", !1),
                            this.addBoolConfigProp("reverseIndependentAxisAlign", !1),
                            this.addBoolConfigProp("reverseDependentAxisAlign", !1),
                            this.addStrConfigProp("dataColor", "#000000"),
                            this.addFloatConfigProp("dataStrokeWidthRatio", 0.025),
                            this.addFloatConfigProp("dataStrokeWidthMin", 1),
                            this.addFloatConfigProp("dataStrokeWidthMax", void 0),
                            this.addFloatConfigProp("dataStrokeWidthFixed", void 0),
                            this.addFloatConfigProp("visibleIndependentDataRangeFrom", 0),
                            this.addFloatConfigProp("visibleIndependentDataRangeTo", 1),
                            this.addFloatConfigProp("visibleDependentDataRangeFrom", -0.05),
                            this.addFloatConfigProp("visibleDependentDataRangeTo", 1.05),
                            this.addFloatConfigProp("visibleIndependentDataRangeFrom_Peak", -0.05),
                            this.addFloatConfigProp("visibleIndependentDataRangeTo_Peak", 1.05),
                            this.addFloatConfigProp("visibleDependentDataRangeFrom_Peak", -0.05),
                            this.addFloatConfigProp("visibleDependentDataRangeTo_Peak", 1.05),
                            this.addFloatConfigProp("visibleIndependentDataRangeFrom_Continuous", 0),
                            this.addFloatConfigProp("visibleIndependentDataRangeTo_Continuous", 1),
                            this.addFloatConfigProp("visibleDependentDataRangeFrom_Continuous", -0.05),
                            this.addFloatConfigProp("visibleDependentDataRangeTo_Continuous", 1.05),
                            this.addBoolConfigProp("displayIndependentAxis", !0),
                            this.addBoolConfigProp("displayIndependentAxisScales", !0),
                            this.addBoolConfigProp("displayIndependentAxisLabel", !0),
                            this.addBoolConfigProp("displayIndependentAxisUnit", !0),
                            this.addBoolConfigProp("displayDependentAxis", !0),
                            this.addBoolConfigProp("displayDependentAxisScales", !0),
                            this.addBoolConfigProp("displayDependentAxisLabel", !0),
                            this.addBoolConfigProp("displayDependentAxisUnit", !0),
                            this.addBoolConfigProp("displaySpectrum", !0),
                            this.addStrConfigProp("axisScaleLabelFontFamily", "Arial, Helvetica, sans-serif"),
                            this.addFloatConfigProp("axisScaleLabelFontSize", 7),
                            this.addStrConfigProp("axisScaleLabelColor", "#000000"),
                            this.addStrConfigProp("axisLabelFontFamily", "Arial, Helvetica, sans-serif"),
                            this.addFloatConfigProp("axisLabelFontSize", 10),
                            this.addStrConfigProp("axisLabelColor", "#000000"),
                            this.addStrConfigProp("axisColor", "#000000"),
                            this.addFloatConfigProp("axisWidthRatio", 0.025),
                            this.addFloatConfigProp("axisWidthMin", 1),
                            this.addFloatConfigProp("axisWidthMax", void 0),
                            this.addFloatConfigProp("axisWidthFixed", void 0),
                            this.addFloatConfigProp("axisScaleMarkSizeRatio", 0.1),
                            this.addFloatConfigProp("axisScaleMarkSizeMin", 3),
                            this.addFloatConfigProp("axisScaleMarkSizeMax", void 0),
                            this.addFloatConfigProp("axisScaleMarkSizeFixed", void 0),
                            this.addFloatConfigProp("axisUnlabeledScaleSizeRatio", 0.7),
                            this.addIntConfigProp("axisScaleMarkPreferredCount", 10),
                            this.addFloatConfigProp("axisLabelPaddingRatio", 0.02),
                            this.addFloatConfigProp("axisScaleLabelPaddingRatio", 0.02);
                    },
                    initPropDefValues: function () {
                        this.tryApplySuper("initPropDefValues"), this.setDefSize2DRatio({ x: 12, y: 8 });
                    },
                    doGetPropNameToHashPrefix: function () {
                        return "spectrum_";
                    },
                })),
                    ClassEx.extendMethod(Kekule.Render.Render2DConfigs, "initProperties", function (e) {
                        e(), this.addConfigProp("spectrumDisplayConfigs", "Kekule.Render.SpectrumDisplayConfigs");
                    }),
                    ClassEx.extendMethod(Kekule.Render.Render2DConfigs, "initPropDefValues", function (e) {
                        e(),
                            this.setPropStoreFieldValue(
                                "spectrumDisplayConfigs",
                                new Kekule.Render.SpectrumDisplayConfigs()
                            );
                    }),
                    ClassEx.extendMethod(Kekule.Spectroscopy.Spectrum, "initPropValues", function (t) {
                        t();
                        var a = this.getSize2D();
                        if (!a) {
                            var r = Kekule.Render.Render2DConfigs.getInstance(),
                                n = r.getSpectrumDisplayConfigs().getDefSize2DRatio(),
                                i = r.getLengthConfigs().getDefScaleRefLength();
                            n && i && (a = e.multiply(n, i)), this.setSize2D(a);
                        }
                    }),
                    ClassEx.extendMethod(Kekule.Spectroscopy.Spectrum, "doGetObjAnchorPosition", function (e, t) {
                        return Kekule.ObjAnchorPosition.CENTER;
                    }),
                    ClassEx.extend(Kekule.Spectroscopy.Spectrum, {
                        getDisplayedDataSections: function () {
                            return [this.getActiveDataSection()];
                        },
                        getPseudoRenderSubObject: function (e, t) {
                            var a = this.__$subRenderObjs$__;
                            a || ((a = {}), (this.__$subRenderObjs$__ = a));
                            var r = a[e];
                            return r || t || ((r = { parent: this }), (a[e] = r)), r;
                        },
                        isChildPseudoRenderSubObject: function (e) {
                            return this.__$subRenderObjs$__ && this.__$subRenderObjs$__.indexOf(e) >= 0;
                        },
                        getDataItemOverridenRenderOptions: function (e) {
                            for (var t = 0, a = this.getDataSectionCount(); t < a; ++t) {
                                var r = this.getDataSectionAt(t);
                                if (r.indexOfDataItem(e) >= 0) return r.getDataItemOverridenRenderOptions(e);
                            }
                            return null;
                        },
                        setDataItemRenderOptions: function (e, t) {
                            for (var a = 0, r = this.getDataSectionCount(); a < r; ++a) {
                                var n = this.getDataSectionAt(a);
                                n.indexOfDataItem(e) >= 0 && n.setDataItemRenderOptions(e, t);
                            }
                        },
                        setDataItemOverrideRenderOptions: function (e, t) {
                            for (var a = 0, r = this.getDataSectionCount(); a < r; ++a) {
                                var n = this.getDataSectionAt(a);
                                n.indexOfDataItem(e) >= 0 && n.setDataItemOverrideRenderOptions(e, t);
                            }
                        },
                        addDataItemOverrideRenderOptionItem: function (e, t) {
                            for (var a = 0, r = this.getDataSectionCount(); a < r; ++a) {
                                var n = this.getDataSectionAt(a);
                                n.indexOfDataItem(e) >= 0 && n.addDataItemOverrideRenderOptionItem(e, t);
                            }
                        },
                        removeDataItemOverrideRenderOptionItem: function (e, t) {
                            for (var a = 0, r = this.getDataSectionCount(); a < r; ++a) {
                                var n = this.getDataSectionAt(a);
                                n.indexOfDataItem(e) >= 0 && n.removeDataItemOverrideRenderOptionItem(e, t);
                            }
                        },
                    }),
                    ClassEx.extend(Kekule.Spectroscopy.SpectrumDataSection, {
                        _getDataItemSpecifiedRenderOptions: function (e, t) {
                            var a = this.getExtraInfoOf(e);
                            if ((a || (a = this.createDefaultExtraInfoObjectFor(e)), a))
                                return a instanceof ObjectEx && a.hasProperty(t) ? a.getPropValue(t) : a[t];
                        },
                        _setDataItemSpecifiedRenderOptions: function (e, t, a) {
                            var r = this.getExtraInfoOf(e);
                            r || (r = this.createDefaultExtraInfoObjectFor(e)),
                                r && (r instanceof ObjectEx && r.hasProperty(t) ? r.setPropValue(t, a) : (r[t] = a));
                        },
                        getDataItemRenderOptions: function (e) {
                            return this._getDataItemSpecifiedRenderOptions(e, "renderOptions");
                        },
                        setDataItemRenderOptions: function (e, t) {
                            return this._setDataItemSpecifiedRenderOptions(e, "renderOptions", t);
                        },
                        getDataItemOverrideRenderOptionItems: function (e) {
                            return this._getDataItemSpecifiedRenderOptions(e, "overrideRenderOptionItems");
                        },
                        setDataItemOverrideRenderOptionItems: function (e, t) {
                            return this._setDataItemSpecifiedRenderOptions(e, "overrideRenderOptionItems", t);
                        },
                        addDataItemOverrideRenderOptionItem: function (e, t) {
                            var a = this.getExtraInfoOf(e);
                            if ((a || (a = this.createDefaultExtraInfoObjectFor(e)), a))
                                if (a.addOverrideRenderOptionItem) a.addOverrideRenderOptionItem(t);
                                else {
                                    var r = this.getDataItemOverrideRenderOptionItems();
                                    if (r) {
                                        var n = r.indexOf(t);
                                        n >= 0 && r.splice(n, 1), r.push(t);
                                    } else (r = [t]), this.setDataItemOverrideRenderOptionItems(e, r);
                                }
                        },
                        removeDataItemOverrideRenderOptionItem: function (e, t) {
                            var a = this.getExtraInfoOf(e);
                            if (a)
                                if (a.removeOverrideRenderOptionItem) a.removeOverrideRenderOptionItem(t);
                                else {
                                    var r = this.getDataItemOverrideRenderOptionItems();
                                    if (r) {
                                        var n = r.indexOf(t);
                                        n >= 0 && r.splice(n, 1);
                                    }
                                }
                        },
                        getDataItemOverridenRenderOptions: function (e) {
                            var t = this.getExtraInfoOf(e);
                            if (t) {
                                if (t.getOverriddenRenderOptions) return t.getOverriddenRenderOptions();
                                for (
                                    var a = t.renderOptions || {},
                                        r = Object.extend({}, a),
                                        n = t.overrideRenderOptionItems || [],
                                        i = 0,
                                        o = n.length;
                                    i < o;
                                    ++i
                                )
                                    r = Object.extend(r, n[i]);
                                return r;
                            }
                            return null;
                        },
                    }),
                    ClassEx.extendMethod(
                        Kekule.Spectroscopy.SpectrumDataSection,
                        "_extractAllExtraInfoOfDataItems",
                        function ($origin) {
                            for (var e = $origin() || [], t = [], a = 0, r = e.length; a < r; ++a) {
                                var n = e[a];
                                if (
                                    n &&
                                    !(n instanceof Kekule.ChemObject) &&
                                    DataType.isObjectValue(n) &&
                                    n.overrideRenderOptions
                                ) {
                                    var i = Object.create(n);
                                    (i.overrideRenderOptions = void 0), t.push(i);
                                } else t.push(n);
                            }
                            return t;
                        }
                    ),
                    Kekule._registerAfterLoadSysProc(function () {
                        var e,
                            a,
                            r,
                            n,
                            i = function (e, a, r, n, i) {
                                for (var o = t.toArray(n), s = i || [""], l = 0, u = o.length; l < u; ++l)
                                    for (var c = 0, d = s.length; c < d; ++c) {
                                        var p = s[c] ? s[c] + a.upperFirst() : a;
                                        e.push({ name: "spectrum_" + p, dataType: r, targetClass: o[l] });
                                    }
                            };
                        if (Kekule.PropertyEditor && Kekule.PropertyEditor.ChemRender2DOptionsEditor) {
                            var o = ClassEx.getPrototype(Kekule.PropertyEditor.ChemRender2DOptionsEditor);
                            o.CHILD_FIELD_INFOS = o.CHILD_FIELD_INFOS.concat(
                                ((e = []),
                                (a = Kekule.Spectroscopy.Spectrum),
                                (r = Kekule.Spectroscopy.SpectrumDataSection),
                                (n = ["", "independent", "dependent"]),
                                i(e, "reversedAxises", DataType.BOOL, a),
                                i(e, "reverseIndependentDataDirection", DataType.BOOL, a),
                                i(e, "reverseDependentDataDirection", DataType.BOOL, a),
                                i(e, "reverseIndependentAxisAlign", DataType.BOOL, a),
                                i(e, "reverseDependentAxisAlign", DataType.BOOL, a),
                                i(e, "dataColor", DataType.STRING, [a, r]),
                                i(e, "dataStrokeWidthRatio", DataType.FLOAT, [a, r]),
                                i(e, "dataStrokeWidthMin", DataType.NUMBER, [a, r]),
                                i(e, "dataStrokeWidthMax", DataType.NUMBER, [a, r]),
                                i(e, "dataStrokeWidthFixed", DataType.NUMBER, [a, r]),
                                i(e, "visibleIndependentDataRangeFrom_Continuous", DataType.FLOAT, a),
                                i(e, "visibleIndependentDataRangeTo_Continuous", DataType.FLOAT, a),
                                i(e, "visibleDependentDataRangeFrom_Continuous", DataType.FLOAT, a),
                                i(e, "visibleDependentDataRangeTo_Continuous", DataType.FLOAT, a),
                                i(e, "visibleIndependentDataRangeFrom_Peak", DataType.FLOAT, a),
                                i(e, "visibleIndependentDataRangeTo_Peak", DataType.FLOAT, a),
                                i(e, "visibleDependentDataRangeFrom_Peak", DataType.FLOAT, a),
                                i(e, "visibleDependentDataRangeTo_Peak", DataType.FLOAT, a),
                                i(e, "displayIndependentAxis", DataType.BOOL, a),
                                i(e, "displayIndependentAxisScales", DataType.BOOL, a),
                                i(e, "displayIndependentAxisLabel", DataType.BOOL, a),
                                i(e, "displayIndependentAxisUnit", DataType.BOOL, a),
                                i(e, "displayDependentAxis", DataType.BOOL, a),
                                i(e, "displayDependentAxisScales", DataType.BOOL, a),
                                i(e, "displayDependentAxisLabel", DataType.BOOL, a),
                                i(e, "displayDependentAxisUnit", DataType.BOOL, a),
                                i(e, "displaySpectrum", DataType.BOOL, a),
                                i(e, "axisScaleLabelFontFamily", DataType.STRING, a, n),
                                i(e, "axisScaleLabelFontSize", DataType.NUMBER, a, n),
                                i(e, "axisScaleLabelColor", DataType.STRING, a, n),
                                i(e, "axisLabelFontFamily", DataType.STRING, a, n),
                                i(e, "axisLabelFontSize", DataType.NUMBER, a, n),
                                i(e, "axisLabelColor", DataType.STRING, a, n),
                                i(e, "axisColor", DataType.STRING, a, n),
                                i(e, "axisWidthRatio", DataType.FLOAT, a, n),
                                i(e, "axisWidthMin", DataType.NUMBER, a, n),
                                i(e, "axisWidthMax", DataType.NUMBER, a, n),
                                i(e, "axisWidthFixed", DataType.NUMBER, a, n),
                                i(e, "axisScaleMarkSizeRatio", DataType.FLOAT, a, n),
                                i(e, "axisScaleMarkSizeMin", DataType.NUMBER, a, n),
                                i(e, "axisScaleMarkSizeMax", DataType.NUMBER, a, n),
                                i(e, "axisScaleMarkSizeFixed", DataType.NUMBER, a, n),
                                i(e, "axisUnlabeledScaleSizeRatio", DataType.FLOAT, a, n),
                                i(e, "axisScaleMarkPreferredCount", DataType.NUMBER, a, n),
                                i(e, "axisLabelPaddingRatio", DataType.FLOAT, a, n),
                                i(e, "axisScaleLabelPaddingRatio", DataType.NUMBER, a, n),
                                e)
                            );
                        }
                    }),
                    (Kekule.Render.CoordAxisRender2DUtils = {
                        drawAxises: function (e, t, r, n, i, o) {
                            var s = function (e, t, a, r) {
                                    for (
                                        var n = Kekule.Render.RichTextUtils,
                                            i = [],
                                            o = r ? Math.round(Math.log10(a)) : null,
                                            s = 0,
                                            l = e.length;
                                        s < l;
                                        ++s
                                    ) {
                                        var u,
                                            c = e[s],
                                            d = (o ? c / a : c).toFixed(t);
                                        if (!o || Kekule.NumUtils.isFloatEqual(d, 0)) u = n.strToRichText(d);
                                        else {
                                            u = n.createGroup(null, { charDirection: Kekule.Render.TextDirection.LTR });
                                            var p = n.appendText2(u, d + "×10");
                                            n.appendText(u, o.toFixed(0), {
                                                textType: Kekule.Render.RichText.SUP,
                                                refItem: p,
                                            });
                                        }
                                        i.push(u);
                                    }
                                    return i;
                                },
                                l = !!i.abscissaDataRange,
                                u = !!i.ordinateDataRange;
                            if (!l && !u) return null;
                            var c =
                                    l && i.abscissaScales
                                        ? s(
                                              i.abscissaScales,
                                              i.abscissaScaleFixedDigitCountAfterPoint,
                                              i.abscissaScaleBase,
                                              i.abscissaScaleUseSciForm
                                          )
                                        : null,
                                d =
                                    u && i.ordinateScales
                                        ? s(
                                              i.ordinateScales,
                                              i.ordinateScaleFixedDigitCountAfterPoint,
                                              i.ordinateScaleBase,
                                              i.ordinateScaleUseSciForm
                                          )
                                        : null,
                                p = Kekule.Render.RichTextUtils,
                                f = Object.create(i);
                            if (l) {
                                if (f.abscissaLabel && f.abscissaUnitLabel) {
                                    var m = Kekule.Render.RichTextUtils.createGroup(null, {
                                        charDirection: Kekule.Render.TextDirection.LTR,
                                    });
                                    p.append(m, f.abscissaLabel),
                                        p.appendText(m, " ("),
                                        p.append(m, f.abscissaUnitLabel),
                                        p.appendText(m, ")"),
                                        (f.abscissaLabel = m);
                                } else f.abscissaLabel = f.abscissaLabel || f.abscissaUnitLabel;
                                f.abscissaUnitLabel = null;
                            }
                            if (u) {
                                if (f.ordinateLabel && f.ordinateUnitLabel) {
                                    m = Kekule.Render.RichTextUtils.createGroup(null, {
                                        charDirection: Kekule.Render.TextDirection.LTR,
                                    });
                                    p.append(m, f.ordinateLabel),
                                        p.appendText(m, " ("),
                                        p.append(m, f.ordinateUnitLabel),
                                        p.appendText(m, ")"),
                                        (f.ordinateLabel = m);
                                } else f.ordinateLabel = f.ordinateLabel || f.ordinateUnitLabel;
                                f.ordinateUnitLabel = null;
                            }
                            var h,
                                S = l
                                    ? a._estimateAxisSizes(
                                          e,
                                          t,
                                          r,
                                          n,
                                          c,
                                          f.abscissaUnitLabel,
                                          f.abscissaLabel,
                                          o,
                                          !0,
                                          1 === f.abscissaAxisPosition
                                      )
                                    : null,
                                A = u
                                    ? a._estimateAxisSizes(
                                          e,
                                          t,
                                          r,
                                          n,
                                          d,
                                          f.ordinateUnitLabel,
                                          f.ordinateLabel,
                                          o,
                                          !1,
                                          0 === f.ordinateAxisPosition
                                      )
                                    : null,
                                T = e.createGroup(r),
                                I = Object.create(n),
                                g = Object.create(n);
                            if (
                                (A &&
                                    (0 === i.ordinateAxisPosition
                                        ? (I.x1 += Math.min(A.total.x, I.x2 - I.x1))
                                        : (I.x2 -= Math.min(A.total.x, I.x2 - I.x1))),
                                S &&
                                    (1 === i.abscissaAxisPosition
                                        ? (g.y1 += Math.min(S.total.y, g.y2 - g.y1))
                                        : (g.y2 -= Math.min(S.total.y, g.y2 - g.y1))),
                                l)
                            ) {
                                var E = c;
                                (h = a._drawSingleAxis(
                                    e,
                                    t,
                                    r,
                                    I,
                                    f.abscissaDataRange,
                                    f.abscissaScales,
                                    E,
                                    f.abscissaUnitLabel,
                                    f.abscissaLabel,
                                    S,
                                    o,
                                    !0,
                                    1 === f.abscissaAxisPosition,
                                    f.abscissaReversedDirection
                                )) && e.addToGroup(h, T);
                            }
                            if (u) {
                                E = d;
                                (h = a._drawSingleAxis(
                                    e,
                                    t,
                                    r,
                                    g,
                                    f.ordinateDataRange,
                                    f.ordinateScales,
                                    E,
                                    f.ordinateUnitLabel,
                                    f.ordinateLabel,
                                    A,
                                    o,
                                    !1,
                                    1 !== f.ordinateAxisPosition,
                                    f.ordinateReversedDirection
                                )) && e.addToGroup(h, T);
                            }
                            return {
                                drawnElem: T,
                                clientBox: { x1: I.x1, x2: I.x2, y1: g.y1, y2: g.y2 },
                                abscissaRenderBox: I,
                                ordinateRenderBox: g,
                            };
                        },
                        _drawSingleAxis: function (e, t, a, r, n, i, o, s, l, u, c, d, p, f) {
                            var m = Kekule.Render.BoxXAlignment,
                                h = Kekule.Render.BoxYAlignment,
                                S = p,
                                A = d ? "x" : "y",
                                T = d ? "y" : "x",
                                I = (d ? c.abscissa : c.ordinate) || c,
                                g = { x: r.x2 - r.x1, y: r.y2 - r.y1 };
                            if (g.x <= 0 || g.y <= 0) return null;
                            var E,
                                R,
                                D = e.createGroup(a),
                                C = { x: r.x1, y: r.y1 },
                                _ = d ? !f : f,
                                L = {},
                                O = {},
                                y = 0;
                            l &&
                                ((L[A] = C[A] + g[A] / 2 - (u.axisLabel[A] / 2) * (d ? 1 : -1)),
                                (L[T] =
                                    C[T] +
                                    (S
                                        ? u.axisLabelPadding[T] + u.axisLabel[T] / 2
                                        : g[T] - (u.axisLabelPadding[T] + u.axisLabel[T] / 2))),
                                (E = Object.extend(Object.extend({}, I.axisLabel), {
                                    textBoxXAlignment: m.LEFT,
                                    textBoxYAlignment: h.CENTER,
                                })),
                                d || (E.transforms = [{ rotate: -Math.PI / 2, center: Object.extend({}, L) }]),
                                (R = t.drawEx(a, L, l, E).drawnObj),
                                e.addToGroup(R, D),
                                (y += u.axisLabel[T] + 2 * u.axisLabelPadding[T]));
                            var N = Object.create(I.axis);
                            if (
                                (N.strokeColor || (N.strokeColor = N.color),
                                N.fillColor || (N.fillColor = N.color),
                                i && o)
                            ) {
                                var M = n.max - n.min,
                                    v = d
                                        ? { textBoxXAlignment: m.LEFT, textBoxYAlignment: S ? h.BOTTOM : h.TOP }
                                        : { textBoxXAlignment: m.LEFT, textBoxYAlignment: h.CENTER };
                                (E = Object.extend(Object.create(I.scaleLabel), v)),
                                    (L[T] = S
                                        ? C[T] + y + u.scaleLabel[T] + u.scaleLabelPadding[T]
                                        : C[T] + g[T] - y - u.scaleLabel[T] - u.scaleLabelPadding[T]);
                                var P = {};
                                P[T] = L[T];
                                for (var b = g[A] / (o.length - 1), k = b, V = 1; k < u.scaleLabel[A] && b > 0; )
                                    ++V, (k += b);
                                for (var U = 0, x = i.length; U < x; ++U) {
                                    var F = ((_ ? i[U] - n.min : n.max - i[U]) / M) * g[A] + C[A];
                                    L[A] = F;
                                    var K = !1;
                                    if (U % V == 0) {
                                        if (((P[A] = L[A]), d)) {
                                            var B = t.measure(a, P, o[U], E);
                                            P.x = L.x - B.width / 2;
                                        } else if (S) {
                                            B = t.measure(a, P, o[U], E);
                                            P.x = L.x - B.width;
                                        }
                                        (R = t.drawEx(a, P, o[U], E).drawnObj), e.addToGroup(R, D), (K = !0);
                                    }
                                    var G = { x: L.x, y: L.y },
                                        j = u.scaleMark[T];
                                    (G[T] += (j + u.scaleLabelPadding[T]) * (p ? 1 : -1)),
                                        K || (j *= N.unlabeledScaleSizeRatio || 1),
                                        (O[A] = F),
                                        (O[T] = G[T] - j * (p ? 1 : -1)),
                                        (R = e.drawLine(a, G, O, N)),
                                        e.addToGroup(R, D);
                                }
                                y += u.scaleLabel[T] + 2 * u.scaleLabelPadding[T] + u.scaleMark[T];
                            }
                            return (
                                (L[A] = C[A]),
                                (L[T] = S ? C[T] + y + u.axis[T] / 2 : C[T] + g[T] - y - u.axis[T] / 2),
                                (O[A] = L[A] + g[A]),
                                (O[T] = L[T]),
                                (R = e.drawLine(a, L, O, Object.extend({ lineCap: "square" }, N))),
                                e.addToGroup(R, D),
                                D
                            );
                        },
                        _estimateAxisSizes: function (e, t, a, r, n, i, o, s, l, u) {
                            var c = (l ? s.abscissa : s.ordinate) || s,
                                d = { x: 0, y: 0 },
                                p = { x: 0, y: 0 };
                            if (n && n.length) {
                                var f = n[0],
                                    m = n[n.length - 1],
                                    h = t.measure(a, { x: 0, y: 0 }, f, c.scaleLabel),
                                    S = t.measure(a, { x: 0, y: 0 }, m, c.scaleLabel);
                                (d = { x: Math.max(h.width, S.width), y: Math.max(h.height, S.height) }),
                                    (p = { x: c.scaleLabel.padding || 0, y: c.scaleLabel.padding || 0 });
                            }
                            var A = { x: 0, y: 0 };
                            if (i) {
                                var T = t.measure(a, { x: 0, y: 0 }, i, c.unitLabel);
                                (A.x = Math.max(d.x, T.width)), (A.y = Math.max(d.y, T.height));
                            }
                            var I = { x: 0, y: 0 },
                                g = { x: 0, y: 0 };
                            if (o) {
                                var E = t.measure(a, { x: 0, y: 0 }, o, c.axisLabel);
                                (I = l ? { x: E.width, y: E.height } : { y: E.width, x: E.height }),
                                    (g = {
                                        x: (c.axisLabel && c.axisLabel.padding) || 0,
                                        y: (c.axisLabel && c.axisLabel.padding) || 0,
                                    });
                            }
                            var R = c.axis,
                                D = l ? { x: 0, y: R.scaleMarkSize } : { x: R.scaleMarkSize, y: 0 },
                                C = l ? { x: 0, y: R.strokeWidth } : { x: R.strokeWidth, y: 0 },
                                _ = {};
                            return (
                                l
                                    ? ((_.x = r.x2 - r.x1), (_.y = d.y + I.y + C.y + D.y + 2 * p.y + 2 * g.y))
                                    : ((_.y = r.y2 - r.y1), (_.x = d.x + I.x + C.x + D.x + 2 * p.x + 2 * g.x)),
                                {
                                    total: _,
                                    axis: C,
                                    scaleMark: D,
                                    scaleLabel: d,
                                    scaleLabelPadding: p,
                                    unitLabel: A,
                                    axisLabel: I,
                                    axisLabelPadding: g,
                                }
                            );
                        },
                    });
                var a = Kekule.Render.CoordAxisRender2DUtils;
                (Kekule.Render.Spectrum2DRenderUtils = {
                    _getDataDefaultAxisDirection: function (e, t, a) {
                        var r = Kekule.Spectroscopy.SpectrumType,
                            n = Kekule.Unit,
                            i = !0;
                        if (
                            (e === r.NMR && t && (i = !1), e === r.IR) &&
                            t &&
                            a &&
                            n.getUnit(a).category === n.WaveNumber
                        )
                            return !1;
                        return i;
                    },
                    _getDataDefaultAxisAlign: function (e, t, a) {
                        Kekule.Spectroscopy.SpectrumType, Kekule.Unit;
                        return !0;
                    },
                    getDefaultAxisDirectionAndAlignInfo: function (e, t, a) {
                        return {
                            reversedDirection: !Kekule.Render.Spectrum2DRenderUtils._getDataDefaultAxisDirection(
                                e,
                                t,
                                a
                            ),
                            reversedAlign: !Kekule.Render.Spectrum2DRenderUtils._getDataDefaultAxisAlign(e, t, a),
                        };
                    },
                }),
                    (Kekule.Render.Spectrum2DRenderer = Class.create(Kekule.Render.ChemObj2DRenderer, {
                        CLASS_NAME: "Kekule.Render.Spectrum2DRenderer",
                        initialize: function (e, t, a) {
                            this.tryApplySuper("initialize", [e, t, a]), this._initSectionDataDrawerMap();
                        },
                        _initSectionDataDrawerMap: function () {
                            (Kekule.Render.Spectrum2DRenderer.sectionDataDrawerMap[
                                Kekule.Spectroscopy.DataMode.CONTINUOUS
                            ] = this.doDrawContinuousSectionData),
                                (Kekule.Render.Spectrum2DRenderer.sectionDataDrawerMap[
                                    Kekule.Spectroscopy.DataMode.PEAK
                                ] = this.doDrawPeakSectionData);
                        },
                        _initSpectrumDefSize: function (t, a) {
                            if (!t.getSize2D()) {
                                var r = e.multiply(
                                    a.spectrum_defSize2DRatio,
                                    a.defScaleRefLength * (a.unitLength || 1)
                                );
                                t.setSize2D(r);
                            }
                        },
                        doDrawSelf: function (e, t, a) {
                            var r = a._spectrum_render_enable_sub_bounds;
                            this.tryApplySuper("doDrawSelf", [e, t, a]);
                            var n = this.getChemObj();
                            t || (t = this.getAutoBaseCoord(a)), this._initSpectrumDefSize(n, a);
                            var i,
                                o = n.getExposedContainerBox(),
                                s = { x: o.x1, y: o.y2 },
                                l = { x: o.x2, y: o.y1 },
                                u = this.transformCoordToContext(e, n, s),
                                c = this.transformCoordToContext(e, n, l),
                                d = Kekule.CoordUtils.substract(c, u),
                                p = { x: t.x - d.x / 2, y: t.y - d.y / 2 },
                                f = p,
                                m = Kekule.CoordUtils.add(p, d),
                                h = Kekule.BoxUtils.createBox(f, m),
                                S = this._getActualRenderOptions(e, n, a),
                                A = this.doGetTargetDataSections(n);
                            if (A && A.length) {
                                var T = this.doGetDataVarInfos(A);
                                if (T) {
                                    var I,
                                        g = this._getAxisDirectionAndAlignInfo(e, n, R, T.varUnitSymbols, S),
                                        E = this._getDisplayRangeOfSections(n, n.getData(), A, T, g, S),
                                        R = T.varSymbols;
                                    if (
                                        Kekule.NumUtils.isFloatEqual(E[R.independant].min, E[R.independant].max) ||
                                        Kekule.NumUtils.isFloatEqual(E[R.dependant].min, E[R.dependant].max)
                                    )
                                        return Kekule.error(Kekule.$L("ErrorMsg.VISIBLE_DATA_RANGE_IS_EMPTY")), null;
                                    i = this.createDrawGroup(e);
                                    var D = this._prepareAxisRenderParamsAndOptions(
                                            this.getActualTargetContext(e),
                                            n,
                                            E,
                                            R,
                                            S,
                                            g
                                        ),
                                        C = Kekule.Render.CoordAxisRender2DUtils.drawAxises(
                                            this.getDrawBridge(),
                                            this.getRichTextDrawer(),
                                            this.getActualTargetContext(e),
                                            h,
                                            D.drawParams,
                                            D.renderOptions
                                        );
                                    if (
                                        ((this.getRenderCache(e).spectrum_reversedAxises = S.spectrum_reversedAxises),
                                        C
                                            ? (this.addToDrawGroup(C.drawnElem, i),
                                              (I = C.clientBox),
                                              r &&
                                                  (C.abscissaRenderBox &&
                                                      this.basicDrawObjectUpdated(
                                                          e,
                                                          n.getPseudoRenderSubObject("abscissaIndicator"),
                                                          n,
                                                          this.createRectBoundInfo(
                                                              { x: C.abscissaRenderBox.x1, y: C.abscissaRenderBox.y1 },
                                                              { x: C.abscissaRenderBox.x2, y: C.abscissaRenderBox.y2 }
                                                          ),
                                                          Kekule.Render.ObjectUpdateType.ADD
                                                      ),
                                                  C.ordinateRenderBox &&
                                                      this.basicDrawObjectUpdated(
                                                          e,
                                                          n.getPseudoRenderSubObject("ordinateIndicator"),
                                                          n,
                                                          this.createRectBoundInfo(
                                                              { x: C.ordinateRenderBox.x1, y: C.ordinateRenderBox.y1 },
                                                              { x: C.ordinateRenderBox.x2, y: C.ordinateRenderBox.y2 }
                                                          ),
                                                          Kekule.Render.ObjectUpdateType.ADD
                                                      )))
                                            : (I = h),
                                        !a || !1 !== a.spectrum_displaySpectrum)
                                    ) {
                                        var _ = this.doCalcSprectrumTransformMatrixes(n, A, R, E, I, S, g),
                                            L = _.dataTransformMatrix;
                                        (S.spectrumDataTransformMatrix = L),
                                            (this.getRenderCache(e).spectrumDataTransformMatrix = L),
                                            (this.getRenderCache(e).spectrumInvDataTransformMatrix =
                                                _.dataTransformInvMatrix);
                                        var O = this.doDrawDataSections(n, A, R, e, o, I, L, E, S);
                                        O && this.addToDrawGroup(O, i),
                                            r &&
                                                this.basicDrawObjectUpdated(
                                                    e,
                                                    n.getPseudoRenderSubObject("data"),
                                                    n,
                                                    this.createRectBoundInfo(
                                                        { x: I.x1, y: I.y1 },
                                                        { x: I.x2, y: I.y2 }
                                                    ),
                                                    Kekule.Render.ObjectUpdateType.ADD
                                                );
                                    }
                                    this.basicDrawObjectUpdated(
                                        e,
                                        n,
                                        n,
                                        this.createRectBoundInfo(f, m),
                                        Kekule.Render.ObjectUpdateType.ADD
                                    );
                                }
                            }
                            return i;
                        },
                        _getActualRenderOptions: function (e, t, a) {
                            var r = t.getData().getSections().getRenderOptions(),
                                n = Object.create(a);
                            return (n = Object.extend(n, r));
                        },
                        _getAxisDirectionAndAlignInfo: function (e, t, a, r, n) {
                            var i = t.getSpectrumType(),
                                o = Kekule.Render.Spectrum2DRenderUtils.getDefaultAxisDirectionAndAlignInfo(
                                    i,
                                    !0,
                                    r.independant
                                ),
                                s = Kekule.Render.Spectrum2DRenderUtils.getDefaultAxisDirectionAndAlignInfo(
                                    i,
                                    !1,
                                    r.dependant
                                );
                            return (
                                n.spectrum_reverseIndependentDataDirection &&
                                    (o.reversedDirection = !o.reversedDirection),
                                n.spectrum_reverseIndependentAxisAlign && (o.reversedAlign = !o.reversedAlign),
                                n.spectrum_reverseDependentDataDirection &&
                                    (s.reversedDirection = !s.reversedDirection),
                                n.spectrum_reverseDependentAxisAlign && (s.reversedAlign = !s.reversedAlign),
                                { independent: o, dependent: s }
                            );
                        },
                        _prepareAxisRenderParamsAndOptions: function (e, t, a, r, n, i) {
                            var o = n,
                                s = o.spectrum_reversedAxises,
                                l = o.contextRefLengthes.xy,
                                u = o.unitLength,
                                c = Kekule.oneOf,
                                d = {},
                                p = {},
                                f = this,
                                m = function (e, t) {
                                    var a = Object.create(e);
                                    return (a = Object.extend(a, t));
                                },
                                h = function (e, t, a) {
                                    return c(e["spectrum_" + a + t.upperFirst()], e["spectrum_" + t]);
                                },
                                S = function (e, t, a) {
                                    var r = t.upperFirst(),
                                        n = c(e["spectrum_" + a + r], e["spectrum_" + t]),
                                        i = c(e["spectrum_" + a + r + "Fixed"], e["spectrum_" + t + "Fixed"]),
                                        o = c(e["spectrum_" + a + r + "Min"], e["spectrum_" + t + "Min"]),
                                        s = c(e["spectrum_" + a + r + "Max"], e["spectrum_" + t + "Max"]);
                                    if (e.zoom && (o || s || i))
                                        if (i) n = i / e.zoom;
                                        else {
                                            var l = n * e.zoom;
                                            o && l < o ? (n = o / e.zoom) : s && l > s && (n = s / e.zoom);
                                        }
                                    return n;
                                },
                                A = function (e, t, a, r, n) {
                                    var i = c(
                                        e["spectrum_" + a + t.upperFirst() + "Fixed"],
                                        e["spectrum_" + t + "Fixed"]
                                    );
                                    if (i) o = i;
                                    else {
                                        var o =
                                                c(
                                                    e["spectrum_" + a + t.upperFirst() + "Ratio"],
                                                    e["spectrum_" + t + "Ratio"]
                                                ) * r,
                                            s = c(
                                                e["spectrum_" + a + t.upperFirst() + "Min"],
                                                e["spectrum_" + t + "Min"]
                                            );
                                        s && (o = Math.max(o, s));
                                        var l = c(
                                            e["spectrum_" + a + t.upperFirst() + "Max"],
                                            e["spectrum_" + t + "Max"]
                                        );
                                        l && (o = Math.min(o, l));
                                    }
                                    return o * n;
                                },
                                T = function (e, t, a, r) {
                                    e[a + t.upperFirst()] = r;
                                },
                                I = function (e, t) {
                                    var a = e.getVariable(t),
                                        r = a.getDisplayLabel() || a.getName();
                                    return r
                                        ? DataType.isObjectValue(r)
                                            ? r
                                            : Kekule.Render.RichTextUtils.strToRichText(r)
                                        : null;
                                },
                                g = function (e, t) {
                                    var a,
                                        r = e.getVariable(t),
                                        n = f.doGetVarDefUnit(r);
                                    if (n) {
                                        var i = Kekule.Unit.getUnit(n);
                                        return (
                                            i
                                                ? i.symbolHtml
                                                    ? (a = Kekule.Render.RichTextUtils.fromSimpleHtmlCode(i.symbolHtml))
                                                    : i.getKey() &&
                                                      (a = Kekule.Render.RichTextUtils.strToRichText(i.getKey()))
                                                : (a = DataType.isObjectValue(n)
                                                      ? n
                                                      : Kekule.Render.RichTextUtils.strToRichText(n)),
                                            a
                                        );
                                    }
                                    return null;
                                },
                                E = s ? "abscissa" : "ordinate",
                                R = s ? "ordinate" : "abscissa",
                                D = {},
                                C = {};
                            if (o.spectrum_displayIndependentAxis) {
                                if (
                                    (s ? (d.ordinate = D) : (d.abscissa = D),
                                    (D.axis = m(o, {
                                        strokeWidth: A(o, "axisWidth", "independent", l, u),
                                        scaleMarkSize: 0,
                                        color: c(h(o, "axisColor", "independent"), o.color),
                                    })),
                                    (o.spectrum_displayIndependentAxisLabel || o.spectrum_displayIndependentAxisUnit) &&
                                        (D.axisLabel = m(o, {
                                            fontFamily: h(o, "axisLabelFontFamily", "independent"),
                                            fontSize: S(o, "axisLabelFontSize", "independent") * u,
                                            color: h(o, "axisLabelColor", "independent"),
                                            padding: A(o, "axisLabelPadding", "independent", l, u),
                                        })),
                                    o.spectrum_displayIndependentAxisScales &&
                                        ((D.scaleLabel = m(o, {
                                            fontFamily: h(o, "axisScaleLabelFontFamily", "independent"),
                                            fontSize: S(o, "axisScaleLabelFontSize", "independent") * u,
                                            color: c(h(o, "axisScaleLabelColor", "independent"), o.color),
                                            padding: A(o, "axisScaleLabelPadding", "independent", l, u),
                                        })),
                                        (D.axis.scaleMarkSize = A(o, "axisScaleMarkSize", "independent", l, u)),
                                        (D.axis.unlabeledScaleSizeRatio = h(
                                            o,
                                            "axisUnlabeledScaleSizeRatio",
                                            "independent"
                                        ))),
                                    T(p, "dataRange", R, a[r.independant]),
                                    T(p, "axisPosition", R, i.independent.reversedAlign ? 1 : 0),
                                    T(p, "reversedDirection", R, i.independent.reversedDirection),
                                    o.spectrum_displayIndependentAxisScales)
                                ) {
                                    var _ = h(o, "axisScaleMarkPreferredCount", "independent");
                                    T(
                                        p,
                                        "scales",
                                        R,
                                        (L = Kekule.Spectroscopy.Utils.calcScalePointInfo(
                                            a[r.independant].min,
                                            a[r.independant].max,
                                            _
                                        )).scaleValues
                                    ),
                                        T(p, "scaleBase", R, L.scaleBase),
                                        T(p, "scaleUseSciForm", R, L.useSciForm),
                                        T(p, "scaleFixedDigitCountAfterPoint", R, L.fixDigitsCountAfterPoint);
                                }
                                o.spectrum_displayIndependentAxisLabel && T(p, "label", R, I(t, r.independant)),
                                    o.spectrum_displayIndependentAxisUnit && T(p, "unitLabel", R, g(t, r.independant));
                            }
                            if (o.spectrum_displayDependentAxis) {
                                if (
                                    (s ? (d.abscissa = C) : (d.ordinate = C),
                                    (C.axis = m(o, {
                                        strokeWidth: A(o, "axisWidth", "dependent", l, u),
                                        scaleMarkSize: 0,
                                        color: c(h(o, "axisColor", "dependent"), o.color),
                                    })),
                                    (o.spectrum_displayDependentAxisLabel || o.spectrum_displayDependentAxisUnit) &&
                                        (C.axisLabel = m(o, {
                                            fontFamily: h(o, "axisLabelFontFamily", "dependent"),
                                            fontSize: S(o, "axisLabelFontSize", "dependent") * u,
                                            color: h(o, "axisLabelColor", "dependent"),
                                            padding: A(o, "axisLabelPadding", "dependent", l, u),
                                        })),
                                    o.spectrum_displayDependentAxisScales &&
                                        ((C.scaleLabel = m(o, {
                                            fontFamily: h(o, "axisScaleLabelFontFamily", "dependent"),
                                            fontSize: S(o, "axisScaleLabelFontSize", "dependent") * u,
                                            color: c(h(o, "axisScaleLabelColor", "dependent"), o.color),
                                            padding: A(o, "axisScaleLabelPadding", "dependent", l, u),
                                        })),
                                        (C.axis.scaleMarkSize = A(o, "axisScaleMarkSize", "dependent", l, u)),
                                        (C.axis.unlabeledScaleSizeRatio = h(
                                            o,
                                            "axisUnlabeledScaleSizeRatio",
                                            "dependent"
                                        ))),
                                    T(p, "dataRange", E, a[r.dependant]),
                                    T(p, "axisPosition", E, i.dependent.reversedAlign ? 1 : 0),
                                    T(p, "reversedDirection", E, i.dependent.reversedDirection),
                                    o.spectrum_displayDependentAxisScales)
                                ) {
                                    var L;
                                    _ = h(o, "axisScaleMarkPreferredCount", "dependent");
                                    T(
                                        p,
                                        "scales",
                                        E,
                                        (L = Kekule.Spectroscopy.Utils.calcScalePointInfo(
                                            a[r.dependant].min,
                                            a[r.dependant].max,
                                            _
                                        )).scaleValues
                                    ),
                                        T(p, "scaleBase", E, L.scaleBase),
                                        T(p, "scaleUseSciForm", E, L.useSciForm),
                                        T(p, "scaleFixedDigitCountAfterPoint", E, L.fixDigitsCountAfterPoint);
                                }
                                o.spectrum_displayDependentAxisLabel && T(p, "label", E, I(t, r.dependant)),
                                    o.spectrum_displayDependentAxisUnit && T(p, "unitLabel", E, g(t, r.dependant));
                            }
                            return { renderOptions: d, drawParams: p };
                        },
                        doGetTargetDataSections: function (e) {
                            return e.getDisplayedDataSections();
                        },
                        doGetDataVarInfos: function (e) {
                            for (var t = {}, a = {}, r = 0, n = e[0].getActualLocalVarInfos().length; r < n; ++r) {
                                var i = e[0].getLocalVarDef(r);
                                if (
                                    (i.getDependency() === Kekule.VarDependency.DEPENDENT
                                        ? ((a.dependant = i.getSymbol()), (t.dependant = this.doGetVarDefUnit(i)))
                                        : ((a.independant = i.getSymbol()), (t.independant = this.doGetVarDefUnit(i))),
                                    a.dependant && a.independant)
                                )
                                    break;
                            }
                            return a.dependant && a.independant ? { varSymbols: a, varUnitSymbols: t } : null;
                        },
                        doGetVarDefUnit: function (e) {
                            return (e.getActualExternalUnit && e.getActualExternalUnit()) || e.getUnit();
                        },
                        doCalcSprectrumTransformMatrixes: function (t, a, r, n, i, o, s) {
                            var l = r.dependant,
                                u = r.independant,
                                c = n;
                            if (c[l] && c[u]) {
                                var d, p;
                                s.independent.reversedDirection && (o.spectrum_reversedAxises ? (p = !0) : (d = !0)),
                                    s.dependent.reversedDirection && (o.spectrum_reversedAxises ? (d = !0) : (p = !0));
                                var f = o.spectrum_reversedAxises
                                        ? [
                                              { y: c[u].min, x: c[l].min },
                                              { y: c[u].max, x: c[l].max },
                                          ]
                                        : [
                                              { x: c[u].min, y: c[l].min },
                                              { x: c[u].max, y: c[l].max },
                                          ],
                                    m = Kekule.BoxUtils.createBox(f[0], f[1]),
                                    h = { translateX: d ? -m.x2 : -m.x1, translateY: p ? -m.y1 : -m.y2 },
                                    S = Kekule.CoordUtils.calcTransform2DMatrix(h),
                                    A = {
                                        scaleX: (i.x2 - i.x1) / (m.x2 - m.x1),
                                        scaleY: -(i.y2 - i.y1) / (m.y2 - m.y1),
                                        translateX: i.x1,
                                        translateY: i.y1,
                                    };
                                d && (A.scaleX = -A.scaleX), p && (A.scaleY = -A.scaleY);
                                var T = (S = Kekule.MatrixUtils.multiply(e.calcTransform2DMatrix(A), S)),
                                    I = e.calcInverseTransform2DMatrix(A);
                                return (
                                    (I = Kekule.MatrixUtils.multiply(e.calcInverseTransform2DMatrix(h), I)),
                                    (o.spectrumDataTransformInvMatrix = I),
                                    { dataTransformMatrix: T, dataTransformInvMatrix: I }
                                );
                            }
                        },
                        _getDisplayRangeOfSections: function (e, t, a, r, n, i) {
                            for (
                                var o = function (e, t, a, r, n) {
                                        var i =
                                                r === Kekule.Spectroscopy.DataMode.PEAK
                                                    ? "_Peak"
                                                    : r === Kekule.Spectroscopy.DataMode.CONTINUOUS
                                                    ? "_Continuous"
                                                    : "",
                                            o = a ? "dependent" : "independent",
                                            s = n["spectrum_visible" + o.upperFirst() + "DataRangeFrom" + i] || 0,
                                            l = n["spectrum_visible" + o.upperFirst() + "DataRangeTo" + i] || 1,
                                            u = e;
                                        if (0 !== s || 1 !== l) {
                                            var c = (u.max - u.min) * s + u.min,
                                                d = (u.max - u.min) * (l - 1) + u.max;
                                            return { min: Math.min(c, d), max: Math.max(c, d) };
                                        }
                                        return u;
                                    },
                                    s = function (e, t, a, r, n) {
                                        var i = a ? "dependent" : "independent",
                                            o = n["spectrum_viewport" + i.upperFirst() + "DataRangeFrom"] || 0,
                                            s = n["spectrum_viewport" + i.upperFirst() + "DataRangeTo"] || 1,
                                            l = e;
                                        if (0 !== o || 1 !== s) {
                                            var u = r ? l.max : l.min,
                                                c = r ? l.min : l.max,
                                                d = (c - u) * o + u,
                                                p = (c - u) * (s - 1) + c;
                                            return { min: Math.min(d, p), max: Math.max(d, p) };
                                        }
                                        return l;
                                    },
                                    l = r.varSymbols.independant,
                                    u = r.varSymbols.dependant,
                                    c = {},
                                    d = {},
                                    p = Kekule.Spectroscopy.DataMode.CONTINUOUS,
                                    f = 0,
                                    m = a.length;
                                f < m;
                                ++f
                            ) {
                                var h = a[f],
                                    S = h.getRenderOptions() || {},
                                    A = t.getDisplayRangeOfSection(h, null, { autoCalc: !0 }),
                                    T = h.getMode();
                                T === Kekule.Spectroscopy.DataMode.PEAK && (p = T),
                                    (d[l] = o(A[l], 0, !1, T, S)),
                                    (d[u] = o(A[u], 0, !0, T, S)),
                                    (c = Kekule.Spectroscopy.Utils.mergeDataRange(c, d));
                            }
                            return (
                                (c[l] = o(c[l], 0, !1, p, i)),
                                (c[u] = o(c[u], 0, !0, p, i)),
                                (c[l] = s(c[l], 0, !1, n.independent.reversedDirection, i)),
                                (c[u] = s(c[u], 0, !0, n.dependent.reversedDirection, i)),
                                c
                            );
                        },
                        _clipDataValuePairInsideVisibleRange: function (t, a, r, n) {
                            var i = [
                                    e.create(t[r.independant], t[r.dependant]),
                                    e.create(a[r.independant], a[r.dependant]),
                                ],
                                o = [
                                    e.create(n[r.independant].min, n[r.dependant].min),
                                    e.create(n[r.independant].max, n[r.dependant].max),
                                ],
                                s = Kekule.GeometryUtils.clipLineSegmentByBox(i, o);
                            if (s) {
                                var l = {},
                                    u = {};
                                return (
                                    (l[r.independant] = s[0].x),
                                    (l[r.dependant] = s[0].y),
                                    (u[r.independant] = s[1].x),
                                    (u[r.dependant] = s[1].y),
                                    [l, u]
                                );
                            }
                            return null;
                        },
                        doDrawDataSections: function (e, t, a, r, n, i, o, s, l) {
                            for (var u = this.createDrawGroup(r), c = 0, d = t.length; c < d; ++c) {
                                var p = this.doDrawSectionData(e, t[c], r, i, l, a, o, s);
                                p && this.addToDrawGroup(p, u);
                            }
                            return u;
                        },
                        _mergeParentAndLocalSpectrumDataRenderOptions: function (e, t) {
                            var a,
                                r = Kekule.oneOf,
                                n = e.contextRefLengthes.xy,
                                i = r(t.unitLength, e.unitLength, 1),
                                o = r(t.spectrum_dataStrokeWidthFixed, e.spectrum_dataStrokeWidthFixed) || 0;
                            if (o) a = o;
                            else {
                                a = (r(t.spectrum_dataStrokeWidthRatio, e.spectrum_dataStrokeWidthRatio) || 0) * n;
                                var s = r(t.spectrum_dataStrokeWidthMin, e.spectrum_dataStrokeWidthMin) || 0;
                                s && (a = Math.max(a, s));
                                var l = r(t.spectrum_dataStrokeWidthMax, e.spectrum_dataStrokeWidthMax) || 0;
                                l && (a = Math.min(a, l));
                            }
                            a = (a || r(t.strokeWidth, e.strokeWidth, 1)) * i;
                            var u = Object.create(e);
                            return (u = Object.extend(u, {
                                strokeColor: r(t.spectrum_dataColor, t.color, e.spectrum_dataColor, e.color),
                                strokeWidth: a,
                            }));
                        },
                        _prepareSectionDataActualRenderOptions: function (e, t, a, r) {
                            var n = r,
                                i = t.getRenderOptions() || {};
                            return this._mergeParentAndLocalSpectrumDataRenderOptions(n, i);
                        },
                        _getSpectrumDataValueItemRenderOptions: function (e, t, a) {
                            return t.getDataItemOverridenRenderOptions(a);
                        },
                        doDrawSectionData: function (e, t, a, r, n, i, o, s) {
                            if (t.getDataCount() <= 0) return null;
                            Object.create(n);
                            var l = t.getMode(),
                                u = Kekule.Render.Spectrum2DRenderer.sectionDataDrawerMap[l],
                                c = this._prepareSectionDataActualRenderOptions(e, t, a, n);
                            return u && u.apply(this, [e, t, a, r, c, i, o, s]);
                        },
                        doDrawPeakSectionData: function (e, t, a, r, n, i, o, s) {
                            var l,
                                u = this,
                                c = function (e, t) {
                                    var a = u._clipDataValuePairInsideVisibleRange(e, t, i, s);
                                    return a
                                        ? [
                                              u._calcSectionDataValueContextCoord(
                                                  a[0],
                                                  i,
                                                  o,
                                                  n.spectrum_reversedAxises
                                              ),
                                              u._calcSectionDataValueContextCoord(
                                                  a[1],
                                                  i,
                                                  o,
                                                  n.spectrum_reversedAxises
                                              ),
                                          ]
                                        : null;
                                },
                                d = [],
                                p = [],
                                f = [];
                            if (
                                (t.forEach(function (r, o) {
                                    var s = t.getPeakRootValueOf(r);
                                    if (s && r) {
                                        !(function (e, t, a) {
                                            var r = t[t.length - 1];
                                            t.length > 1 && Kekule.NumUtils.isFloatEqual(r[a.dependant], e[a.dependant])
                                                ? (r[a.independant] = e[a.independant])
                                                : t.push(e);
                                        })(s, p, i);
                                        var l = c(s, r);
                                        if (l) {
                                            var m = u._getSpectrumDataValueItemRenderOptions(e, t, r);
                                            if (m) {
                                                m = u._mergeParentAndLocalSpectrumDataRenderOptions(n, m);
                                                var h = u.drawLine(a, l[0], l[1], m);
                                                f.push(h);
                                            } else {
                                                var S = (function (e) {
                                                    var t = [];
                                                    if (e && e.length > 1) {
                                                        var a = e[0];
                                                        t.push("M"), t.push([a.x, a.y]);
                                                        for (var r = 1, n = e.length; r < n; ++r)
                                                            t.push("L"), t.push([e[r].x, e[r].y]);
                                                    }
                                                    return t;
                                                })(l);
                                                S && S.length && (d = d.concat(S));
                                            }
                                        }
                                    }
                                }),
                                p.length > 1)
                            ) {
                                2 === p.length &&
                                    ((p[0][i.independant] = s[i.independant].min),
                                    (p[1][i.independant] = s[i.independant].max));
                                for (var m = 1, h = p.length; m < h; ++m) {
                                    var S = c(p[m - 1], p[m]);
                                    S && (d.push("M"), d.push([S[0].x, S[0].y]), d.push("L"), d.push([S[1].x, S[1].y]));
                                }
                            }
                            if (d && d.length) {
                                var A = Kekule.Render.DrawPathUtils.makePath.apply(this, d);
                                f.unshift(this.drawPath(a, A, n));
                            }
                            if (f.length < 1) l = null;
                            else if (1 === f.length) l = f[0];
                            else {
                                l = this.createDrawGroup(a);
                                for (m = 0, h = f.length; m < h; ++m) this.addToDrawGroup(f[m], l);
                            }
                            return l;
                        },
                        doDrawContinuousSectionData: function (t, a, r, n, i, o, s, l) {
                            var u,
                                c = Object.create(i);
                            c.lineCap = "round";
                            var d = this,
                                p = function (e, t, a, r) {
                                    for (var n = [], i = 0, o = e.length; i < o; ++i) {
                                        var s = d._calcSectionDataValueContextCoord(e[i], t, a, r);
                                        n.push(s);
                                    }
                                    return n;
                                },
                                f = new Date(),
                                m = {
                                    independent: a.getLocalVarDef(o.independant),
                                    dependent: a.getLocalVarDef(o.dependant),
                                },
                                h = {
                                    independent: m.independent.getActualExternalUnit(),
                                    dependent: m.dependent.getActualExternalUnit(),
                                },
                                S = Kekule.globalOptions.render.spectrum.continuousSpectrumResampleRatio || 1,
                                A = Math.abs(n.x2 - n.x1) * S,
                                T = (l[o.independant].max - l[o.independant].min) / A,
                                I = this._getContinuousSpectrumSectionSamplingCache(r, a),
                                g = !!I,
                                E =
                                    g &&
                                    I.modifiedTime === a.getModifiedTime() &&
                                    Kekule.NumUtils.isFloatEqual(T, I.sampleMergeWidth) &&
                                    h.independent === I.indepUnit &&
                                    h.dependent === I.depUnit;
                            g || ((I = {}), this._setContinuousSpectrumSectionSamplingCache(r, a, I)),
                                E ||
                                    ((I.modifiedTime = a.getModifiedTime()),
                                    (I.sampleMergeWidth = T),
                                    (I.indepUnit = h.independent),
                                    (I.depUnit = h.dependent),
                                    (I.items = []));
                            for (
                                var R = function (e) {
                                        return Math.floor((e[o.independant] - l[o.independant].min) / T);
                                    },
                                    D = function (e, t, a) {
                                        a.push(t), null == a.fromIndex && (a.fromIndex = e), (a.toIndex = e);
                                        var r = t[o.independant];
                                        a.indepValueSum = (a.indepValueSum || 0) + r;
                                    },
                                    C = null,
                                    _ = [],
                                    L = a.getDataCount(),
                                    O = L,
                                    y = 0,
                                    N = 0,
                                    M = [];
                                y < L;

                            ) {
                                var v = null,
                                    P = null;
                                if (
                                    (E &&
                                        (v = this._getSectionCachedSamplingData(I.items, y, N)) &&
                                        v.item &&
                                        (v.item.typicalValues && ((N = v.cacheIndex + 1), (y = v.dataValueToIndex)),
                                        v.item.averageIndepValue < l[o.independant].min ||
                                            v.item.averageIndepValue > l[o.independant].max ||
                                            (P = v.item.typicalValues)),
                                    !v)
                                ) {
                                    var b = a.getHashValueAt(y),
                                        k = b[o.independant];
                                    if (k < l[o.independant].min || k > l[o.independant].max);
                                    else {
                                        var V = R(b);
                                        null === C && (C = V),
                                            y == O - 1 || V !== C
                                                ? (y === O - 1 && D(y, b, _),
                                                  _.length &&
                                                      ((P = this._getMergeSectionDataTypicalValues(_, o)) &&
                                                          this._addSectionSamplingDataCacheItem(I.items, _, P, o),
                                                      (_ = []),
                                                      (C = V),
                                                      y < O - 1 && D(y, b, _)))
                                                : D(y, b, _);
                                    }
                                }
                                P && M.push(P), ++y;
                            }
                            new Date();
                            f = new Date();
                            var U,
                                x,
                                F,
                                K = [e.create(n.x1, n.y1), e.create(n.x2, n.y2)],
                                B = [];
                            for (y = 0, O = M.length; y < O; ++y) {
                                P = M[y];
                                var G = ((F = P), d._clipDataValuePairInsideVisibleRange(F[0], F[1], o, l)),
                                    j = null,
                                    w = null,
                                    X = null;
                                if (G) {
                                    var H = p(G, o, s, i.spectrum_reversedAxises);
                                    if (((j = H), U)) w = [U[U.length - 1], H[0]];
                                    else if (x) {
                                        var W = x[x.length - 1],
                                            Y = this._calcSectionDataValueContextCoord(
                                                W,
                                                o,
                                                s,
                                                i.spectrum_reversedAxises
                                            );
                                        X = Kekule.GeometryUtils.clipLineSegmentByBox([Y, H[0]], K);
                                    }
                                    U = j;
                                } else {
                                    if (U) {
                                        var z = P[0];
                                        if (z) {
                                            var J = this._calcSectionDataValueContextCoord(
                                                z,
                                                o,
                                                s,
                                                i.spectrum_reversedAxises
                                            );
                                            X = Kekule.GeometryUtils.clipLineSegmentByBox([U[U.length - 1], J], K);
                                        }
                                    }
                                    U = null;
                                }
                                if (((x = P), j && j.length > 1)) {
                                    B.push("M"), B.push([j[0].x, j[0].y]);
                                    for (var q = 1, Z = j.length; q < Z; ++q) B.push("L"), B.push(j[q].x, j[q].y);
                                }
                                w && (B.push("M"), B.push([w[0].x, w[0].y]), B.push("L"), B.push([w[1].x, w[1].y])),
                                    X && (B.push("M"), B.push([X[0].x, X[0].y]), B.push("L"), B.push([X[1].x, X[1].y]));
                            }
                            if (B.length) {
                                var Q = Kekule.Render.DrawPathUtils.makePath.apply(this, B);
                                u = this.drawPath(r, Q, c);
                            }
                            new Date();
                            return u;
                        },
                        _getMergeSectionDataTypicalValues: function (e, t) {
                            for (
                                var a, r, n, i, o, s, l, u, c, d = Kekule.NumUtils.isNormalNumber, p = 0;
                                p < e.length;
                                ++p
                            ) {
                                var f = e[p][t.independant];
                                d(f) && (d(n) || (n = f), (o = f)),
                                    d((f = e[p][t.dependant])) &&
                                        ((!d(a) || a > f) &&
                                            ((a = f), ((s = {})[t.independant] = o), (s[t.dependant] = f), (u = p)),
                                        (!d(r) || r < f) &&
                                            ((r = f), ((l = {})[t.independant] = o), (l[t.dependant] = f), (c = p)));
                            }
                            if (((i = o), d(n) && d(i) && d(a) && d(r))) {
                                var m = {},
                                    h = {};
                                return (
                                    u < c
                                        ? ((m[t.independant] = n),
                                          (m[t.dependant] = a),
                                          (h[t.independant] = i),
                                          (h[t.dependant] = r))
                                        : ((m[t.independant] = n),
                                          (m[t.dependant] = r),
                                          (h[t.independant] = i),
                                          (h[t.dependant] = a)),
                                    [m, h]
                                );
                            }
                            return null;
                        },
                        _calcSectionDataValueContextCoord: function (e, t, a, r) {
                            var n = r
                                ? { y: e[t.independant], x: e[t.dependant] }
                                : { x: e[t.independant], y: e[t.dependant] };
                            return Kekule.NumUtils.isNormalNumber(n.x) && Kekule.NumUtils.isNormalNumber(n.y)
                                ? Kekule.CoordUtils.transform2DByMatrix(n, a)
                                : null;
                        },
                        _getContinuousSpectrumSectionSamplingCache: function (e, t, a) {
                            var r = this.getRenderCache(e).continuousSpectrumSectionSamplingCacheMap;
                            if (!r) return null;
                            var n = r.get(t);
                            return !n && a && ((n = {}), r.set(t, n)), n;
                        },
                        _setContinuousSpectrumSectionSamplingCache: function (e, t, a) {
                            var r = this.getRenderCache(e).continuousSpectrumSectionSamplingCacheMap;
                            return (
                                r ||
                                    ((r = new Kekule.MapEx()),
                                    (this.getRenderCache(e).continuousSpectrumSectionSamplingCacheMap = r)),
                                r.set(t, a),
                                a
                            );
                        },
                        _addSectionSamplingDataCacheItem: function (e, t, a, r) {
                            if ((a || (a = this._getMergeSectionDataTypicalValues(t, r)), a)) {
                                var n = {
                                        fromIndex: t.fromIndex,
                                        toIndex: t.toIndex,
                                        averageIndepValue: t.indepValueSum / (t.toIndex - t.fromIndex + 1),
                                        typicalValues: a,
                                    },
                                    i = e[0];
                                if (!i || i.fromIndex > t.toIndex) e.unshift(n);
                                else if (e[e.length - 1].toIndex < t.fromIndex) e.push(n);
                                else {
                                    for (var o = -1, s = 1, l = e.length - 1; s < l; ++s) {
                                        if (e[s].toIndex < t.fromIndex) {
                                            o = s;
                                            break;
                                        }
                                    }
                                    o >= 0 && e.splice(o, 0, n);
                                }
                            }
                        },
                        _getSectionCachedSamplingData: function (e, t, a) {
                            for (var r = a || 0, n = e.length, i = e[r]; i && r < n; ) {
                                if (i.fromIndex <= t && i.toIndex >= t)
                                    return {
                                        item: i,
                                        cacheIndex: r,
                                        dataValueFromIndex: i.fromIndex,
                                        dataValueToIndex: i.toIndex,
                                    };
                                if (!(i.toIndex < t)) return null;
                                i = e[++r];
                            }
                            return null;
                        },
                    })),
                    (Kekule.Render.Spectrum2DRenderer.sectionDataDrawerMap = {}),
                    Kekule.Render.Renderer2DFactory.register(
                        Kekule.Spectroscopy.Spectrum,
                        Kekule.Render.Spectrum2DRenderer
                    );
            }
        });
    })();
