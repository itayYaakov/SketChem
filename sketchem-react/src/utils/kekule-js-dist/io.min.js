(Kekule.TextLinesBuffer = Class.create(ObjectEx, {
    CLASS_NAME: "Kekule.TextLinesBuffer",
    LINEBREAK: "\n",
    initialize: function (e) {
        this.tryApplySuper("initialize"),
            this.setPropStoreFieldValue("lines", []),
            e && ("string" == typeof e ? this.setText(e) : this.setLines(e)),
            this.setCurrLineNo(0);
    },
    initProperties: function () {
        this.defineProp("lines", { dataType: DataType.ARRAY, serializable: !1 }),
            this.defineProp("text", {
                dataType: DataType.STRING,
                serializable: !1,
                getter: function () {
                    return this.getLines().join(this.LINEBREAK);
                },
                setter: function (e) {
                    this.setPropStoreFieldValue("lines", []), this.reset(), this.appendText(e);
                },
            }),
            this.defineProp("currLineNo", { dataType: DataType.INT, serializable: !1 });
    },
    getUnreadLines: function () {
        var e = [].concat(this.getLines());
        return e.splice(0, this.getCurrLineNo()), e;
    },
    getUnreadText: function () {
        return this.getUnreadLines().join(this.LINEBREAK);
    },
    appendText: function (e) {
        var t = e.split(this.LINEBREAK);
        this.appendLines(t);
    },
    appendLines: function (e) {
        this.setPropStoreFieldValue("lines", this.getLines().concat(e)),
            this.notifyPropSet("lines", this.getPropStoreFieldValue("lines"));
    },
    clear: function () {
        this.setLines([]), this.setCurrLineNo(0);
    },
    incCurrLineNo: function (e) {
        null == e && (e = 1);
        var t = this.getCurrLineNo();
        (t += e), this.setCurrLineNo(t);
    },
    getLineAt: function (e) {
        var t = this.getLines()[e];
        return t && t.length && "\r" === t.charAt(t.length - 1) && (t = t.substring(0, t.length - 1)), t;
    },
    getCurrLine: function () {
        return this.getLineAt(this.getCurrLineNo());
    },
    readLine: function () {
        var e = this.getLineAt(this.getCurrLineNo());
        return this.incCurrLineNo(), e;
    },
    writeLine: function (e) {
        this.getLines().splice(this.getCurrLineNo(), 0, e), this.incCurrLineNo();
    },
    writeLines: function (e) {
        for (var t = 0, r = e.length; t < r; ++t) this.writeLine(e[t]);
    },
    writeText: function (e) {
        var t = e.split(this.LINEBREAK);
        this.writeLines(t);
    },
    eof: function () {
        return this.getCurrLineNo() >= this.getLines().length;
    },
    reset: function () {
        this.setCurrLineNo(0);
    },
})),
    (function () {
        Kekule.globalOptions.add("IO", {}),
            (Kekule.IO = {}),
            (Kekule.IO.ChemDataType = {
                TEXT: "text",
                DOM: "dom",
                JSON: "json",
                BINARY: "bin",
                OTHER: "other",
                UNKNOWN: "unknown",
                isBinaryType: function (e) {
                    var t = Kekule.IO.ChemDataType;
                    return !e || e === t.BINARY || e === t.OTHER || e === t.UNKNOWN;
                },
            }),
            (Kekule.IO.DataFormat = {}),
            (Kekule.IO.MimeType = {
                TEXT: "text/plain",
                HTML: "text/html",
                XML: "text/xml",
                JSON: "application/json",
                JAVASCRIPT: "application/javascript",
                GIF: "image/gif",
                JPEG: "image/jpeg",
                PNG: "image/png",
                XPNG: "image/x-png",
                OCTSTREAM: "application/octet-stream",
            }),
            (Kekule.IO.DataFormatsManager = {
                _formats: {},
                register: function (t, r, l, a, n, i, o) {
                    var u = null;
                    u || (u = e._formats[t]), u || ((u = { id: t }), (e._formats[t] = u)), (u.mimeType = r);
                    var s = DataType.isArrayValue(l) ? l : [l];
                    return (
                        (s = s.map(function (e) {
                            return e ? e.toLowerCase() : e;
                        })),
                        u.fileExts ? Kekule.ArrayUtils.pushUnique(u.fileExts, s) : (u.fileExts = s),
                        a && a !== Kekule.IO.ChemDataType.UNKNOWN && (u.dataType = a),
                        (u.title = n),
                        (u.description = i),
                        o && (u = Object.extend(u, o)),
                        u
                    );
                },
                unregister: function (t) {
                    e._formats[t] && delete e._formats[t];
                },
                getAllIds: function () {
                    return Kekule.ObjUtils.getOwnedFieldNames(e._formats);
                },
                getFormatInfo: function (t) {
                    return e._formats[t] || null;
                },
                getMimeType: function (t) {
                    var r = e.getFormatInfo(t);
                    return r ? r.mimeType : null;
                },
                getFileExts: function (t) {
                    var r = e.getFormatInfo(t);
                    return r ? r.fileExts : null;
                },
                findFormat: function (t, r) {
                    if (!t && !r) return null;
                    for (var l = e.getAllIds(), a = !1, n = 0, i = l.length; n < i; ++n) {
                        var o = e.getFormatInfo(l[n]);
                        if (((a = t && t === o.mimeType) || (a = r && o.fileExts.indexOf(r.toLowerCase()) >= 0), a))
                            return o;
                    }
                    return null;
                },
                findFormatId: function (e, t) {
                    var r = Kekule.IO.DataFormatsManager.findFormat(e, t);
                    return r ? r.id : null;
                },
            });
        var e = Kekule.IO.DataFormatsManager;
        (Kekule.IO.dataFormatsManager = Kekule.IO.DataFormatsManager),
            (Kekule.IO.ChemDataReader = Class.create(ObjectEx, {
                initialize: function (e) {
                    this.tryApplySuper("initialize");
                },
                CLASS_NAME: "Kekule.IO.ChemDataReader",
                readData: function (e, t, r, l) {
                    if (!t) {
                        var a = Kekule.IO.DataFormatsManager.getFormatInfo(r);
                        (t = a ? a.dataType : null) ||
                            (t =
                                "string" == typeof e
                                    ? Kekule.IO.ChemDataType.TEXT
                                    : e.getElementsByTagName
                                    ? Kekule.IO.ChemDataType.DOM
                                    : Kekule.IO.ChemDataType.BINARY);
                    }
                    var n = this.doReadData(e, t, r, l || {});
                    if (n instanceof Kekule.ChemObject && n.getSrcInfo) {
                        var i = n.getSrcInfo();
                        (i.data = e), (i.dataType = t);
                        var o = Kekule.IO.DataFormatsManager.getFormatInfo(r);
                        o && ((i.format = r), (i.mimeType = o.mimeType), (i.possibleFileExts = o.fileExts));
                    }
                    return n;
                },
                doReadData: function (e, t, r, l) {},
            })),
            (Kekule.IO.ChemDataWriter = Class.create(ObjectEx, {
                CLASS_NAME: "Kekule.IO.ChemDataWriter",
                initialize: function (e) {
                    this.tryApplySuper("initialize");
                },
                writeData: function (e, t, r, l) {
                    if (!t) {
                        var a = Kekule.IO.DataFormatsManager.getFormatInfo(r);
                        t = a ? a.dataType : null;
                    }
                    return this.doWriteData(e, t, r, l || {});
                },
                doWriteData: function (e, t, r, l) {},
            })),
            (Kekule.IO.ChemDataReaderManager = {
                _readers: [],
                register: function (e, t, r, l) {
                    if (e && t && r && (!DataType.isArrayValue(r) || r.length)) {
                        if (Kekule.IO.ChemDataReaderManager.getReaderInfoById(e))
                            return Kekule.raise(Kekule.$L("ErrorMsg.READER_ID_ALREADY_EXISTS")), null;
                        var a = { id: e, readerClass: t, formatId: DataType.isArrayValue(r) ? r : [r] };
                        return (a = Object.extend(a, l)), Kekule.IO.ChemDataReaderManager._readers.push(a), a;
                    }
                },
                unregister: function (e) {
                    for (var t = -1, r = Kekule.IO.ChemDataReaderManager._readers, l = 0, a = r.length; l < a; ++l) {
                        if (r[l].id === e) {
                            t = l;
                            break;
                        }
                    }
                    if (t >= 0) {
                        var n = r[t];
                        return r.splice(t, 1), n;
                    }
                    return null;
                },
                getAllReadableFormatIds: function () {
                    for (var e = [], t = Kekule.IO.ChemDataReaderManager._readers, r = 0, l = t.length; r < l; ++r) {
                        var a = t[r].formatId;
                        Kekule.ArrayUtils.pushUnique(e, a);
                    }
                    return e;
                },
                getAllReadableFormats: function () {
                    for (
                        var t = [], r = Kekule.IO.ChemDataReaderManager.getAllReadableFormatIds(), l = 0, a = r.length;
                        l < a;
                        ++l
                    ) {
                        var n = e.getFormatInfo(r[l]);
                        n && t.push(n);
                    }
                    return t;
                },
                getAvailableReaderInfos: function (e) {
                    for (var t = [], r = Kekule.IO.ChemDataReaderManager._readers, l = r.length - 1; l >= 0; --l)
                        Kekule.ObjUtils.match(r[l], e) && t.push(r[l]);
                    return t;
                },
                getReaderInfo: function (e) {
                    for (var t = Kekule.IO.ChemDataReaderManager._readers, r = t.length - 1; r >= 0; --r)
                        if (Kekule.ObjUtils.match(t[r], e)) return t[r];
                    return null;
                },
                getReaderInfoById: function (e) {
                    return Kekule.IO.ChemDataReaderManager.getReaderInfo({ id: e });
                },
                getReaderInfoByFormat: function (e, t) {
                    for (var r = Kekule.IO.ChemDataReaderManager._readers, l = r.length - 1; l >= 0; --l)
                        if ((!t || Kekule.ObjUtils.match(r[l], t)) && r[l].formatId.indexOf(e) >= 0) return r[l];
                    return null;
                },
                getReaderInfoByFileExt: function (e, t) {
                    var r = Kekule.IO.DataFormatsManager.findFormatId(null, e);
                    return r ? Kekule.IO.ChemDataReaderManager.getReaderInfoByFormat(r, t) : null;
                },
                createReaderOfInfo: function (e) {
                    return new e.readerClass(e.createOptions);
                },
                getReaderOfInfo: function (e) {
                    return (
                        e.instance || (e.instance = Kekule.IO.ChemDataReaderManager.createReaderOfInfo(e)), e.instance
                    );
                },
                createReader: function (e) {
                    var t = Kekule.IO.ChemDataReaderManager.getReaderInfo(e);
                    if (t) return Kekule.IO.ChemDataReaderManager.createReaderOfInfo(t);
                },
                getReader: function (e) {
                    var t = Kekule.IO.ChemDataReaderManager.getReaderInfo(e);
                    if (t) return Kekule.IO.ChemDataReaderManager.getReaderOfInfo(t);
                },
                createReaderById: function (e) {
                    return Kekule.IO.ChemDataReaderManager.createReader({ id: e });
                },
                getReaderById: function (e) {
                    return Kekule.IO.ChemDataReaderManager.getReader({ id: e });
                },
                createReaderByFormat: function (e, t) {
                    var r = Kekule.IO.ChemDataReaderManager.getReaderInfoByFormat(e, t);
                    return r ? Kekule.IO.ChemDataReaderManager.createReaderOfInfo(r) : null;
                },
                getReaderByFormat: function (e, t) {
                    var r = Kekule.IO.ChemDataReaderManager.getReaderInfoByFormat(e, t);
                    return r ? Kekule.IO.ChemDataReaderManager.getReaderOfInfo(r) : null;
                },
                createReaderByFileExt: function (e, t) {
                    var r = Kekule.IO.ChemDataReaderManager.getReaderInfoByFileExt(e, t);
                    return r ? Kekule.IO.ChemDataReaderManager.createReaderOfInfo(r) : null;
                },
                getReaderByFileExt: function (e, t) {
                    var r = Kekule.IO.ChemDataReaderManager.getReaderInfoByFileExt(e, t);
                    return r ? Kekule.IO.ChemDataReaderManager.getReaderOfInfo(r) : null;
                },
                createReaderByMimeType: function (e) {
                    var t = Kekule.IO.DataFormatsManager.findFormatId(e, null);
                    return t ? Kekule.IO.ChemDataReaderManager.createReaderByFormat(t) : null;
                },
                getReaderByMimeType: function (e) {
                    var t = Kekule.IO.DataFormatsManager.findFormatId(e, null);
                    return t ? Kekule.IO.ChemDataReaderManager.getReaderByFormat(t) : null;
                },
            }),
            (Kekule.IO.ChemDataWriterManager = {
                _writers: [],
                register: function (e, t, r, l, a) {
                    if (e && t && l && (!DataType.isArrayValue(l) || l.length)) {
                        var n = Kekule.IO.ChemDataWriterManager.getWriterInfoById(e);
                        if (n)
                            return t === n.writerClass
                                ? (Kekule.ArrayUtils.pushUnique(n.srcClasses, r),
                                  Kekule.ArrayUtils.pushUnique(n.formatId, l),
                                  n)
                                : (Kekule.raise(Kekule.$L("ErrorMsg.WRITER_ID_ALREADY_EXISTS")), null);
                        var i = { id: e, writerClass: t, srcClasses: r, formatId: DataType.isArrayValue(l) ? l : [l] };
                        return (i = Object.extend(i, a)), Kekule.IO.ChemDataWriterManager._writers.push(i), i;
                    }
                },
                unregister: function (e) {
                    for (var t = -1, r = Kekule.IO.ChemDataWriterManager._writers, l = 0, a = r.length; l < a; ++l) {
                        if (r[l].id === e) {
                            t = l;
                            break;
                        }
                    }
                    if (t >= 0) {
                        var n = r[t];
                        return r.splice(t, 1), n;
                    }
                    return null;
                },
                getAllWritableFormatIds: function () {
                    for (var e = [], t = Kekule.IO.ChemDataWriterManager._writers, r = 0, l = t.length; r < l; ++r) {
                        var a = t[r].formatId;
                        Kekule.ArrayUtils.pushUnique(e, a);
                    }
                    return e;
                },
                getAllWritableFormats: function () {
                    for (
                        var t = [], r = Kekule.IO.ChemDataWriterManager.getAllWritableFormatIds(), l = 0, a = r.length;
                        l < a;
                        ++l
                    ) {
                        var n = e.getFormatInfo(r[l]);
                        n && t.push(n);
                    }
                    return t;
                },
                getAvailableWriterInfos: function (e, t) {
                    for (
                        var r = [],
                            l = ClassEx.isClass(t) ? t : t.getClass ? t.getClass() : t ? null : void 0,
                            a = Kekule.IO.ChemDataWriterManager._writers,
                            n = a.length - 1;
                        n >= 0;
                        --n
                    )
                        if (Kekule.ObjUtils.match(a[n], e))
                            if (void 0 !== l) {
                                if (l)
                                    for (var i = 0, o = a[n].srcClasses.length; i < o; ++i)
                                        ClassEx.isOrIsDescendantOf(l, a[n].srcClasses[i]) && r.push(a[n]);
                            } else r.push(a[n]);
                    return r;
                },
                getWriterInfo: function (e, t) {
                    for (var r = Kekule.IO.ChemDataWriterManager._writers, l = r.length - 1; l >= 0; --l)
                        if (Kekule.ObjUtils.match(r[l], e)) {
                            if (t) {
                                for (var a = 0, n = r[l].srcClasses.length; a < n; ++a)
                                    if (t instanceof r[l].srcClasses[a]) return r[l];
                                return null;
                            }
                            return r[l];
                        }
                    return null;
                },
                getWriterInfoById: function (e, t) {
                    return Kekule.IO.ChemDataWriterManager.getWriterInfo({ id: e }, t);
                },
                getWriterInfoByFormat: function (e, t, r) {
                    for (var l = Kekule.IO.ChemDataWriterManager._writers, a = l.length - 1; a >= 0; --a)
                        if ((!t || Kekule.ObjUtils.match(l[a], t)) && l[a].formatId.indexOf(e) >= 0) {
                            if (r) {
                                for (var n = 0, i = l[a].srcClasses.length; n < i; ++n)
                                    if (r instanceof l[a].srcClasses[n]) return l[a];
                                return null;
                            }
                            return l[a];
                        }
                    return null;
                },
                getWriterInfoByFileExt: function (e, t, r) {
                    var l = Kekule.IO.DataFormatsManager.findFormatId(null, e);
                    return l ? Kekule.IO.ChemDataWriterManager.getWriterInfoByFormat(l, t, r) : null;
                },
                createWriterOfInfo: function (e) {
                    return new e.writerClass(e.createOptions);
                },
                getWriterOfInfo: function (e) {
                    return (
                        e.instance || (e.instance = Kekule.IO.ChemDataWriterManager.createWriterOfInfo(e)), e.instance
                    );
                },
                createWriter: function (e, t) {
                    var r = Kekule.IO.ChemDataWriterManager.getWriterInfo(e, t);
                    return r ? Kekule.IO.ChemDataWriterManager.createWriterOfInfo(r) : null;
                },
                getWriter: function (e, t) {
                    var r = Kekule.IO.ChemDataWriterManager.getWriterInfo(e, t);
                    return r ? Kekule.IO.ChemDataWriterManager.getWriterOfInfo(r) : null;
                },
                createWriterById: function (e, t) {
                    return Kekule.IO.ChemDataWriterManager.createWriter({ id: e }, t);
                },
                getWriterById: function (e, t) {
                    return Kekule.IO.ChemDataWriterManager.getWriter({ id: e }, t);
                },
                createWriterByFormat: function (e, t, r) {
                    var l = Kekule.IO.ChemDataWriterManager.getWriterInfoByFormat(e, t, r);
                    return l ? Kekule.IO.ChemDataWriterManager.createWriterOfInfo(l) : null;
                },
                getWriterByFormat: function (e, t, r) {
                    var l = Kekule.IO.ChemDataWriterManager.getWriterInfoByFormat(e, t, r);
                    return l ? Kekule.IO.ChemDataWriterManager.getWriterOfInfo(l) : null;
                },
                createWriterByFileExt: function (e, t, r) {
                    var l = Kekule.IO.ChemDataWriterManager.getWriterInfoByFileExt(e, t, r);
                    return l ? Kekule.IO.ChemDataWriterManager.createWriterOfInfo(l) : null;
                },
                getWriterByFileExt: function (e, t, r) {
                    var l = Kekule.IO.ChemDataWriterManager.getWriterInfoByFileExt(e, t, r);
                    return l ? Kekule.IO.ChemDataWriterManager.getWriterOfInfo(l) : null;
                },
                createWriterByMimeType: function (e, t) {
                    var r = Kekule.IO.DataFormatsManager.findFormatId(e, null);
                    return r ? Kekule.IO.ChemDataWriterManager.createWriterByFormat(r, null, t) : null;
                },
                getWriterByMimeType: function (e) {
                    var t = Kekule.IO.DataFormatsManager.findFormatId(e, null);
                    return t ? Kekule.IO.ChemDataWriterManager.getWriterByFormat(t, null) : null;
                },
            }),
            (Kekule.IO.loadFormatData = function (e, t, r) {
                var l = Kekule.IO.ChemDataReaderManager.getReaderByFormat(t);
                if (l) {
                    var a = l.readData(e, null, t, r);
                    if (!1 === a) {
                        var n = Kekule.$L("ErrorMsg.FAIL_TO_READ_FORMAT") + t;
                        Kekule.raise(n);
                    }
                    return a;
                }
                n = Kekule.$L("ErrorMsg.NO_SUITABLE_READER_FOR_FORMAT") + t;
                return Kekule.raise(n), null;
            }),
            (Kekule.IO.loadMimeData = function (e, t, r) {
                return Kekule.IO.loadTypedData(e, t, null, r);
            }),
            (Kekule.IO.loadTypedData = function (e, t, r, l) {
                var a;
                r && (a = Kekule.UrlUtils.extractFileExt(r));
                var n,
                    i = Kekule.IO.DataFormatsManager.findFormatId(t || null, a);
                if ((i && (n = Kekule.IO.loadFormatData(e, i, l)), !1 !== n)) {
                    if (n instanceof Kekule.ChemObject && n.getSrcInfo) {
                        var o = n.getSrcInfo();
                        t && (o.mimeType = t), a && (o.fileExt = a), r && ((o.url = r), (o.fileName = r));
                    }
                    return n;
                }
                var u = t
                    ? Kekule.$L("ErrorMsg.NO_SUITABLE_READER_FOR_MIMETYPE") + t
                    : Kekule.$L("ErrorMsg.NO_SUITABLE_READER_FOR_FILEEXT") + a;
                return Kekule.raise(u), null;
            }),
            (Kekule.IO.loadFileData = function (e, t, r, l) {
                if (Kekule.BrowserFeature.fileapi) {
                    var a,
                        n = e.name,
                        i = Kekule.UrlUtils.extractFileExt(n);
                    if (
                        !(a = r
                            ? Kekule.IO.DataFormatsManager.getFormatInfo(r)
                            : Kekule.IO.DataFormatsManager.findFormat(null, i))
                    ) {
                        var o = Kekule.$L("ErrorMsg.NO_SUITABLE_READER_FOR_FILEEXT") + i;
                        return void Kekule.raise(o);
                    }
                    var u = Kekule.IO.ChemDataType.isBinaryType(a.dataType),
                        s = new FileReader();
                    (s.onload = function (e) {
                        var r = s.result,
                            i = Kekule.IO.loadFormatData(r, a.id, l);
                        i && i.getSrcInfo && (i.getSrcInfo().fileName = n);
                        t(i, !1 !== i, r);
                    }),
                        u ? s.readAsArrayBuffer(e) : s.readAsText(e);
                } else Kekule.error(Kekule.$L("ErrorMsg.FILE_API_NOT_SUPPORTED"));
            }),
            (Kekule.IO.loadUrlData = function (e, t, r, l) {
                if (!Kekule.Ajax) return Kekule.raise(Kekule.$L("ErrorMsg.AJAX_FILELOADER_NOT_FOUND")), null;
                Kekule.Ajax.sendRequest(e, function (a, n, i) {
                    if (a && i) {
                        var o;
                        if ((r && (o = Kekule.IO.DataFormatsManager.getFormatInfo(r)), !r)) {
                            var u = Kekule.Ajax.getResponseMimeType(n);
                            o = Kekule.IO.DataFormatsManager.findFormat(u);
                        }
                        if (!r) {
                            var s = Kekule.UrlUtils.extractFileExt(e);
                            o = Kekule.IO.DataFormatsManager.findFormat(null, s);
                        }
                        if (!o) {
                            var d = Kekule.$L("ErrorMsg.NO_SUITABLE_READER_FOR_FILEEXT") + s;
                            return void Kekule.raise(d);
                        }
                        var m = Kekule.IO.loadFormatData(a, o.id, l);
                        (m.getSrcInfo().fileName = e), t(m, (i = !1 !== m), a);
                    } else Kekule.raise(Kekule.$L("ErrorMsg.FAIL_TO_LOAD_FILE_URL") + e);
                });
            }),
            (Kekule.IO.saveFormatData = function (e, t, r) {
                var l = Kekule.IO.ChemDataWriterManager.getWriterByFormat(t, null, e);
                if (l) return l.writeData(e, null, t, r);
                var a = Kekule.$L("ErrorMsg.NO_SUITABLE_WRITER_FOR_FORMAT") + t;
                return Kekule.raise(a), null;
            }),
            (Kekule.IO.saveMimeData = function (e, t, r) {
                return Kekule.IO.saveTypedData(e, t, null, r);
            }),
            (Kekule.IO.saveTypedData = function (e, t, r, l) {
                var a;
                r && ((a = Kekule.UrlUtils.extractFileExt(r)) || (a = r));
                var n,
                    i = Kekule.IO.DataFormatsManager.findFormatId(t || null, a);
                if ((i && (n = Kekule.IO.saveFormatData(e, i, l)), Kekule.ObjUtils.isUnset(n))) {
                    var o = t
                        ? Kekule.$L("ErrorMsg.NO_SUITABLE_WRITER_FOR_MIMETYPE") + t
                        : Kekule.$L("ErrorMsg.NO_SUITABLE_WRITER_FOR_FILEEXT") + a;
                    return Kekule.raise(o), null;
                }
                return n;
            });
    })(),
    (function () {
        "use strict";
        Kekule.globalOptions.add("IO.cml", {
            prettyPrint: !0,
            enableReadRootObjList: !0,
            defaultRootObjListHolder: Kekule.ChemSpace,
        }),
            (Kekule.IO.CML = {
                CML2CORE_NAMESPACE_URI: "http://www.xml-cml.org/schema/cml2/core",
                CML3_SCHEMA_NAMESPACE_URI: "http://www.xml-cml.org/schema",
                ARRAY_VALUE_DELIMITER: " ",
                TYPED_ELEM_NAMES: ["string", "integer", "float"],
                TYPED_ARRAY_ELEM_NAMES: ["stringArray", "integerArray", "floatArray"],
                ATOMS_REF_ATTRIBS: ["atomRef", "atomRefs2", "atomRefs3", "atomRefs4", "atomRefs", "atomRefArray"],
                BONDS_REF_ATTRIBS: ["bondRef", "bondRefs", "bondRefArray"],
                MOL_REF_ATTRIBS: ["moleculeRef", "moleculeRefs"],
                DEFAULT_VALUE_DELIMITER_PATTERN: /\s+/gm,
            }),
            (Kekule.IO.CML.LEGAL_CORE_NAMESPACE_URIS = [
                Kekule.IO.CML.CML2CORE_NAMESPACE_URI,
                Kekule.IO.CML.CML3_SCHEMA_NAMESPACE_URI,
            ]),
            (Kekule.IO.CmlUtils = {
                _cmlUnitConvMap: [
                    ["m", "m", "m", !0],
                    ["second", "s", "sec", !0],
                    ["hour", "h", "hr", !1],
                    ["kg", "kg", "kg", !0],
                    ["k", "K", "K", !0],
                    ["mol", "mol", "mol", !0],
                    ["candela", "cd", "cd", !0],
                    ["radian", "rad", "rad", !0],
                    ["steradian", "sr", "sr", !0],
                    ["hertz", "Hz", "Hz", !0],
                    ["newton", "N", "N", !0],
                    ["joule", "J", "J", !0],
                    ["watt", "W", "W", !0],
                    ["pascal", "Pa", "Pa", !0],
                    ["coulomb", "C", "C", !0],
                    ["volt", "V", "V", !0],
                    ["ampere", "A", "A", !0],
                    ["ohm", "[Omega]", "Ω", !0],
                    ["farad", "F", "F", !0],
                    ["siemens", "S", "S", !0],
                    ["weber", "Wb", "Wb", !0],
                    ["tesla", "T", "T", !0],
                    ["henry", "H", "H", !0],
                    ["becquerel", "Bq", "Bq", !0],
                    ["gray", "Gy", "Gy", !0],
                    ["sievert", "Sv", "Sv", !0],
                    ["katal", "kat", "kat", !0],
                    ["molarity", "_i_M__i_", "mol/L", !0],
                    ["molality", "_i_m__i_", "mol/kg", !0],
                    ["m2", "m2", "m2", !0],
                    ["m3", "m3", "m3", !0],
                    ["m.s-1", "m.s-1", "m/s", !0],
                    ["m.s-2", "m.s-2", "m·s-2", !0],
                    ["rad.s-1", "rad.s-1", "rad/s", !0],
                    ["n.s", "N.s", "N·s", !0],
                    ["n.m.s", "N.m.s", "N·m·s", !0],
                    ["n.m", "N.m", "N·m", !0],
                    ["m-1", "m-1", "m-1", !0],
                    ["kg.m-3", "kg.m-3", "kg·m-3", !0],
                    ["kg-1.m3", "kg-1.m3", "kg-1·m3", !0],
                    ["m-3.mol", "m-3.mol", "m-3·mol", !0],
                    ["m3.mol-1", "m3.mol-1", "m3/mol", !0],
                    ["j.k-1", "J.K-1", "J/K", !0],
                    ["j.k-1.mol-1", "J.K-1.mol-1", "J·K-1·mol-1", !0],
                    ["j.k-1.kg-1", "J.K-1.kg-1", "J·K-1·kg-1", !0],
                    ["j.mol-1", "J.mol-1", "J/mol", !0],
                    ["j.kg-1", "J.kg-1", "J/kg", !0],
                    ["j.m-3", "J.m-3", "J·m-3", !0],
                    ["n.m-1", "N.m-1 = J.m-2", "N/m", !0],
                    ["w.m-2", "W.m-2", "W·m-2", !0],
                    ["w.m-1.k-1", "W.m-1.K-1", "W·m-1·K-1", !0],
                    ["m2.s-1", "m2.s-1", "m2/s", !0],
                    ["pa.s", "Pa.s", "Pa·s", !0],
                    ["pa.s", "N.s.m-2", "Pa·s", !0],
                    ["c.m-3", "C.m-3", "C·m-3", !0],
                    ["a.m-2", "A.m-2", "A·m-2", !0],
                    ["s.m-1", "S.m-1", "S/m", !0],
                    ["s.m2.mol-1", "S.m2.mol-1", "S·m2/mol", !0],
                    ["f.m-1", "F.m-1", "F/m", !0],
                    ["h.m-1", "H.m-1", "H/m", !0],
                    ["v.m-1", "V.m-1", "V/m", !0],
                    ["a.m-1", "A.m-1", "A/m", !0],
                    ["cd.m-2", "cd.m-2", "cd·m-2", !0],
                    ["c.kg-1", "C.kg-1", "C/kg", !0],
                    ["gy.s-1", "Gy.s-1", "Gy/s", !0],
                    ["j.m-1", "J.m-1", "J/m", !0],
                    ["ang", "[Aring]", "Å", !1],
                    ["deg", "[deg]", "deg", !1],
                    ["ang3", "A3", "Å3", !1],
                    ["celsius", "[deg]C", "℃", !1],
                    ["debye", "D", "D", !1],
                    ["electron", "e", "e", !1],
                    ["hartree", "hart", "hart", !1],
                    ["gpa", "GPa", "GPa", !1],
                    ["gpa-1", "GPa-1", "GPa-1", !1],
                    ["atmosphere", "atm", "atm", !1],
                    ["kcal.mol-1.ang-1", "kcal mol-1 ang-1", "kcal·mol-1·ang-1", !1],
                    ["kj.mol-1", "kj mol-1", "kj/mol", !1],
                    ["l", "L", "L", !1],
                    ["ml", "mL", "mL", !1],
                    ["kcal.ang-1", "kcal.ang-1", "kcal/Å", !1],
                    ["kcal.rad-1", "kcal.rad-1", "kcal/rad", !1],
                    ["ph", "pH", "pH", !1],
                    ["centipoise", "cp", "cp", !1],
                    ["km.s-1", "km/s", "km/s", !1],
                    ["arbitrary", "arb", "arb", !1],
                ],
                tryParseFloat: function (e) {
                    var t = parseFloat(e);
                    return Kekule.NumUtils.isNormalNumber(t) ? t : e;
                },
                convertSimpleValueByDataType: function (e, t, r) {
                    var l;
                    switch (t) {
                        case "xsd:boolean":
                            l = Kekule.StrUtils.strToBool(e);
                            break;
                        case "xsd:float":
                        case "xsd:double":
                        case "xsd:duration":
                        case "xsd:decimal":
                            l = parseFloat(e);
                            break;
                        case "xsd:integer":
                        case "xsd:nonPositiveInteger":
                        case "xsd:negativeInteger":
                        case "xsd:long":
                        case "xsd:int":
                        case "xsd:short":
                        case "xsd:byte":
                        case "xsd:nonNegativeInteger":
                        case "xsd:unsignedLong":
                        case "xsd:unsignedInt":
                        case "xsd:unsignedShort":
                        case "xsd:unsignedByte":
                        case "xsd:positiveInteger":
                            l = parseInt(e);
                            break;
                        default:
                            l = e;
                    }
                    return l;
                },
                getCmlTypeForDataType: function (e) {
                    return e == DataType.INT
                        ? "xsd:integer"
                        : e == DataType.FLOAT
                        ? "xsd:float"
                        : e == DataType.BOOL
                        ? "xsd:boolean"
                        : null;
                },
                cmlNsTokenToKekule: function (e) {
                    return e.replace(/\:/g, ".");
                },
                kekuleNsTokenToCml: function (e) {
                    return e.replace(/\./g, ":");
                },
                getCmlNsValueDetails: function (e) {
                    var t = e.indexOf(":");
                    return { namespace: t >= 0 ? e.substring(0, t) : "", localName: t >= 0 ? e.substr(t + 1) : e };
                },
                getCmlNsValueLocalPart: function (e) {
                    var t = e.indexOf(":");
                    return t >= 0 ? e.substr(t + 1) : e;
                },
                cmlUnitStrToMetricsUnitSymbol: function (e) {
                    for (
                        var t,
                            r,
                            l = Kekule.IO.CmlUtils.getCmlNsValueLocalPart(e),
                            a = l.toLowerCase(),
                            n = a.length > 3 && a.endsWith("s") ? a.substr(0, a.length - 1) : null,
                            i = (Kekule.Unit, Kekule.IO.CmlUtils._cmlUnitConvMap),
                            o = 0,
                            u = i.length;
                        o < u;
                        ++o
                    )
                        if (l === i[o][0] || l === i[o][1]) {
                            t = i[o][2];
                            break;
                        }
                    if (!t)
                        for (o = 0, u = i.length; o < u; ++o)
                            if (a === i[o][0].toLowerCase() || a === i[o][1].toLowerCase()) {
                                t = i[o][2];
                                break;
                            }
                    if (!t && n)
                        for (o = 0, u = i.length; o < u; ++o)
                            if (n === i[o][0].toLowerCase() || n === i[o][1].toLowerCase()) {
                                t = i[o][2];
                                break;
                            }
                    t || (t = (r = Kekule.Unit.getUnit(l, !0)) && r.symbol);
                    t || (t = (r = Kekule.Unit.getUnitByName(l, !0)) && r.symbol);
                    !t && n && (t = (r = Kekule.Unit.getUnitByName(n, !0)) && r.symbol);
                    return t || l;
                },
                metricsUnitSymbolToCmlUnitStr: function (e) {
                    for (var t, r = Kekule.IO.CmlUtils._cmlUnitConvMap, l = 0, a = r.length; l < a; ++l) {
                        var n = r[l];
                        if (e === n[2]) {
                            t = (n[3] ? "siUnits:" : "units:") + n[0];
                            break;
                        }
                    }
                    return t || (t = "units:" + e), t;
                },
                cmlBondOrderToKekule: function (e) {
                    var t = parseInt(e);
                    if (t != t)
                        switch (e.toUpperCase()) {
                            case "A":
                                t = Kekule.BondOrder.EXPLICIT_AROMATIC;
                                break;
                            case "D":
                                t = Kekule.BondOrder.DOUBLE;
                                break;
                            case "T":
                                t = Kekule.BondOrder.TRIPLE;
                                break;
                            case "S":
                            default:
                                t = Kekule.BondOrder.SINGLE;
                        }
                    return t;
                },
                kekuleBondOrderToCml: function (e) {
                    switch (e) {
                        case Kekule.BondOrder.EXPLICIT_AROMATIC:
                            return "A";
                        case Kekule.BondOrder.QUAD:
                            return "4";
                        case Kekule.BondOrder.DOUBLE:
                            return "D";
                        case Kekule.BondOrder.TRIPLE:
                            return "T";
                        default:
                            return "S";
                    }
                },
                cmlBondStereoToKekule: function (e) {
                    var t;
                    switch (e.toUpperCase()) {
                        case "E":
                            t = Kekule.BondStereo.E;
                            break;
                        case "Z":
                            t = Kekule.BondStereo.Z;
                            break;
                        case "C":
                            t = Kekule.BondStereo.CIS;
                            break;
                        case "T":
                            t = Kekule.BondStereo.TRANS;
                            break;
                        case "W":
                            t = Kekule.BondStereo.UP;
                            break;
                        case "H":
                            t = Kekule.BondStereo.DOWN;
                            break;
                        default:
                            t = Kekule.BondStereo.NONE;
                    }
                    return t;
                },
                kekuleBondStereoToCml: function (e) {
                    switch (e) {
                        case Kekule.BondStereo.UP:
                            return { value: "W" };
                        case Kekule.BondStereo.UP_INVERTED:
                            return { value: "W", invert: !0 };
                        case Kekule.BondStereo.DOWN:
                            return { value: "H" };
                        case Kekule.BondStereo.DOWN_INVERTED:
                            return { value: "H", invert: !0 };
                        case Kekule.BondStereo.E:
                            return { value: "E" };
                        case Kekule.BondStereo.Z:
                            return { value: "Z" };
                        case Kekule.BondStereo.CIS:
                            return { value: "C" };
                        case Kekule.BondStereo.TRANS:
                            return { value: "T" };
                        default:
                            return { value: null };
                    }
                },
                reagentRoleToKekule: function (e) {
                    var t = Kekule.ReactionRole;
                    switch (e) {
                        case "reagent":
                            return t.REAGENT;
                        case "catalyst":
                        case "solvent":
                            return t.CATALYST;
                        default:
                            return e;
                    }
                },
                kekuleReagentRoleToCml: function (e) {
                    var t = Kekule.ReactionRole;
                    switch (e) {
                        case t.REAGENT:
                            return "reagent";
                        case t.CATALYST:
                            return "catalyst";
                        case t.SOLVENT:
                            return "solvent";
                        default:
                            return e;
                    }
                },
                isDummyElementType: function (e) {
                    return "Du" == e || "Dummy" == e;
                },
                isRGroupElementType: function (e) {
                    return "R" == e;
                },
                isAtomListElementType: function (e) {
                    return "L" == e;
                },
                getNodeElementType: function (e) {
                    if (e instanceof Kekule.Atom) return e.getSymbol();
                    if (!(e instanceof Kekule.Pseudoatom))
                        return e instanceof Kekule.VariableAtom
                            ? "R"
                            : e instanceof Kekule.StructureFragment
                            ? "R"
                            : e.getSymbol
                            ? e.getSymbol()
                            : "*";
                    switch (e.getAtomType()) {
                        case Kekule.PseudoatomType.DUMMY:
                            return "Du";
                        case Kekule.PseudoatomType.ANY:
                            return "A";
                        case Kekule.PseudoatomType.HETERO:
                            return "Q";
                        case Kekule.PseudoatomType.CUSTOM:
                        default:
                            return e.getSymbol();
                    }
                },
                createNodeByCmdElementType: function (e, t, r) {
                    return Kekule.IO.CmlUtils.isDummyElementType(t)
                        ? new Kekule.Pseudoatom(e, Kekule.PseudoatomType.DUMMY)
                        : Kekule.IO.CmlUtils.isRGroupElementType(t)
                        ? new Kekule.RGroup(e)
                        : Kekule.IO.CmlUtils.isAtomListElementType(t)
                        ? new Kekule.VariableAtom(e)
                        : Kekule.Element.isElementSymbolAvailable(t) || t == Kekule.Element.UNSET_ELEMENT
                        ? new Kekule.Atom(e, t, Math.round(r))
                        : new Kekule.Pseudoatom(e, Kekule.PseudoatomType.CUSTOM, t);
                },
            });
        var e = Kekule.IO.CmlUtils;
        Kekule.IO.CmlDomUtils = {
            splitCmlArrayValue: function (e) {
                return "object" == typeof e && e.length
                    ? e
                    : Kekule.StrUtils.normalizeSpace(Kekule.StrUtils.trim(e)).split(
                          Kekule.IO.CML.ARRAY_VALUE_DELIMITER
                      );
            },
            mergeToCmlArrayValue: function (e) {
                return e.join(" ");
            },
            analysisCmlFormulaConciseValue: function (e) {
                for (
                    var t, r = Kekule.IO.CmlDomUtils.splitCmlArrayValue(e), l = 0, a = r.length, n = [], i = null;
                    l < a;

                ) {
                    var o = r[l],
                        u = parseFloat(o);
                    u != u
                        ? (i && n.push(i), (i = { elementType: o }))
                        : i
                        ? ((i.count = u), n.push(i), (i = null))
                        : l == a - 1 && (t = u),
                        ++l;
                }
                return { isotopes: n, formalCharge: t };
            },
            getCmlBuiltinElemInfo: function (e, t, r) {
                var l = e.getAttribute("builtin");
                return (
                    !l &&
                        t &&
                        (e.getAttributeNS
                            ? (l = e.getAttributeNS(t, "builtin"))
                            : r && (l = r.getAttributeNS(t, "builtin", e))),
                    l ? { name: l, value: Kekule.DomUtils.getElementText(e) } : null
                );
            },
            readCmlTypedPropertyElem: function (e, t, r) {
                var l;
                if (
                    (!(l = e.getAttribute("builtin")) &&
                        t &&
                        (e.getAttributeNS
                            ? (l = e.getAttributeNS(t, "builtin"))
                            : r && (l = r.getAttributeNS(t, "builtin", e))),
                    l)
                ) {
                    var a = Kekule.DomUtils.getElementText(e);
                    switch (Kekule.DomUtils.getLocalName(e)) {
                        case "float":
                            a = parseFloat(a);
                            break;
                        case "integer":
                            a = parseInt(a);
                    }
                    return { name: l, value: a };
                }
                return null;
            },
            readCmlTypedPropertyArrayElem: function (e, t, r) {
                var l;
                if (
                    (!(l = e.getAttribute("builtin")) &&
                        t &&
                        (e.getAttributeNS
                            ? (l = e.getAttributeNS(t, "builtin"))
                            : r && (l = r.getAttributeNS(t, "builtin", e))),
                    l)
                ) {
                    var a = Kekule.DomUtils.getElementText(e),
                        n = Kekule.IO.CmlDomUtils.splitCmlArrayValue(a);
                    switch (Kekule.DomUtils.getLocalName(e)) {
                        case "float":
                            for (var i = 0, o = n.length; i < o; ++i) n[i] = parseFloat(n[i]);
                            break;
                        case "integer":
                            for (i = 0, o = n.length; i < o; ++i) n[i] = parseInt(n[i]);
                    }
                    return { name: l, values: n };
                }
                return null;
            },
            hasDirectCmlTypedElemChildren: function (e, t) {
                for (var r = 0, l = Kekule.IO.CML.TYPED_ELEM_NAMES.length; r < l; ++r) {
                    var a = Kekule.IO.CML.TYPED_ELEM_NAMES[r];
                    if (Kekule.DomUtils.getDirectChildElems(e, null, a, t).length > 0) return !0;
                }
                return !1;
            },
            hasDirectCmlTypedArrayElemChildren: function (e, t) {
                for (var r = 0, l = Kekule.IO.CML.TYPED_ARRAY_ELEM_NAMES.length; r < l; ++r) {
                    var a = Kekule.IO.CML.TYPED_ARRAY_ELEM_NAMES[r];
                    if (Kekule.DomUtils.getDirectChildElems(e, null, a, t).length > 0) return !0;
                }
                return !1;
            },
            isCmlTypedElem: function (e, t) {
                var r = Kekule.IO.CML.TYPED_ELEM_NAMES.indexOf(Kekule.DomUtils.getLocalName(e)) >= 0;
                return t && (r = r && e.namespaceURI == t), r;
            },
            isCmlTypedArrayElem: function (e, t) {
                var r = Kekule.IO.CML.TYPED_ARRAY_ELEM_NAMES.indexOf(Kekule.DomUtils.getLocalName(e)) >= 0;
                return t && (r = r && e.namespaceURI == t), r;
            },
            isCmlBuiltInMarkedElem: function (e, t) {
                var r = Kekule.DomUtils.hasAttribute(e, "builtin");
                return t && r && (r = e.namespaceURI === t), r;
            },
            FILTER_TYPED_ELEM: 1,
            FILTER_TYPEDARRAY_ELEM: 2,
            FILTER_ALL: 3,
            getCmlTypedElem: function (e, t, r) {
                var l = e.namespaceURI,
                    a = Kekule.DomUtils.getDirectChildElemsOfAttribValues(e, [{ builtin: t }], null, null, l);
                if (a && a.length > 0)
                    for (var n = a.length - 1; n >= 0; --n) {
                        if (
                            r & Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM &&
                            Kekule.IO.CmlDomUtils.isCmlTypedElem(a[n], l)
                        )
                            return a[n];
                        if (
                            r & Kekule.IO.CmlDomUtils.FILTER_TYPEDARRAY_ELEM &&
                            Kekule.IO.CmlDomUtils.isCmlTypedArrayElem(a[n], l)
                        )
                            return a[n];
                    }
                return null;
            },
            getCmlTypedElems: function (e, t, r) {
                var l = [],
                    a = e.namespaceURI,
                    n = Kekule.DomUtils.getDirectChildElemsOfAttribValues(e, [{ builtin: t }], null, null, a);
                if (n && n.length > 0)
                    for (var i = n.length - 1; i >= 0; --i)
                        r & Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM && Kekule.IO.CmlDomUtils.isCmlTypedElem(n[i], a)
                            ? l.push(n[i])
                            : r & Kekule.IO.CmlDomUtils.FILTER_TYPEDARRAY_ELEM &&
                              Kekule.IO.CmlDomUtils.isCmlTypedArrayElem(n[i], a) &&
                              l.push(n[i]);
                return l.length ? l : null;
            },
            getCmlTypedElemValue: function (e, t, r, l) {
                r || (r = Kekule.IO.CmlDomUtils.FILTER_ALL);
                var a = Kekule.IO.CmlDomUtils.getCmlTypedElem(e, t, r);
                if (a) return Kekule.DomUtils.getElementText(a);
            },
            getMultipleCmlTypedElemValues: function (e, t, r, l) {
                r || (r = Kekule.IO.CmlDomUtils.FILTER_ALL);
                var a = Kekule.IO.CmlDomUtils.getCmlTypedElems(e, t, r);
                if (a) {
                    for (var n = [], i = 0, o = a.length; i < o; ++i) n.push(Kekule.DomUtils.getElementText(a[i]));
                    return n;
                }
                return null;
            },
            getCmlElemAttribute: function (e, t, r, l) {
                r || (r = Kekule.IO.CmlDomUtils.FILTER_ALL);
                var a = Kekule.DomUtils.getSameNSAttributeValue(e, t, l);
                return a || (a = Kekule.IO.CmlDomUtils.getCmlTypedElemValue(e, t, r, l)), a;
            },
            getMultipleCmlElemAttribute: function (e, t, r, l) {
                r || (r = Kekule.IO.CmlDomUtils.FILTER_ALL);
                var a = Kekule.DomUtils.getSameNSAttributeValue(e, t, l);
                return a || (a = Kekule.IO.CmlDomUtils.getMultipleCmlTypedElemValues(e, t, r, l)), a;
            },
            setCmlElemAttribute: function (e, t, r, l) {
                return Kekule.DomUtils.setSameNSAttributeValue(e, t, r, l);
            },
            fetchCmlElemAttributeValuesToJson: function (e, t, r, l) {
                t || (t = Kekule.IO.CmlDomUtils.FILTER_ALL);
                for (
                    var a = e.namespaceURI,
                        n = Kekule.DomUtils.fetchAttributeValuesToJson(e, a, !0),
                        i = Kekule.DomUtils.getDirectChildElems(e, null, null, a),
                        o = 0,
                        u = i.length;
                    o < u;
                    ++o
                ) {
                    var s = i[o];
                    if (
                        t & Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM &&
                        (Kekule.IO.CmlDomUtils.isCmlTypedElem(s, a) ||
                            Kekule.IO.CmlDomUtils.isCmlBuiltInMarkedElem(s, a))
                    )
                        (d = Kekule.IO.CmlDomUtils.readCmlTypedPropertyElem(s, a, l)) &&
                            (n[d.name] && r
                                ? (n[d.name] += Kekule.IO.CML.ARRAY_VALUE_DELIMITER + d.value)
                                : (n[d.name] = d.value));
                    else if (
                        t & Kekule.IO.CmlDomUtils.FILTER_TYPEDARRAY_ELEM &&
                        Kekule.IO.CmlDomUtils.isCmlTypedArrayElem(s, a)
                    ) {
                        var d;
                        (d = Kekule.IO.CmlDomUtils.getCmlBuiltinElemInfo(s, a, l)) &&
                            (n[d.name] && r
                                ? (n[d.name] += Kekule.IO.CML.ARRAY_VALUE_DELIMITER + d.value)
                                : (n[d.name] = d.value));
                    }
                }
                return n;
            },
            isScalarElem: function (e, t) {
                var r = "scalar" == Kekule.DomUtils.getLocalName(e);
                return t && (r = r && e.namespaceURI == t), r;
            },
            getCmlId: function (e, t) {
                return Kekule.IO.CmlDomUtils.getCmlElemAttribute(e, "id", Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM, t);
            },
            setCmlId: function (e, t, r) {
                return Kekule.IO.CmlDomUtils.setCmlElemAttribute(e, "id", t, r);
            },
            getCmlTitle: function (e, t) {
                return Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                    e,
                    "title",
                    Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                    t
                );
            },
            setCmlTitle: function (e, t, r) {
                return Kekule.IO.CmlDomUtils.setCmlElemAttribute(e, "title", t, r);
            },
        };
        var t = Kekule.IO.CmlDomUtils;
        (Kekule.IO.CmlElementReaderFactory = {
            _readers: {},
            register: function (e, t) {
                if (Kekule.ArrayUtils.isArray(e))
                    for (var r = 0, l = e.length; r < l; ++r) Kekule.IO.CmlElementReaderFactory.register(e[r], t);
                else Kekule.IO.CmlElementReaderFactory._readers[e.toLowerCase()] = t;
            },
            getReader: function (e) {
                var t;
                t = "string" != typeof e ? Kekule.DomUtils.getLocalName(e) : e;
                var r = Kekule.IO.CmlElementReaderFactory._readers[t.toLowerCase()];
                return r ? new r() : null;
            },
        }),
            (Kekule.IO.CmlElementWriterFactory = {
                _writers: {},
                register: function (e, t) {
                    if (Kekule.ArrayUtils.isArray(e))
                        for (var r = 0, l = e.length; r < l; ++r) Kekule.IO.CmlElementWriterFactory.register(e[r], t);
                    else Kekule.IO.CmlElementWriterFactory._writers[e] = t;
                },
                getWriter: function (e) {
                    var t;
                    t = "string" != typeof e ? DataType.getType(e) : e;
                    var r = Kekule.IO.CmlElementWriterFactory._writers[t];
                    if (!r && e.getClassName)
                        for (
                            var l = e,
                                a = Kekule.ObjUtils.getOwnedFieldNames(Kekule.IO.CmlElementWriterFactory._writers),
                                n = a.length - 1;
                            n >= 0;
                            --n
                        ) {
                            var i = ClassEx.findClass(a[n]);
                            if (i && l instanceof i) {
                                r = Kekule.IO.CmlElementWriterFactory._writers[a[n]];
                                break;
                            }
                        }
                    return r ? new r() : null;
                },
            }),
            (Kekule.IO.CmlElementHandler = Class.create(ObjectEx, {
                CLASS_NAME: "Kekule.IO.CmlElementHandler",
                initialize: function () {
                    this.tryApplySuper("initialize"), (this._childHandlers = []);
                },
                doFinalize: function () {
                    for (var e = this._childHandlers.length - 1; e >= 0; --e) {
                        var t = this._childHandlers[e];
                        t && t.finalize && t.finalize();
                    }
                    this.tryApplySuper("doFinalize");
                },
                initProperties: function () {
                    this.defineProp("domHelper", {
                        dataType: "Kekule.DomHelper",
                        serializable: !1,
                        getter: function () {
                            return (
                                this.getPropStoreFieldValue("domHelper") ||
                                    this.setPropStoreFieldValue("domHelper", new Kekule.DomHelper()),
                                this.getPropStoreFieldValue("domHelper")
                            );
                        },
                    }),
                        this.defineProp("coreNamespaceURI", { dataType: DataType.STRING, serializable: !1 }),
                        this.defineProp("namespaces", { dataType: DataType.ARRAY, serializable: !1 }),
                        this.defineProp("rootEvoker", { dataType: DataType.Object, serializable: !1 });
                },
                getPrefixForNamespaceUri: function (e) {
                    var t = this.getNamespaces();
                    if (t) for (var r = 0, l = t.length; r < l; ++r) if (t[r].namespaceURI === e) return t[r].prefix;
                },
                matchCoreNamespace: function (e) {
                    var t;
                    return (
                        (t = e ? ("string" != typeof e ? e.namespaceURI : e) : ""),
                        (!this.getCoreNamespaceURI() && !t) ||
                            (this.getCoreNamespaceURI() && this.getCoreNamespaceURI() == t)
                    );
                },
                copySettingsToChildHandler: function (e) {
                    e.setDomHelper(this.getDomHelper()),
                        e.setCoreNamespaceURI(this.getCoreNamespaceURI()),
                        e.setNamespaces(this.getNamespaces()),
                        e.setRootEvoker(this.getRootEvoker());
                },
                _appendChildHandler: function (e) {
                    Kekule.ArrayUtils.pushUnique(this._childHandlers, e);
                },
                _iterateChildHandlers: function (e, t, r) {
                    if (e)
                        for (var l = 0, a = this._childHandlers.length; l < a; ++l) {
                            var n = this._childHandlers[l];
                            n && (e.apply(t, [n]), r && n._iterateChildHandlers && n._iterateChildHandlers(e, t, r));
                        }
                },
            })),
            (Kekule.IO.CmlElementReader = Class.create(Kekule.IO.CmlElementHandler, {
                CLASS_NAME: "Kekule.IO.CmlElementReader",
                readElement: function (e, t, r, l) {
                    var a = this.doReadElement(e, t, r, l);
                    if (a && a.getId && !a.getId() && a.setId) {
                        var n = Kekule.IO.CmlDomUtils.getCmlId(e, this.getDomHelper);
                        n && this.setObjId(a, n);
                    }
                    return a;
                },
                doReadElement: function (e, t, r, l) {},
                readChildElement: function (e, t, r) {
                    return this.doReadChildElement(e, t, r);
                },
                doReadChildElement: function (e, t, r) {
                    return this.doReadChildElementDef(e, t, r);
                },
                readChildElementDef: function (e, t, r) {
                    return this.doReadChildElementDef(e, t, r);
                },
                doReadChildElementDef: function (e, t, r) {
                    var l = this.doGetChildElementReader(e, t, r);
                    if (!l) return null;
                    try {
                        return l.readElement(e, t, r);
                    } finally {
                    }
                },
                doGetChildElementReader: function (e, t, r) {
                    var l = Kekule.IO.CmlElementReaderFactory.getReader(e);
                    return l && (this.copySettingsToChildHandler(l), this._appendChildHandler(l)), l;
                },
                iterateChildElements: function (e, t, r, l) {
                    for (
                        var a = [],
                            n = Kekule.DomUtils.getDirectChildElems(e, null, null, this.getCoreNamespaceURI()),
                            i = 0,
                            o = n.length;
                        i < o;
                        ++i
                    ) {
                        var u = this.readChildElement(n[i], t, r);
                        u && (a.push({ element: n[i], result: u }), l && l(n[i], u, t, r));
                    }
                    return a;
                },
                doneReadingDocument: function (e) {
                    this.doDoneReadingDocument(),
                        e &&
                            this._iterateChildHandlers(function (t) {
                                t && t.doneReadingDocument && t.doneReadingDocument(e);
                            });
                },
                doDoneReadingDocument: function () {},
                getLoadedObjById: function (e) {
                    var t = this.getRootEvoker();
                    return t && t.getLoadedObjById && t.getLoadedObjById(e);
                },
                setObjIdMapValue: function (e, t) {
                    var r = this.getRootEvoker();
                    r.setObjIdMapValue && r.setObjIdMapValue(e, t);
                },
                setObjId: function (e, t) {
                    e.setId && e.setId(t);
                    var r = e.getId && e.getId();
                    r && this.setObjIdMapValue(r, e);
                },
                _createChildObjsHolder: function (e, t) {
                    for (var r = new t(), l = 0, a = e.length; l < a; ++l) r.appendChild(e[l]);
                    return r;
                },
            })),
            (Kekule.IO.CmlElementWriter = Class.create(Kekule.IO.CmlElementHandler, {
                CLASS_NAME: "Kekule.IO.CmlElementWriter",
                writeObject: function (e, t, r) {
                    if (!t && !l) return Kekule.error(Kekule.$L("ErrorMsg.CML_CAN_NOT_OUTPUT_TO_EMPTY_ELEMENT")), null;
                    var l = t.ownerDocument;
                    this.getDomHelper().getDocument != l && this.getDomHelper().setDocument(l);
                    var a = this.doCreateElem(e, t, l);
                    a ? t.appendChild(a) : (a = t);
                    var n = this.doWriteObject(e, a, r) || a;
                    return n && e && (this.writeObjId(e, n), this.writeObjAdditionalInfo(e, n, r)), n;
                },
                writeObjId: function (e, t) {
                    if (e.getId) {
                        var r = e.getId();
                        !r && e.setId && (r = this.autoIdentifyForObj(e)),
                            Kekule.IO.CmlDomUtils.setCmlId(t, r, this.getDomHelper());
                    }
                },
                autoIdentifyForObj: function (e) {
                    return (
                        e.getId &&
                            !e.getId() &&
                            e.setId &&
                            (e.getOwner && e.getOwner() && e.getOwner().getAutoId
                                ? e.setId(e.getOwner().getAutoId(e))
                                : e.setId(this.getAutoIdForObj(e))),
                        e.getId && e.getId()
                    );
                },
                getAutoIdForObj: function (e) {
                    var t = e.getAutoIdPrefix ? e.getAutoIdPrefix() : "obj";
                    return (
                        Kekule.IO.CmlElementWriter._UID_SEED ||
                            (Kekule.IO.CmlElementWriter._UID_SEED = new Date().getTime()),
                        ++Kekule.IO.CmlElementWriter._UID_SEED,
                        "" + t + Kekule.IO.CmlElementWriter._UID_SEED.toString()
                    );
                },
                writeScalarAttribs: function (e, t, r) {
                    if (e.getScalarAttribs) {
                        var l = this.doGetChildObjectWriter("Kekule.Scalar");
                        if (l)
                            for (var a = 0, n = e.getScalarAttribCount(); a < n; ++a)
                                l.writeObject(e.getScalarAttribAt(a), t, r);
                    }
                },
                writeObjInfoValues: function (e, t, r) {
                    if (e.getInfo) {
                        var l,
                            a = this.getObjInfoKeysNeedToSaveToMetaList(e);
                        if (!a || !a.length) return;
                        for (var n = 0, i = a.length; n < i; ++n) {
                            var o = a[n],
                                u = e.getInfoValue(a[n]);
                            o &&
                                u &&
                                !Kekule.IO.CmlDomUtils.getCmlElemAttribute(t, o, this.getDomHelper()) &&
                                (l || (l = this.getOrCreateChildElem("metaDataList", t)),
                                this.doWriteObjInfoValueItem(o, u, e, l, r));
                        }
                    }
                },
                doWriteObjInfoValueItem: function (e, t, r, l, a) {
                    return this.writeObjMetaValueToListElem(r, e, null, t, l);
                },
                writeObjMetaValueToListElem: function (e, t, r, l, a, n, i) {
                    n || (n = "metaData");
                    var o = this.createChildElem(n, a);
                    return (
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(o, "name", t, this.getDomHelper()),
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                            o,
                            "content",
                            DataType.StringUtils.serializeValue(r),
                            this.getDomHelper()
                        ),
                        l && Kekule.IO.CmlDomUtils.setCmlElemAttribute(o, "metadataType", l, this.getDomHelper()),
                        o
                    );
                },
                getObjInfoKeysNeedToSaveToMetaList: function (e) {
                    return e.getInfoKeys ? e.getInfoKeys() : null;
                },
                writeObjAdditionalInfo: function (e, t, r) {
                    this.writeScalarAttribs(e, t, r), this.writeObjInfoValues(e, t, r);
                },
                doCreateElem: function (e, t) {},
                createChildElem: function (e, t, r) {
                    var l = r || this.getCoreNamespaceURI(),
                        a = this.getDomHelper().createElementNS(l, e);
                    return t && t.appendChild(a), a;
                },
                getOrCreateChildElem: function (e, t, r) {
                    var l = this.getDomHelper().getElementsByTagNameNS(r, e, t)[0];
                    return l || (l = this.createChildElem(e, t, r)), l;
                },
                doWriteObject: function (e, t, r) {},
                doGetChildObjectWriter: function (e, t, r) {
                    var l = Kekule.IO.CmlElementWriterFactory.getWriter(e);
                    return l && (this.copySettingsToChildHandler(l), this._appendChildHandler(l)), l;
                },
                reportTypeMismatchError: function (e) {
                    Kekule.error(
                        Kekule.$L("ErrorMsg.CML_ELEM_WRITER_TYPE_INPROPER").format(
                            this.getClassName(),
                            DataType.getType(e)
                        )
                    );
                },
                addNamespace: function (e, t, r, l) {
                    this.getDomHelper().addNamespace(e, t, r, l);
                },
                addNamespaces: function (e, t, r) {
                    for (var l = 0, a = t.length; l < a; ++l) this.addNamespace(e, t[l].prefix, t[l].namespaceURI, r);
                },
                doneWritingDocument: function (e) {
                    this.doDoneWritingDocument(),
                        e &&
                            this._iterateChildHandlers(function (t) {
                                t && t.doneWritingDocument && t.doneWritingDocument(e);
                            });
                },
                doDoneWritingDocument: function () {},
            })),
            (Kekule.IO.CmlBaseListReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlBaseListReader",
                doReadElement: function (e, t, r, l) {
                    var a = this.doCreateList(e);
                    return (a = this.doReadList(a, e, t, r, this.getDomHelper()));
                },
                doCreateList: function (e) {
                    return [];
                },
                doAppendObjToList: function (e, t) {
                    return t && t.push && t.push(e), t;
                },
                doReadChildElem: function (e, t, r, l, a) {
                    return t.readElement(e, a, this);
                },
                doReadList: function (e, t, r, l, a) {
                    var n = Kekule.DomUtils.getDirectChildElems(t, null, null, this.getCoreNamespaceURI());
                    if (n)
                        for (var i = 0, o = n.length; i < o; ++i) {
                            var u = n[i],
                                s = this.doGetChildElementReader(u, r, this);
                            if (s) {
                                var d = this.doReadChildElem(u, s, r, l, e);
                                d && this.doAppendObjToList(d, e);
                            }
                        }
                    return e;
                },
            })),
            (Kekule.IO.CmlBaseListWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlBaseListWriter",
                doCreateElem: function (e, t) {
                    var r = this.doGetListElemTagName(e, t);
                    return r ? this.createChildElem(r, t) : null;
                },
                doGetListElemTagName: function (e, t) {
                    return "list";
                },
                doWriteObject: function (e, t, r) {
                    var l = Kekule.ChemStructureUtils.getChildStructureObjs(e, !1);
                    return this.writeList(l, t, r);
                },
                writeList: function (e, t, r) {
                    for (var l = 0, a = e.length; l < a; ++l) {
                        var n = e[l];
                        if (n) {
                            var i = this.doGetChildObjectWriter(n);
                            i && i.writeObject(n, t, r);
                        }
                    }
                    return t;
                },
            })),
            (Kekule.IO.CmlNameReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlNameReader",
                initialize: function () {
                    this.tryApplySuper("initialize");
                },
                doReadElement: function (e, t, r, l) {
                    var a = Kekule.DomUtils.getElementText(e),
                        n = Kekule.IO.CmlDomUtils.getCmlElemAttribute(e, "convention");
                    if (a) {
                        var i = {};
                        return (i.name = a), n ? (i.convention = n) : t && t.setName && t.setName(a), i;
                    }
                    return null;
                },
            })),
            (Kekule.IO.CmlScalarReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlScalarReader",
                doReadElement: function (e, t, r, l) {
                    var a = this.readScalar(e);
                    return t && t.appendScalarAttrib && t.appendScalarAttrib(a), a;
                },
                readScalar: function (e) {
                    var t,
                        r = Kekule.DomUtils.fetchAttributeValuesToJson(e, this.getCoreNamespaceURI(), !0);
                    if (
                        ((o = Kekule.DomUtils.getElementText(e)) && (r.value = o),
                        r.value &&
                            (r.dataType
                                ? ((r.value = Kekule.IO.CmlUtils.convertSimpleValueByDataType(r.value, r.dataType)),
                                  r.errorValue &&
                                      (r.errorValue = Kekule.IO.CmlUtils.convertSimpleValueByDataType(
                                          r.errorValue,
                                          r.dataType,
                                          !0
                                      )))
                                : (r.value = Kekule.IO.CmlUtils.tryParseFloat(r.value))),
                        r)
                    ) {
                        t = new Kekule.Scalar();
                        for (var l = Kekule.ObjUtils.getOwnedFieldNames(r), a = 0, n = l.length; a < n; ++a) {
                            var i = l[a],
                                o = r[i];
                            switch (i) {
                                case "value":
                                    t.setValue(o);
                                    break;
                                case "errorValue":
                                    t.setErrorValue(o);
                                    break;
                                case "units":
                                    t.setUnit(Kekule.IO.CmlUtils.cmlUnitStrToMetricsUnitSymbol(o));
                                    break;
                                case "title":
                                    t.setTitle(o);
                                    break;
                                case "dictRef":
                                    t.setName(Kekule.IO.CmlUtils.cmlNsTokenToKekule(o)), t.setInfoValue("dictRef", o);
                                    break;
                                default:
                                    t.setInfoValue(i, o);
                            }
                        }
                    }
                    return t;
                },
            })),
            (Kekule.IO.CmlScalarWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlScalarWriter",
                doCreateElem: function (e, t) {
                    return this.createChildElem("scalar", t);
                },
                doWriteObject: function (t, r, l) {
                    if (!(t instanceof Kekule.Scalar)) return this.reportTypeMismatchError(t), null;
                    var a;
                    if (
                        (Kekule.ObjUtils.isUnset(t.getValue()) ||
                            (Kekule.DomUtils.setElementText(r, t.getValue()), (a = DataType.getType(t.getValue()))),
                        t.getName() &&
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                                r,
                                "dictRef",
                                Kekule.IO.CmlUtils.kekuleNsTokenToCml(t.getName()),
                                this.getDomHelper()
                            ),
                        t.getErrorValue() &&
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                                r,
                                "errorValue",
                                t.getErrorValue(),
                                this.getDomHelper()
                            ),
                        t.getUnit() &&
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                                r,
                                "units",
                                Kekule.IO.CmlUtils.metricsUnitSymbolToCmlUnitStr(t.getUnit()),
                                this.getDomHelper()
                            ),
                        t.getTitle() &&
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(r, "title", t.getTitle(), this.getDomHelper()),
                        a)
                    ) {
                        var n = e.getCmlTypeForDataType(a);
                        n && Kekule.IO.CmlDomUtils.setCmlElemAttribute(r, "datatype", n, this.getDomHelper());
                    }
                },
            })),
            (Kekule.IO.CmlArrayReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlArrayReader",
                initProperties: function () {
                    this.defineProp("expandSteppedArray", { dataType: DataType.BOOL, serializable: !1 }),
                        this.defineProp("defaultItemDataType", { dataType: DataType.STRING, serializable: !1 });
                },
                doReadElement: function (e, t, r, l) {
                    return this.readArray(e);
                },
                readArray: function (e) {
                    var t = Kekule.DomUtils.fetchAttributeValuesToJson(e, this.getCoreNamespaceURI(), !0);
                    if (
                        (t.size && (t.size = parseInt(t.size)),
                        Kekule.ObjUtils.notUnset(t.start) && Kekule.ObjUtils.notUnset(t.end))
                    )
                        (t.start = parseFloat(t.start)),
                            (t.end = parseFloat(t.end)),
                            t.stepSize && (t.stepSize = parseFloat(t.stepSize)),
                            !t.size && t.stepSize
                                ? (t.size = Math.round(Math.abs((arrayJson.end - arrayJson.start) / t.stepSize)))
                                : t.size && !t.stepSize && (t.stepSize = (t.end - t.start) / t.size);
                    else {
                        var r = Kekule.DomUtils.getElementText(e);
                        t.values = this._generateExplicitArray(t, r);
                    }
                    return t;
                },
                _generateSteppedArray: function (e) {
                    var t = null;
                    if (this.getExpandSteppedArray()) {
                        var r = e.size,
                            l = e.stepSize,
                            a = e.start;
                        t = [a];
                        for (var n = 0; n < r; ++n) {
                            if ((a += l) > e.end) {
                                t.push(e.end);
                                break;
                            }
                            t.push(a);
                        }
                    }
                    return t;
                },
                _generateExplicitArray: function (e, t) {
                    var r = !!e.delimiter,
                        l = r ? e.delimiter : Kekule.IO.CML.DEFAULT_VALUE_DELIMITER_PATTERN,
                        a = t.split(l);
                    r && (a.shift(), a.pop());
                    for (var n = e.dataType || this.getDefaultItemDataType(), i = [], o = 0, u = a.length; o < u; ++o) {
                        var s = a[o].trim();
                        !r && s && (n ? i.push(Kekule.IO.CmlUtils.convertSimpleValueByDataType(s, n)) : i.push(s));
                    }
                    return i;
                },
            })),
            (Kekule.IO.CmlArrayWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlArrayWriter",
                DEF_TAGNAME: "array",
                DEF_DELIMITER: " ",
                initProperties: function () {
                    this.defineProp("defaultItemDataType", { dataType: DataType.STRING, serializable: !1 }),
                        this.defineProp("defaultItemDataUnit", { dataType: DataType.STRING, serializable: !1 });
                },
                getArrayTagName: function () {
                    return this.DEF_TAGNAME;
                },
                getDefaultArrayValueDelimiter: function () {
                    return this.DEF_DELIMITER;
                },
                doCreateElem: function (e, t) {
                    return this.createChildElem(this.getArrayTagName(), t);
                },
                doWriteObject: function (e, t, r) {
                    var l;
                    if (DataType.isObjectValue(e)) l = Object.extend({}, e);
                    else {
                        if (!DataType.isArrayValue(e)) return this.reportTypeMismatchError(e), null;
                        l = { values: e };
                    }
                    return (
                        (l = Object.extend(l, {
                            unit: l.unit || r.unit || this.getDefaultItemDataUnit(),
                            dataType: l.dataType || r.dataType || this.getDefaultItemDataType(),
                            delimiter: l.delimiter || r.delimiter || this.getDefaultArrayValueDelimiter(),
                        })),
                        this.writeArrayObj(l, t, r)
                    );
                },
                writeArrayObj: function (r, l, a) {
                    for (var n = this.getDomHelper(), i = ["id", "title", "dictRef"], o = 0, u = i.length; o < u; ++o) {
                        var s = r[i[o]];
                        Kekule.ObjUtils.notUnset(s) && t.setCmlElemAttribute(l, i[o], s, n);
                    }
                    r.unit && t.setCmlElemAttribute(l, "units", e.metricsUnitSymbolToCmlUnitStr(r.unit), n),
                        r.dataType && t.setCmlElemAttribute(l, "dataType", e.getCmlTypeForDataType(r.dataType), n);
                    var d = r.values,
                        m = d ? d.length : r.size;
                    if ((m && t.setCmlElemAttribute(l, "size", m, n), d)) {
                        var c = r.delimiter || this.getDefaultArrayValueDelimiter();
                        Kekule.DomUtils.setElementText(l, d.join(c)),
                            c !== this.getDefaultArrayValueDelimiter() && t.setCmlElemAttribute(l, "delimiter", c, n);
                    } else
                        Kekule.ObjUtils.notUnset(r.start) && t.setCmlElemAttribute(l, "start", r.start, n),
                            Kekule.ObjUtils.notUnset(r.end) && t.setCmlElemAttribute(l, "end", r.end, n);
                },
            })),
            (Kekule.IO.CmlMetaDataReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlMetaReader",
                doReadElement: function (e, t, r, l) {
                    var a = this.readMeta(e);
                    return t && t.setInfoValue && a.key && a.value && t.setInfoValue(a.key, a.value), a;
                },
                readMeta: function (e) {
                    var t = Kekule.DomUtils.fetchAttributeValuesToJson(e, this.getCoreNamespaceURI(), !0);
                    return {
                        key: t.name,
                        value: DataType.StringUtils.deserializeValue(t.content),
                        metadataType: t.metadataType,
                    };
                },
            })),
            (Kekule.IO.CmlMetaDataListReader = Class.create(Kekule.IO.CmlBaseListReader, {
                CLASS_NAME: "Kekule.IO.CmlMetaListReader",
                doReadChildElem: function (e, t, r, l, a) {
                    return t.readElement(e, r, this);
                },
            })),
            (Kekule.IO.CmlConditionListReader = Class.create(Kekule.IO.CmlBaseListReader, {
                CLASS_NAME: "Kekule.IO.CmlConditionListReader",
            })),
            (Kekule.IO.CmlParameterReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlParameterReader",
                doReadElement: function (e, t, r, l) {
                    return this.readParameter(e, t, r);
                },
                readParameter: function (e, t, r) {
                    var l = Kekule.DomUtils.fetchAttributeValuesToJson(e, this.getCoreNamespaceURI(), !0),
                        a = {
                            key: l.name || l.dictRef,
                            value: DataType.StringUtils.deserializeValue(l.value),
                            title: l.title,
                        };
                    this.iterateChildElements(e, t, r, function (e, t) {
                        "scalar" === Kekule.DomUtils.getLocalName(e).toLowerCase() && (a.value = t);
                    });
                    return a;
                },
            })),
            (Kekule.IO.CmlParameterListReader = Class.create(Kekule.IO.CmlBaseListReader, {
                CLASS_NAME: "Kekule.IO.CmlParameterListReader",
            })),
            (Kekule.IO.CmlChemStructureReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlChemStructureReader",
                initialize: function () {
                    this.tryApplySuper("initialize");
                },
                hasAtomChildren: function (e, t) {
                    return t.getElementsByTagNameNS(this.getCoreNamespaceURI(), "atom", e).length;
                },
                getAtomChildren: function (e, t) {
                    return t.getElementsByTagNameNS(this.getCoreNamespaceURI(), "atom", e);
                },
                atomInfoToJSON: function (e, t) {
                    return Kekule.IO.CmlDomUtils.fetchCmlElemAttributeValuesToJson(
                        e,
                        Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                        !0,
                        t
                    );
                },
                arrayedAtomInfosToJSON: function (e, t) {
                    for (
                        var r = [
                                "id",
                                "atomID",
                                "elementType",
                                "isotope",
                                "hydrogenCount",
                                "formalCharge",
                                "count",
                                "xFract",
                                "yFract",
                                "zFract",
                                "x2",
                                "y2",
                                "x3",
                                "y3",
                                "z3",
                            ],
                            l = [
                                "id",
                                "id",
                                "elementType",
                                "isotope",
                                "hydrogenCount",
                                "formalCharge",
                                "count",
                                "xFract",
                                "yFract",
                                "zFract",
                                "x2",
                                "y2",
                                "x3",
                                "y3",
                                "z3",
                            ],
                            a = [],
                            n = 0,
                            i = r.length;
                        n < i;
                        ++n
                    ) {
                        var o,
                            u = [];
                        (o = Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                            e,
                            r[n],
                            Kekule.IO.CmlDomUtils.FILTER_TYPEDARRAY_ELEM,
                            t
                        )) && (u = Kekule.IO.CmlDomUtils.splitCmlArrayValue(o));
                        for (var s = 0, d = u.length; s < d; ++s) a[s] || (a[s] = {}), u[s] && (a[s][l[n]] = u[s]);
                    }
                    return a;
                },
            })),
            (Kekule.IO.CmlFormulaReader = Class.create(Kekule.IO.CmlChemStructureReader, {
                CLASS_NAME: "Kekule.IO.CmlFormulaReader",
                doReadElement: function (e, t, r, l) {
                    return this.readFormula(e, this.getDomHelper());
                },
                readFormula: function (e, t) {
                    var r = new Kekule.MolecularFormula(),
                        l = Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                            e,
                            "formalCharge",
                            Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                            t
                        );
                    l && r.setCharge(parseFloat(l));
                    var a = Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                            e,
                            "concise",
                            Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                            t
                        ),
                        n = Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                            e,
                            "inline",
                            Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                            t
                        );
                    if (a) this.setConcise(r, a);
                    else if (n) this.setInlineFormula(r, n);
                    else
                        for (
                            var i = Kekule.DomUtils.getDirectChildElems(e, null, null, this.getCoreNamespaceURI()),
                                o = 0,
                                u = i.length;
                            o < u;
                            ++o
                        )
                            switch (Kekule.DomUtils.getLocalName(i[o])) {
                                case "formula":
                                    this.readSubFormula(r, i[o], t);
                                    break;
                                case "atomArray":
                                    this.readAtomArray(r, i[o], t);
                                    break;
                                default:
                                    Kekule.IO.CmlDomUtils.isCmlTypedElem(e) ||
                                        Kekule.IO.CmlDomUtils.isCmlTypedArrayElem(e) ||
                                        this.readChildElementDef(e, r);
                            }
                    return r;
                },
                readConsice: function (e) {
                    var t = null;
                    return e && ((t = new Kekule.MolecularFormula()), this.setConcise(t, e)), t;
                },
                setConcise: function (e, t) {
                    var r = Kekule.IO.CmlDomUtils.analysisCmlFormulaConciseValue(t);
                    return (
                        r.isotopes && r.isotopes.length && this.createSectionsFromAtomAttribs(e, r.isotopes),
                        r.formalCharge && e.setCharge(r.formalCharge),
                        e
                    );
                },
                setInlineFormula: function (e, t) {
                    return Kekule.FormulaUtils.textToFormula(t, null, e), e;
                },
                readAtomArray: function (e, t, r) {
                    var l = [],
                        a = this.getAtomChildren(t, r);
                    if (a.length > 0)
                        for (var n = 0, i = a.length; n < i; ++n) {
                            var o = a[n],
                                u = this.atomInfoToJSON(o, r);
                            l.push(u);
                        }
                    else l = this.arrayedAtomInfosToJSON(t, r);
                    return this.createSectionsFromAtomAttribs(e, l), e;
                },
                createSectionsFromAtomAttribs: function (e, t) {
                    for (var r = 0, l = t.length; r < l; ++r) {
                        var a = t[r].elementType;
                        if (a) {
                            var n = Kekule.IO.CmlUtils.createNodeByCmdElementType(null, a),
                                i = t[r].formalCharge || 0,
                                o = t[r].count;
                            e.appendSection(n, o, i);
                        }
                    }
                },
                readSubFormula: function (e, t, r) {
                    var l = this.readElement(t, r),
                        a = Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                            t,
                            "count",
                            Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                            r
                        );
                    e.appendSection(l, parseFloat(a) || 1, l.getCharge() || 0);
                },
            })),
            (Kekule.IO.CmlFormulaWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlFormulaWriter",
                doCreateElem: function (e, t) {
                    return this.createChildElem("formula", t);
                },
                doWriteObject: function (e, t, r) {
                    if (!(e instanceof Kekule.MolecularFormula)) return this.reportTypeMismatchError(e), null;
                    for (var l = [], a = [], n = [], i = 0, o = e.getSectionCount(); i < o; ++i) {
                        var u = e.getSectionAt(i);
                        if (u.obj instanceof Kekule.MolecularFormula) {
                            this.createAtomArrayElem(l, a, n, t), (l = []), (a = []), (n = []);
                            this.writeSubFormula(u.obj, u.count || 1, t, r);
                        } else
                            l.push(Kekule.IO.CmlUtils.getNodeElementType(u.obj)),
                                a.push(u.count || 1),
                                n.push(e.getSectionCharge(u) || 0),
                                i == o - 1 && this.createAtomArrayElem(l, a, n, t);
                    }
                    e.getCharge() &&
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                            t,
                            "formalCharge",
                            e.getCharge(),
                            this.getDomHelper()
                        );
                },
                writeSubFormula: function (e, t, r, l) {
                    var a = this.createChildElem("formula", r);
                    return (
                        this.doWriteObject(e, a, l),
                        t > 1 && Kekule.IO.CmlDomUtils.setCmlElemAttribute(a, "count", t, this.getDomHelper()),
                        a
                    );
                },
                createAtomArrayElem: function (e, t, r, l) {
                    if (!(e.length <= 0)) {
                        var a = this.createChildElem("atomArray", l),
                            n = Kekule.IO.CmlDomUtils.mergeToCmlArrayValue(e),
                            i = Kekule.IO.CmlDomUtils.mergeToCmlArrayValue(t);
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(a, "elementType", n, this.getDomHelper()),
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(a, "count", i, this.getDomHelper());
                        for (var o = !1, u = 0, s = r.length; u < s; ++u)
                            if (r[u]) {
                                o = !0;
                                break;
                            }
                        if (o) {
                            var d = Kekule.IO.CmlDomUtils.mergeToCmlArrayValue(t);
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(a, "formalCharge", d, this.getDomHelper());
                        }
                        return a;
                    }
                },
            })),
            (Kekule.IO.CmlMoleculeReader = Class.create(Kekule.IO.CmlChemStructureReader, {
                CLASS_NAME: "Kekule.IO.CmlMoleculeReader",
                initialize: function () {
                    this.tryApplySuper("initialize");
                },
                initProperties: function () {
                    this.defineProp("structureBuilder", {
                        dataType: "Kekule.ChemStructureBuilder",
                        serializable: !1,
                        getter: function () {
                            return (
                                this.getPropStoreFieldValue("structureBuilder") ||
                                    this.setPropStoreFieldValue("structureBuilder", new Kekule.ChemStructureBuilder()),
                                this.getPropStoreFieldValue("structureBuilder")
                            );
                        },
                        setter: null,
                    });
                },
                doReadElement: function (e, t, r, l) {
                    return this.readMolecule(e, r, this.getDomHelper());
                },
                doReadChildElement: function (e, t, r) {
                    if ("molecule" == Kekule.DomUtils.getLocalName(e) && this.matchCoreNamespace(e)) {
                        if (t && t.getSubMolecules) {
                            var l = this.readElement(e, t, r);
                            if (l) {
                                var a =
                                        Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                                            e,
                                            "amount",
                                            Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM
                                        ) ||
                                        Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                                            e,
                                            "count",
                                            Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM
                                        ),
                                    n = a ? { amount: parseFloat(a) } : null;
                                t.getSubMolecules().appendObj(l, n);
                            }
                            return l;
                        }
                        return null;
                    }
                    return this.tryApplySuper("doReadChildElement", [e, t, r]);
                },
                hasSubMolecule: function (e) {
                    return (
                        Kekule.DomUtils.getDirectChildElems(e, null, "molecule", this.getCoreNamespaceURI()).length > 0
                    );
                },
                readMolecule: function (e, t, r) {
                    var l;
                    return (
                        this.hasSubMolecule(e)
                            ? ((l = new Kekule.CompositeMolecule()), this.iterateChildElements(e, l, t))
                            : (l = this.readMoleculeCore(e, r)),
                        this.readMoleculeAttribs(l, e, r),
                        l
                    );
                },
                readMoleculeAttribs: function (e, t, r) {
                    for (
                        var l = Kekule.IO.CmlDomUtils.fetchCmlElemAttributeValuesToJson(t, null, !0, r),
                            a = Kekule.ObjUtils.getOwnedFieldNames(l),
                            n = 0,
                            i = a.length;
                        n < i;
                        ++n
                    ) {
                        var o = a[n],
                            u = l[o];
                        switch (o) {
                            case "id":
                                this.setObjId(e, u);
                                break;
                            case "title":
                                e.setInfoValue("title", u);
                                break;
                            case "formalCharge":
                                u && e.setCharge(parseFloat(u));
                                break;
                            case "formula":
                                this.readFormulaAttrib(e, u);
                                break;
                            case "amount":
                            case "count":
                                break;
                            default:
                                e.setInfoValue(o, u);
                        }
                    }
                },
                readMoleculeCore: function (e, t) {
                    var r = new Kekule.Molecule();
                    this.getStructureBuilder().setTarget(r);
                    for (var l = e.firstChild; l; ) {
                        if (l.nodeType != Node.ELEMENT_NODE);
                        else if (this.matchCoreNamespace(l))
                            switch (Kekule.DomUtils.getLocalName(l)) {
                                case "atomArray":
                                    this.readMoleculeAtomArray(r, l, this.getStructureBuilder(), t);
                                    break;
                                case "bondArray":
                                    this.readMoleculeBondArray(r, l, this.getStructureBuilder(), t);
                                    break;
                                case "formula":
                                    this.readFormula(r, l, t);
                                    break;
                                case "atom":
                                    this.getStructureBuilder().setTarget(r);
                                    var a = this.readAtom(l, t);
                                    this.getStructureBuilder().appendNode(a);
                                    break;
                                case "bond":
                                    this.getStructureBuilder().setTarget(r);
                                    var n = this.readBond(r, l, t);
                                    this.getStructureBuilder().appendConnector(n);
                                    break;
                                case "molecule":
                                    break;
                                default:
                                    Kekule.IO.CmlDomUtils.isCmlTypedElem(l) ||
                                        Kekule.IO.CmlDomUtils.isCmlTypedArrayElem(l) ||
                                        this.readChildElementDef(l, r);
                            }
                        else;
                        l = l.nextSibling;
                    }
                    return r.hasCtab() && this.connectUpBondAndAtom(r), r;
                },
                connectUpBondAndAtom: function (e) {
                    for (var t = e.getConnectors(), r = 0, l = t.length; r < l; ++r) {
                        var a = t[r],
                            n = a[this._BOND_ATOM_REF_TEMP_FIELD];
                        if (n && n.length)
                            for (var i = 0, o = n.length; i < o; ++i) {
                                var u = e.getNodeById(n[i]);
                                u
                                    ? a.appendConnectedObj(u)
                                    : Kekule.raise(
                                          (Kekule.hasLocalRes()
                                              ? Kekule.$L("ErrorMsg.ATOMID_NOT_EXISTS")
                                              : "Atom id not exists: ") + n[i]
                                      );
                            }
                        delete a[this._BOND_ATOM_REF_TEMP_FIELD];
                        var s = a[this._BOND_BOND_REF_TEMP_FIELD];
                        if (s && s.length)
                            for (i = 0, o = s.length; i < o; ++i) {
                                var d = e.getConnectorById(s[i]);
                                d
                                    ? a.appendConnectedObj(d)
                                    : Kekule.raise(
                                          (Kekule.hasLocalRes()
                                              ? Kekule.$L("ErrorMsg.BONDID_NOT_EXISTS")
                                              : "Bond id not exists: ") + s[i]
                                      );
                            }
                        delete a[this._BOND_BOND_REF_TEMP_FIELD];
                    }
                },
                readMoleculeAtomArray: function (e, t, r, l) {
                    r.setTarget(e);
                    var a = this.getAtomChildren(t, l);
                    if (a.length > 0)
                        for (var n = 0, i = a.length; n < i; ++n) {
                            var o = a[n],
                                u = this.readAtom(o, l);
                            r.appendNode(u);
                        }
                    else {
                        var s = this.readArrayedAtoms(t, l);
                        for (n = 0, i = s.length; n < i; ++n) r.appendNode(s[n]);
                    }
                },
                readAtom: function (e, t) {
                    var r,
                        l = !Kekule.IO.CmlDomUtils.hasDirectCmlTypedElemChildren(e, this.getCoreNamespaceURI()),
                        a = this.atomInfoToJSON(e, t);
                    if (((r = this.createStructureNodeOfAttribs(a)), l))
                        for (
                            var n = Kekule.DomUtils.getDirectChildElems(e, null, null, this.getCoreNamespaceURI()),
                                i = 0,
                                o = n.length;
                            i < o;
                            ++i
                        ) {
                            e = n[i];
                            this.readChildElementDef(e, r);
                        }
                    return r;
                },
                readArrayedAtoms: function (e, t) {
                    for (var r = this.arrayedAtomInfosToJSON(e, t), l = [], a = 0, n = r.length; a < n; ++a) {
                        var i = this.createStructureNodeOfAttribs(r[a]);
                        i && l.push(i);
                    }
                    return l;
                },
                createStructureNodeOfAttribs: function (e) {
                    var t;
                    e.elementType || (e.elementType = Kekule.Element.UNSET_ELEMENT);
                    var r = null;
                    void 0 !== e.id && (r = e.id), delete e.id;
                    var l,
                        a,
                        n = e.isotope ? Math.round(e.isotope) : null;
                    if (
                        ((t = Kekule.IO.CmlUtils.createNodeByCmdElementType(r, e.elementType, n)),
                        delete e.elementType,
                        void 0 !== e.hydrogenCount &&
                            t.setExplicitHydrogenCount &&
                            t.setExplicitHydrogenCount(parseInt(e.hydrogenCount, 10)),
                        delete e.hydrogenCount,
                        e.formalCharge && t.setCharge(parseInt(e.formalCharge)),
                        delete e.formalCharge,
                        e.title && t.setInfoValue("title", e.title),
                        delete e.title,
                        e.role && t.setInfoValue("role", e.role),
                        delete e.role,
                        void 0 !== e.x2 && void 0 !== e.y2)
                    )
                        l = { x: parseFloat(e.x2), y: parseFloat(e.y2) };
                    else if (e.xy2) {
                        var i = Kekule.IO.CmlDomUtils.splitCmlArrayValue(e.xy2);
                        2 == i.length && (l = { x: parseFloat(i[0]), y: parseFloat(i[1]) });
                    }
                    if ((delete e.x2, delete e.y2, delete e.xy2, void 0 !== e.x3 && void 0 !== e.y3 && void 0 !== e.z3))
                        a = { x: parseFloat(e.x3), y: parseFloat(e.y3), z: parseFloat(e.z3) };
                    else if (e.xyz3) {
                        var o = Kekule.IO.CmlDomUtils.splitCmlArrayValue(e.xyz3);
                        3 == o.length && (l = { x: parseFloat(o[0]), y: parseFloat(o[1]), z: parseFloat(o[2]) });
                    }
                    for (var u in (delete e.x3,
                    delete e.y3,
                    delete e.z3,
                    delete e.xyz3,
                    l && t.setCoord2D(l),
                    a && t.setCoord3D(a),
                    e))
                        e.hasOwnProperty(u) && "string" == typeof e[u] && t.setInfoValue(u, e[u]);
                    return t;
                },
                _BOND_ATOM_REF_TEMP_FIELD: "__cml_atomRefs",
                _BOND_BOND_REF_TEMP_FIELD: "__cml_bondRefs",
                readMoleculeBondArray: function (e, t, r, l) {
                    r.setTarget(e);
                    var a = l.getElementsByTagNameNS(this.getCoreNamespaceURI(), "bond", t);
                    if (a.length > 0)
                        for (var n = 0, i = a.length; n < i; ++n) {
                            var o = a[n],
                                u = this.readBond(e, o, l);
                            r.appendConnector(u);
                        }
                    else {
                        var s = this.readArrayedBonds(e, t, l);
                        for (n = 0, i = s.length; n < i; ++n) r.appendConnector(s[n]);
                    }
                },
                readBond: function (e, t, r) {
                    var l, a, n;
                    if (
                        ((n = !Kekule.IO.CmlDomUtils.hasDirectCmlTypedElemChildren(t, this.getCoreNamespaceURI())),
                        (a = Kekule.IO.CmlDomUtils.fetchCmlElemAttributeValuesToJson(
                            t,
                            Kekule.IO.CmlUtils.FILTER_TYPED_ELEM,
                            !0,
                            r
                        )),
                        (l = this.createStructureConnectorOfAttribs(e, a)),
                        n)
                    )
                        for (
                            var i = Kekule.DomUtils.getDirectChildElems(t, null, null, this.getCoreNamespaceURI()),
                                o = 0,
                                u = i.length;
                            o < u;
                            ++o
                        ) {
                            t = i[o];
                            if ("bondStereo" == Kekule.DomUtils.getLocalName(t)) {
                                var s = Kekule.DomUtils.getElementText(t);
                                s ||
                                    (s = Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                                        t,
                                        "conversionValue",
                                        Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                                        r
                                    )),
                                    s ||
                                        (s = Kekule.IO.CmlUtils.getCmlNsValueLocalPart(
                                            Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                                                t,
                                                "dictRef",
                                                Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                                                r
                                            )
                                        ));
                                var d = Kekule.IO.CmlUtils.cmlBondStereoToKekule(s);
                                d != Kekule.BondStereo.NONE && l.setStereo && l.setStereo(d);
                            } else this.readChildElementDef(t, l);
                        }
                    return l;
                },
                readArrayedBonds: function (e, t, r) {
                    var l = ["id", "bondID", "atomRef1", "atomRef2", "order", "bondStereo"],
                        a = ["id", "id", "atomRefs2", "atomRefs2", "order", "bondStereo"],
                        n = [],
                        i = Kekule.IO.CmlDomUtils.getMultipleCmlElemAttribute(
                            t,
                            "atomRefs",
                            Kekule.IO.CmlDomUtils.FILTER_TYPEDARRAY_ELEM,
                            r
                        );
                    if (i && i.length)
                        for (var o = 0, u = i.length; o < u; ++o)
                            for (
                                var s = i[o], d = 0, m = (c = Kekule.IO.CmlDomUtils.splitCmlArrayValue(s)).length;
                                d < m;
                                ++d
                            )
                                n[d] || (n[d] = {}),
                                    null == n[d].atomRefs && (n[d].atomRefs = []),
                                    n[d].atomRefs.push(c[d]);
                    for (o = 0, u = l.length; o < u; ++o) {
                        var c = [];
                        (s = Kekule.IO.CmlDomUtils.getCmlElemAttribute(
                            t,
                            l[o],
                            Kekule.IO.CmlDomUtils.FILTER_TYPEDARRAY_ELEM,
                            r
                        )) && (c = Kekule.IO.CmlDomUtils.splitCmlArrayValue(s));
                        for (d = 0, m = c.length; d < m; ++d)
                            n[d] || (n[d] = {}),
                                c[d] &&
                                    ("atomRef1" == l[o] || "atomRef2" == l[o]
                                        ? (null == n[d].atomRefs2 && (n[d].atomRefs2 = []),
                                          "atomRef1" == l[o] ? (n[d].atomRefs2[0] = c[d]) : (n[d].atomRefs2[1] = c[d]))
                                        : (n[d][a[o]] = c[d]));
                    }
                    var k = [];
                    for (o = 0, u = n.length; o < u; ++o) {
                        var g = this.createStructureConnectorOfAttribs(e, n[o]);
                        g && k.push(g);
                    }
                    return k;
                },
                createStructureConnectorOfAttribs: function (e, t) {
                    var r, l, a;
                    if (
                        (t.id && (l = t.id),
                        delete t.id,
                        void 0 !== t.order && (a = Kekule.IO.CmlUtils.cmlBondOrderToKekule(t.order)),
                        delete t.order,
                        (r = new Kekule.Bond(l, null, a)),
                        t.bondStereo)
                    ) {
                        var n = Kekule.IO.CmlUtils.cmlBondStereoToKekule(t.bondStereo);
                        n != Kekule.BondStereo.NONE && r.setStereo && r.setStereo(n);
                    }
                    delete t.bondStereo;
                    for (var i = 0, o = Kekule.IO.CML.ATOMS_REF_ATTRIBS.length; i < o; ++i) {
                        if (null != t[(s = Kekule.IO.CML.ATOMS_REF_ATTRIBS[i])]) {
                            var u = Kekule.IO.CmlDomUtils.splitCmlArrayValue(t[s]);
                            u.length > 0 && (r[this._BOND_ATOM_REF_TEMP_FIELD] = u), delete t[s];
                            break;
                        }
                    }
                    for (i = 0, o = Kekule.IO.CML.BONDS_REF_ATTRIBS.length; i < o; ++i) {
                        var s;
                        if (null != t[(s = Kekule.IO.CML.BONDS_REF_ATTRIBS[i])]) {
                            var d = Kekule.IO.CmlDomUtils.splitCmlArrayValue(t[s]);
                            d.length > 0 && (r[this._BOND_BOND_REF_TEMP_FIELD] = d), delete t[s];
                            break;
                        }
                    }
                    for (var m in t) t.hasOwnProperty(m) && "string" == typeof t[m] && r.setInfoValue(m, t[m]);
                    return r;
                },
                readFormula: function (e, t, r) {
                    var l = this.doGetChildElementReader(t);
                    if (l) {
                        this.copySettingsToChildHandler(l);
                        var a = l.readElement(t, e, this);
                        a && e.setFormula(a);
                    }
                },
                readFormulaAttrib: function (e, t) {
                    var r = this.doGetChildElementReader("formula");
                    if (r) {
                        var l = r.readConsice ? r.readConsice(t) : null;
                        l && e.setFormula(l);
                    }
                },
            })),
            (Kekule.IO.CmlMoleculeWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlMoleculeWriter",
                initProperties: function () {
                    this.defineProp("allowCascadeGroup", { dataType: DataType.BOOL });
                },
                doCreateElem: function (e, t) {
                    return this.createChildElem("molecule", t);
                },
                doWriteObject: function (e, t, r) {
                    return this.writeMolecule(e, t, r);
                },
                writeMolecule: function (e, t, r) {
                    return (
                        this.writeMoleculeAttribs(e, t),
                        e instanceof Kekule.CompositeMolecule
                            ? this.writeCompositeMolecule(e, t, r)
                            : this.writeMoleculeCore(e, t, r)
                    );
                },
                writeMoleculeAttribs: function (e, t) {
                    var r = [];
                    e.getCharge() && r.push({ key: "formalCharge", value: e.getCharge() });
                    for (
                        var l = [
                                "title",
                                "dictRef",
                                "chirality",
                                "ref",
                                "spinMultiplicity",
                                "symmetryOriented",
                                "role",
                            ],
                            a = 0,
                            n = l.length;
                        a < n;
                        ++a
                    ) {
                        var i = l[a],
                            o = e.getInfoValue(i);
                        Kekule.ObjUtils.isUnset(o) || r.push({ key: i, value: e.getInfoValue(i) });
                    }
                    for (a = 0, n = r.length; a < n; ++a)
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(t, r[a].key, r[a].value, this.getDomHelper());
                },
                writeCompositeMolecule: function (e, t, r) {
                    for (var l = e.getSubMolecules(), a = 0, n = l.getItemCount(); a < n; ++a) {
                        var i = l.getItemAt(a),
                            o = i.obj,
                            u = this.writeObject(o, t, r);
                        i.amount &&
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(u, "amount", i.amount, this.getDomHelper());
                    }
                    return t;
                },
                writeMoleculeCore: function (e, t, r) {
                    if (e.hasFormula()) {
                        var l = e.getFormula();
                        this.doGetChildObjectWriter(l).writeObject(l, t, r);
                    }
                    e.hasCtab() && this.writeCtab(e.getCtab(), e, t, r);
                },
                writeCtab: function (e, t, r, l) {
                    this.identifyObjsInCtab(e, t);
                    var a = this.getAllowCascadeGroup() ? e.getNodes() : e.getLeafNodes();
                    if (a.length > 0)
                        for (var n = this.createChildElem("atomArray", r), i = 0, o = a.length; i < o; ++i)
                            this.writeCtabNode(a[i], n, l);
                    var u = this.getAllowCascadeGroup() ? e.getConnectors() : e.getAllChildConnectors();
                    if (u.length > 0) {
                        var s = this.createChildElem("bondArray", r);
                        for (i = 0, o = u.length; i < o; ++i) this.writeCtabConnector(u[i], s, l);
                    }
                },
                writeCtabNode: function (e, t, r) {
                    var l = this.createChildElem("atom", t);
                    this.writeObjId(e, l);
                    var a = Kekule.IO.CmlUtils.getNodeElementType(e);
                    Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "elementType", a, this.getDomHelper());
                    var n = e.getMassNumber ? e.getMassNumber() : null;
                    n && Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "isotope", n, this.getDomHelper());
                    var i = e.getExplicitHydrogenCount ? e.getExplicitHydrogenCount() : null;
                    Kekule.ObjUtils.isUnset(i) ||
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "hydrogenCount", i, this.getDomHelper());
                    var o = e.getCharge ? e.getCharge() : null;
                    o && Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "formalCharge", o, this.getDomHelper());
                    e.getParity && e.getParity();
                    var u = e.getInfoValue ? e.getInfoValue("title") : null;
                    u && Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "title", u, this.getDomHelper());
                    var s = e.getInfoValue ? e.getInfoValue("role") : null;
                    if (
                        (s && Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "role", s, this.getDomHelper()),
                        e.hasCoord2D && e.hasCoord2D())
                    ) {
                        var d = e.getAbsCoord2D();
                        !Kekule.ObjUtils.isUnset(d.x) &&
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "x2", d.x, this.getDomHelper()),
                            !Kekule.ObjUtils.isUnset(d.y) &&
                                Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "y2", d.y, this.getDomHelper());
                    }
                    if (e.hasCoord3D && e.hasCoord3D()) {
                        var m = e.getAbsCoord3D();
                        !Kekule.ObjUtils.isUnset(m.x) &&
                            Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "x3", m.x, this.getDomHelper()),
                            !Kekule.ObjUtils.isUnset(m.y) &&
                                Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "y3", m.y, this.getDomHelper()),
                            !Kekule.ObjUtils.isUnset(m.z) &&
                                Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, "z3", m.z, this.getDomHelper());
                    }
                    for (
                        var c = ["occupancy", "xFract", "xyzFract", "yFract", "convention", "dictRef", "ref"],
                            k = 0,
                            g = c.length;
                        k < g;
                        ++k
                    ) {
                        var f = c[k],
                            I = e.getInfoValue(f);
                        I && Kekule.IO.CmlDomUtils.setCmlElemAttribute(l, f, I, this.getDomHelper());
                    }
                    return this.writeObjAdditionalInfo(e, l, r), l;
                },
                writeCtabConnector: function (e, t, r) {
                    var l = !1,
                        a = this.createChildElem("bond", t);
                    this.writeObjId(e, a);
                    var n = e.getBondOrder ? e.getBondOrder() : null;
                    if (n) {
                        var i = Kekule.IO.CmlUtils.kekuleBondOrderToCml(n);
                        i && Kekule.IO.CmlDomUtils.setCmlElemAttribute(a, "order", i, this.getDomHelper());
                    }
                    var o,
                        u = e.getStereo ? e.getStereo() : null;
                    if (u) {
                        var s = Kekule.IO.CmlUtils.kekuleBondStereoToCml(u);
                        if (s.value) {
                            var d = this.createChildElem("bondStereo", a);
                            Kekule.DomUtils.setElementText(d, s.value), s.invert && (l = !0);
                        }
                    }
                    for (var m = [], c = [], k = 0, g = e.getConnectedObjCount(); k < g; ++k) {
                        var f = e.getConnectedObjAt(k);
                        if (f.getId && f.getId()) {
                            var I = f.getId();
                            f instanceof Kekule.ChemStructureNode
                                ? l
                                    ? m.unshift(I)
                                    : m.push(I)
                                : f instanceof Kekule.ChemStructureConnector && c.push(I);
                        }
                    }
                    if ((o = m.length)) {
                        var O = 1 == o ? "atomRefs" : o >= 2 && o <= 4 ? "atomRefs" + o : "atomRefs";
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                            a,
                            O,
                            Kekule.IO.CmlDomUtils.mergeToCmlArrayValue(m),
                            this.getDomHelper()
                        );
                    }
                    if ((o = c.length)) {
                        O = "bondRefs";
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                            a,
                            O,
                            Kekule.IO.CmlDomUtils.mergeToCmlArrayValue(c),
                            this.getDomHelper()
                        );
                    }
                    var C = ["convention", "dictRef", "ref"];
                    for (k = 0, g = C.length; k < g; ++k) {
                        var h = C[k],
                            K = e.getInfoValue(h);
                        K && Kekule.IO.CmlDomUtils.setCmlElemAttribute(a, h, K, this.getDomHelper());
                    }
                    return this.writeObjAdditionalInfo(e, a, r), a;
                },
                identifyObjsInCtab: function (e, t) {
                    for (var r = 0, l = e.getNodeCount(); r < l; ++r) {
                        var a = e.getNodeAt(r);
                        a.getId() || this.autoIdentifyForObj(a, t),
                            e.isSubFragment(a) && a.hasCtab && a.hasCtab() && this.identifyObjsInCtab(a.getCtab(), t);
                    }
                    for (r = 0, l = e.getConnectorCount(); r < l; ++r) {
                        var n = e.getConnectorAt(r);
                        n.getId() || this.autoIdentifyForObj(n, t);
                    }
                },
            })),
            (Kekule.IO.CmlMoleculeWriter._UID_SEED = null),
            (Kekule.IO.CmlReactionReagentReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlReactionReagentReader",
                doReadElement: function (e, t, r, l) {
                    return this.readReagent(e, r, this.getDomHelper());
                },
                readReagent: function (e, t, r) {
                    var l = null,
                        a = Kekule.DomUtils.getDirectChildElems(e, null, "molecule", this.getCoreNamespaceURI());
                    if (a && a.length) {
                        var n = a[a.length - 1],
                            i = this.doGetChildElementReader(n).readElement(n, null, this);
                        i && ((l = {}), Kekule.RoleMapUtils.setItem(l, i), this.readReagentAttribs(l, e, r));
                    }
                    return l;
                },
                readReagentAttribs: function (e, t, r) {
                    for (
                        var l = Kekule.IO.CmlDomUtils.fetchCmlElemAttributeValuesToJson(
                                t,
                                Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                                !0,
                                r
                            ),
                            a = Kekule.ObjUtils.getOwnedFieldNames(l),
                            n = 0,
                            i = a.length;
                        n < i;
                        ++n
                    ) {
                        var o = a[n],
                            u = l[o];
                        switch (o) {
                            case "role":
                                e.role = Kekule.IO.CmlUtils.reagentRoleToKekule(u);
                                break;
                            case "amount":
                            case "count":
                                e.amount = parseFloat(u);
                                break;
                            default:
                                e[o] = u;
                        }
                    }
                    return e;
                },
            })),
            (Kekule.IO.CmlReactionReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlReactionReader",
                doReadElement: function (e, t, r, l) {
                    return this.readReaction(e, this.getDomHelper());
                },
                readReaction: function (e, t) {
                    for (
                        var r = new Kekule.Reaction(),
                            l = Kekule.DomUtils.getDirectChildElems(e, null, null, this.getCoreNamespaceURI()),
                            a = 0,
                            n = l.length;
                        a < n;
                        ++a
                    )
                        this.isComponentListElem(l[a])
                            ? this.readComponentList(r, l[a], t)
                            : this.readChildElement(l[a], r);
                    var i = Kekule.IO.CmlDomUtils.fetchCmlElemAttributeValuesToJson(
                            e,
                            Kekule.IO.CmlDomUtils.FILTER_TYPED_ELEM,
                            null,
                            this.getDomHelper()
                        ),
                        o = Kekule.ObjUtils.getOwnedFieldNames(i);
                    for (a = 0, n = o.length; a < n; ++a) {
                        var u = o[a],
                            s = i[u];
                        switch (u) {
                            case "name":
                                r.setName(s);
                                break;
                            case "title":
                                r.setTitle(s);
                                break;
                            case "type":
                                r.setReactionType(s);
                                break;
                            case "yield":
                                r.setYield(parseFloat(s));
                                break;
                            default:
                                r.setInfoValue(u, s);
                        }
                    }
                    return r;
                },
                readComponentList: function (e, t, r) {
                    var l = this.getListElemComponentName(t),
                        a = e.getComponentArray(l, !0);
                    if (a)
                        for (
                            var n = Kekule.DomUtils.getDirectChildElems(t, null, null, this.getCoreNamespaceURI()),
                                i = 0,
                                o = n.length;
                            i < o;
                            ++i
                        ) {
                            var u = this.readChildElement(n[i], a);
                            u &&
                                (l == Kekule.ReactionComponent.CONDITION && u instanceof ObjectEx
                                    ? e.appendItem(l, u)
                                    : e.appendMap(l, u));
                        }
                },
                isComponentListElem: function (e) {
                    return (
                        ["reactantList", "productList", "substanceList", "conditionList"].indexOf(
                            Kekule.DomUtils.getLocalName(e)
                        ) >= 0
                    );
                },
                getListElemComponentName: function (e) {
                    switch (Kekule.DomUtils.getLocalName(e)) {
                        case "reactantList":
                            return Kekule.ReactionComponent.REACTANT;
                        case "productList":
                            return Kekule.ReactionComponent.PRODUCT;
                        case "conditionList":
                            return Kekule.ReactionComponent.CONDITION;
                        default:
                            return Kekule.ReactionComponent.SUBSTANCE;
                    }
                },
            })),
            (Kekule.IO.CmlReactionWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlReactionWriter",
                doCreateElem: function (e, t) {
                    return this.createChildElem("reaction", t);
                },
                doWriteObject: function (e, t, r) {
                    return this.writeReaction(e, t, r);
                },
                writeReaction: function (e, t, r) {
                    for (
                        var l = [
                                Kekule.ReactionComponent.REACTANT,
                                Kekule.ReactionComponent.PRODUCT,
                                Kekule.ReactionComponent.SUBSTANCE,
                                Kekule.ReactionComponent.CONDITION,
                            ],
                            a = 0,
                            n = l.length;
                        a < n;
                        ++a
                    )
                        this.writeCompList(e, l[a], t, r);
                    return this.writeReactionAttribs(e, t, r), t;
                },
                writeReactionAttribs: function (e, t, r) {
                    var l = [];
                    e.getName() && l.push({ key: "name", value: e.getName() }),
                        e.getTitle() && l.push({ key: "title", value: e.getTitle() }),
                        e.getReactionType() && l.push({ key: "type", value: e.getReactionType() }),
                        e.getYield() && l.push({ key: "yield", value: e.getYield() });
                    for (
                        var a = [
                                "dictRef",
                                "convention",
                                "format",
                                "ref",
                                "role",
                                "type",
                                "state",
                                "yield",
                                "atomMap",
                                "electronMap",
                            ],
                            n = 0,
                            i = a.length;
                        n < i;
                        ++n
                    )
                        Kekule.ObjUtils.isUnset(e.getInfoValue(a[n])) ||
                            l.push({ key: a[n], value: e.getInfoValue(a[n]) });
                    for (n = 0, i = l.length; n < i; ++n)
                        Kekule.IO.CmlDomUtils.setCmlElemAttribute(t, l[n].key, l[n].value, this.getDomHelper());
                },
                writeCompList: function (e, t, r, l) {
                    if (e.getComponentItemCount(t) <= 0) return null;
                    for (
                        var a = this.getReactionComponentCmlName(t),
                            n = this.createChildElem(a + "List", r),
                            i = 0,
                            o = e.getComponentItemCount(t);
                        i < o;
                        ++i
                    ) {
                        var u = e.getMapAt(t, i),
                            s = e.getMapItemAt(t, i);
                        if (u && s) {
                            var d;
                            t != Kekule.ReactionComponent.CONDITION
                                ? ((d = this.createChildElem(a, n)),
                                  Kekule.ObjUtils.isUnset(u.amount) ||
                                      Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                                          d,
                                          "amount",
                                          u.amount,
                                          this.getDomHelper()
                                      ),
                                  u.role &&
                                      Kekule.IO.CmlDomUtils.setCmlElemAttribute(
                                          d,
                                          "role",
                                          Kekule.IO.CmlUtils.kekuleReagentRoleToCml(u.role),
                                          this.getDomHelper()
                                      ))
                                : (d = n);
                            var m = this.doGetChildObjectWriter(s);
                            m && m.writeObject(s, d, l);
                        }
                    }
                },
                getReactionComponentCmlName: function (e) {
                    switch (e) {
                        case Kekule.ReactionComponent.REACTANT:
                            return "reactant";
                        case Kekule.ReactionComponent.PRODUCT:
                            return "product";
                        case Kekule.ReactionComponent.CONDITION:
                            return "condition";
                        default:
                            return "substance";
                    }
                },
            })),
            (Kekule.IO.CmlListReader = Class.create(Kekule.IO.CmlBaseListReader, {
                CLASS_NAME: "Kekule.IO.CmlListReader",
                doCreateList: function (e) {
                    switch (Kekule.DomUtils.getLocalName(e)) {
                        case "moleculeList":
                            return new Kekule.MoleculeList();
                        case "reactionList":
                            return new Kekule.ReactionList();
                        default:
                            return new Kekule.ChemObjList();
                    }
                },
                doAppendObjToList: function (e, t) {
                    return t && t.append ? t.append(e) : this.tryApplySuper("doAppendObjToList", [e, t]), t;
                },
            })),
            (Kekule.IO.CmlListWriter = Class.create(Kekule.IO.CmlBaseListWriter, {
                CLASS_NAME: "Kekule.IO.CmlListWriter",
                doGetListElemTagName: function (e, t) {
                    var r;
                    switch (DataType.getType(e)) {
                        case "Kekule.MoleculeList":
                            r = "moleculeList";
                            break;
                        case "Kekule.ReactionList":
                            r = "reactionList";
                            break;
                        default:
                            r = this.tryApplySuper("doGetListElemTagName", [e, t]);
                    }
                    return r;
                },
            })),
            (Kekule.IO.CmlTransparentListWriter = Class.create(Kekule.IO.CmlBaseListWriter, {
                CLASS_NAME: "Kekule.IO.CmlTransparentListWriter",
                doGetListElemTagName: function (e, t) {
                    return null;
                },
            })),
            (Kekule.IO.CmlRootReader = Class.create(Kekule.IO.CmlElementReader, {
                CLASS_NAME: "Kekule.IO.CmlRootReader",
                doReadElement: function (e, t, r, l) {
                    var a;
                    if ((this.analysisElem(e), "cml" != Kekule.DomUtils.getLocalName(e) && (a = this.getReader(e)), a))
                        return a.readElement(e, null, this, l);
                    var n = l.defaultRootObjListHolder && l.enableReadRootObjList,
                        i = [],
                        o = Kekule.DomUtils.getDirectChildElems(e, null, null, this.getCoreNamespaceURI());
                    if (o) {
                        for (var u = 0, s = o.length; u < s; ++u)
                            if ((a = this.getReader(o[u]))) {
                                var d = a.readElement(o[u], null, this, l);
                                if (!n) return d;
                                i.push(d);
                            }
                        return i.length <= 0
                            ? null
                            : i.length <= 1
                            ? i[0]
                            : this._createChildObjsHolder(i, l.defaultRootObjListHolder);
                    }
                    return null;
                },
                getReader: function (e) {
                    return this.doGetChildElementReader(e);
                },
                analysisElem: function (e) {
                    var t = this.getDomHelper();
                    t.setForceAnalysisDoc(!0), this.getDomHelper().setRootElement(e);
                    for (var r = t.getNamespaces(), l = null, a = 0, n = r.length; a < n; ++a) {
                        var i = r[a].namespaceURI;
                        if (Kekule.IO.CML.LEGAL_CORE_NAMESPACE_URIS.indexOf(i) >= 0) {
                            l = i;
                            break;
                        }
                    }
                    this.setCoreNamespaceURI(l || null), this.setNamespaces(r);
                },
            })),
            (Kekule.IO.CmlRootWriter = Class.create(Kekule.IO.CmlElementWriter, {
                CLASS_NAME: "Kekule.IO.CmlRootWriter",
                getWriter: function (e) {
                    return this.doGetChildObjectWriter(e);
                },
                writeObject: function (e, t, r) {
                    var l;
                    this.getDomHelper().setForceAnalysisDoc(!0),
                        this.getDomHelper().setRootElement(t),
                        (l = e instanceof Kekule.ChemSpace ? e.getRoot() : e);
                    var a = this.getWriter(l);
                    return a ? a.writeObject(l, t, r) : null;
                },
            })),
            (Kekule.IO.CmlReader = Class.create(Kekule.IO.ChemDataReader, {
                CLASS_NAME: "Kekule.IO.CmlReader",
                initProperties: function () {
                    this.defineProp("objIdMap", { dataType: DataType.HASH, serializable: !1 });
                },
                doReadData: function (e, t, r, l) {
                    var a, n;
                    t != Kekule.IO.ChemDataType.DOM
                        ? (a = DataType.XmlUtility.parse(e).documentElement)
                        : (a = e.documentElement ? e.documentElement : e);
                    var i = Kekule.IO.CmlElementReaderFactory.getReader("cml");
                    if (i)
                        try {
                            this.setObjIdMap({}), i.setRootEvoker(this);
                            var o = Object.extend({}, Kekule.globalOptions.IO.cml);
                            (o = Object.extend(o, l || {})),
                                (n = i.readElement(a, null, null, o)),
                                i.doneReadingDocument(!0);
                        } finally {
                            i.finalize(), this.setObjIdMap(null);
                        }
                    return n;
                },
                getLoadedObjById: function (e) {
                    var t = this.getObjIdMap();
                    return t && t[e];
                },
                setObjIdMapValue: function (e, t) {
                    var r = this.getObjIdMap();
                    r && (r[e] = t);
                },
            })),
            (Kekule.IO.CmlWriter = Class.create(Kekule.IO.ChemDataWriter, {
                CLASS_NAME: "Kekule.IO.CmlWriter",
                initialize: function (e) {
                    this.tryApplySuper("initialize", [e]);
                    var t = e || {};
                    this.setPrettyPrint(
                        Kekule.ObjUtils.isUnset(t.prettyPrint) ? Kekule.globalOptions.IO.cml.prettyPrint : t.prettyPrint
                    );
                },
                initProperties: function () {
                    this.defineProp("prettyPrint", { dataType: DataType.BOOL, defaultValue: !0 }),
                        this.defineProp("rootElemWriter", {
                            dataType: DataType.OBJECT,
                            setter: null,
                            serializable: !1,
                        });
                },
                doWriteData: function (e, t, r, l) {
                    var a = Kekule.IO.CML.CML3_SCHEMA_NAMESPACE_URI,
                        n = DataType.XmlUtility.newDocument("cml", a),
                        i = Kekule.IO.CmlElementWriterFactory.getWriter("Kekule.ChemDocument");
                    if (i) {
                        var o;
                        try {
                            this.setPropStoreFieldValue("rootElemWriter", i);
                            var u = Object.extend({}, Kekule.globalOptions.IO.cml);
                            (u = Object.extend(u, l || {})),
                                i.setCoreNamespaceURI(a),
                                (o = i.writeObject(e, n.documentElement, u)),
                                i.doneWritingDocument(!0),
                                t == Kekule.IO.ChemDataType.TEXT &&
                                    (o = DataType.XmlUtility.serializeNode(n.documentElement, {
                                        prettyPrint: u.prettyPrint || this.getPrettyPrint(),
                                    }));
                        } finally {
                            this.setPropStoreFieldValue("rootElemWriter", null), i.finalize();
                        }
                        return o;
                    }
                    return (
                        Kekule.error(Kekule.$L("ErrorMsg.UNABLE_TO_OUTPUT_AS_CML").format(DataType.getType(e))), null
                    );
                },
            })),
            (function () {
                Kekule.IO.MimeType.CML = "chemical/x-cml";
                var e = Kekule.IO.CmlElementReaderFactory;
                e.register("name", Kekule.IO.CmlNameReader),
                    e.register("scalar", Kekule.IO.CmlScalarReader),
                    e.register("metaData", Kekule.IO.CmlMetaDataReader),
                    e.register("metaDataList", Kekule.IO.CmlMetaDataListReader),
                    e.register("formula", Kekule.IO.CmlFormulaReader),
                    e.register("molecule", Kekule.IO.CmlMoleculeReader),
                    e.register(["reactant", "product", "substance"], Kekule.IO.CmlReactionReagentReader),
                    e.register("reaction", Kekule.IO.CmlReactionReader),
                    e.register(["list", "moleculeList", "reactionList"], Kekule.IO.CmlListReader),
                    e.register(["conditionlist"], Kekule.IO.CmlConditionListReader),
                    e.register(["parameter"], Kekule.IO.CmlParameterReader),
                    e.register(["parameterlist"], Kekule.IO.CmlParameterListReader),
                    e.register(["array"], Kekule.IO.CmlArrayReader),
                    e.register("cml", Kekule.IO.CmlRootReader);
                var t = Kekule.IO.CmlElementWriterFactory;
                t.register(DataType.ARRAY, Kekule.IO.CmlArrayWriter),
                    t.register("Kekule.Scalar", Kekule.IO.CmlScalarWriter),
                    t.register("Kekule.MolecularFormula", Kekule.IO.CmlFormulaWriter),
                    t.register(
                        ["Kekule.ChemStructureFragment", "Kekule.Molecule", "Kekule.CompositeMolecule"],
                        Kekule.IO.CmlMoleculeWriter
                    ),
                    t.register("Kekule.Reaction", Kekule.IO.CmlReactionWriter),
                    t.register(["Kekule.ChemObjList", "Kekule.ChemStructureObjectGroup"], Kekule.IO.CmlListWriter),
                    t.register(["Kekule.ChemSpaceElement", "Kekule.ChemSpace"], Kekule.IO.CmlTransparentListWriter),
                    t.register("Kekule.ChemDocument", Kekule.IO.CmlRootWriter),
                    (Kekule.IO.DataFormat.CML = "cml"),
                    Kekule.IO.DataFormatsManager.register(
                        "cml",
                        Kekule.IO.MimeType.CML,
                        "cml",
                        Kekule.IO.ChemDataType.TEXT,
                        "Chemical Markup Language"
                    );
                var r = Kekule.IO.DataFormatsManager.findFormatId(Kekule.IO.MimeType.CML);
                Kekule.IO.ChemDataReaderManager.register("cml", Kekule.IO.CmlReader, [r]),
                    Kekule.IO.ChemDataWriterManager.register(
                        "cml",
                        Kekule.IO.CmlWriter,
                        [
                            Kekule.Scalar,
                            Kekule.StructureFragment,
                            Kekule.Reaction,
                            Kekule.ChemObjList,
                            Kekule.ChemSpace,
                        ],
                        [r]
                    );
            })();
    })(),
    (Kekule.IO.MdlVersion = { V2000: 2, V3000: 3 }),
    (Kekule.IO.MDL = {
        VER2000: "V2000",
        VER3000: "V3000",
        SYMBOL_ANYATOM: "A",
        SYMBOL_STARATOM: "*",
        SYMBOL_HETEROATOM: "Q",
        SYMBOL_RGROUP: "R",
        SYMBOL_RGROUP2: "R#",
        SYMBOL_LONEPAIR: "LP",
        SYMBOL_ATOMLIST: "L",
        SYMBOL_DUMMYATOM: "Du",
        SD_DATA_HEAD_PREFIX: ">",
        MOL_DELIMITER: "$$$$",
    }),
    (Kekule.IO.MdlUtils = {
        isUnspecifiedAtomSymbol: function (e) {
            return e === Kekule.IO.MDL.SYMBOL_ANYATOM || e === Kekule.IO.MDL.SYMBOL_STARATOM;
        },
        isHeteroAtomSymbol: function (e) {
            return e === Kekule.IO.MDL.SYMBOL_HETEROATOM;
        },
        isRGroupSymbol: function (e) {
            return e === Kekule.IO.MDL.SYMBOL_RGROUP || e === Kekule.IO.MDL.SYMBOL_RGROUP2;
        },
        isLonePairSymbol: function (e) {
            return e === Kekule.IO.MDL.SYMBOL_LONEPAIR;
        },
        isAtomListSymbol: function (e) {
            return e === Kekule.IO.MDL.SYMBOL_ATOMLIST;
        },
        analysisMdlDateTimeStr: function (e, t) {
            var r = new Date(),
                l = 0,
                a = 2,
                n = (parseInt(e.substr(l, a).trim(), 10) || 1) - 1;
            l += a;
            var i = parseInt(e.substr(l, a).trim(), 10) || 0;
            (l += a), (a = t ? 4 : 2);
            var o = parseInt(e.substr(l, a), 10) || 0;
            t || (o += o >= 70 ? 1900 : 2e3), r.setFullYear(o, n, i), (l += a), (a = 2);
            var u = parseInt(e.substr(l, a), 10) || 0;
            l += a;
            var s = parseInt(e.substr(l, a), 10) || 0;
            return r.setHours(u, s), r;
        },
        generateMdlDateTimeStr: function (e, t) {
            var r = "";
            return (
                (r += (e.getMonth() + 1).toString().lpad(2, "0")),
                (r += e.getDate().toString().lpad(2, "0")),
                (r += t ? e.getFullYear().toString().lpad(4, "0") : (e.getFullYear() % 100).toString().lpad(2, "0")),
                (r += e.getHours().toString().lpad(2, "0")),
                (r += e.getMinutes().toString().lpad(2, "0"))
            );
        },
        mdlRadicalToKekule: function (e) {
            return e;
        },
        kekuleRadicalToMdl: function (e) {
            return e;
        },
        bondTypeToKekuleOrder: function (e) {
            switch (e) {
                case 1:
                    return Kekule.BondOrder.SINGLE;
                case 2:
                    return Kekule.BondOrder.DOUBLE;
                case 3:
                    return Kekule.BondOrder.TRIPLE;
                case 4:
                    return Kekule.BondOrder.EXPLICIT_AROMATIC;
                default:
                    return Kekule.BondOrder.UNSET;
            }
        },
        kekuleBondOrderToMdlType: function (e) {
            switch (e) {
                case Kekule.BondOrder.SINGLE:
                    return 1;
                case Kekule.BondOrder.DOUBLE:
                    return 2;
                case Kekule.BondOrder.TRIPLE:
                    return 3;
                case Kekule.BondOrder.EXPLICIT_AROMATIC:
                    return 4;
                default:
                    return 1;
            }
        },
        getRxnMarkVersion: function (e) {
            var t = e.substr(0, 4);
            return "$RXN" != t
                ? null
                : (t = e.substr(4).trim()) == Kekule.IO.MDL.VER3000
                ? Kekule.IO.MdlVersion.V3000
                : Kekule.IO.MdlVersion.V2000;
        },
        assertIlegalForCtabOutput: function (e) {
            return e instanceof Kekule.StructureFragment
                ? !!e.hasCtab() || (Kekule.error(Kekule.$L("ErrorMsg.MOLECULE_HAS_NO_CTAB_TO_OUTPUT")), !1)
                : (Kekule.error(Kekule.$L("ErrorMsg.CAN_NOT_WRITE_NON_MOLECULE_TO_MOL")), !1);
        },
    }),
    (Kekule.IO.MdlStructureUtils = {
        fillFragment: function (e, t, r) {
            if ((e.clear(), t)) {
                var l;
                if (
                    ((l = r && r != Kekule.CoordMode.UNKNOWN ? r == Kekule.CoordMode.COORD3D : t.atomInfos.isCoord3D),
                    t.atomInfos)
                )
                    for (var a = 0, n = t.atomInfos.length; a < n; ++a) {
                        if ((s = t.atomInfos[a])) {
                            var i = Kekule.IO.MdlStructureUtils.createStructureNode(e, s, l);
                            i ? e.appendNode(i) : Kekule.raise(Kekule.$L("ErrorMsg.MDL_CTAB_ATOM_CANNOT_CREATE"));
                        }
                    }
                if (t.bondInfos)
                    for (a = 0, n = t.bondInfos.length; a < n; ++a) {
                        if ((s = t.bondInfos[a])) {
                            var o = Kekule.IO.MdlStructureUtils.createStructureConnector(e, s);
                            o ? e.appendConnector(o) : Kekule.raise(Kekule.$L("ErrorMsg.MDL_CTAB_BOND_CANNOT_CREATE"));
                        }
                    }
                if (t.sgInfos && t.sgInfos.length) {
                    var u = [];
                    for (a = 0, n = t.sgInfos.length; a < n; ++a) {
                        var s;
                        if ((s = t.sgInfos[a]) && "SUP" == s.sgType) {
                            for (var d = [], m = 0, c = s.atomIndexes.length; m < c; ++m)
                                d.push(e.getNodeAt(s.atomIndexes[m]));
                            d.length && u.push({ atoms: d, text: s.label });
                        }
                    }
                    for (a = 0, n = u.length; a < n; ++a) {
                        if ((d = u[a].atoms).length) {
                            var k = e.marshalSubFragment(d, new Kekule.SubGroup()),
                                g = u[a].text;
                            k.setFormulaText && g.match(/.+\d/) ? k.setFormulaText(u[a].text) : k.setAbbr(u[a].text);
                        }
                    }
                }
            }
            return e;
        },
        createStructureNode: function (e, t, r) {
            var l;
            if (t.atomListInfo || Kekule.IO.MdlUtils.isAtomListSymbol(t.symbol)) {
                l = new Kekule.VariableAtom();
                var a = [];
                t.atomListInfo &&
                    t.atomListInfo.symbols &&
                    ((a = a.concat(t.atomListInfo.symbols)),
                    t.atomListInfo.isAllowList ? l.setAllowedIsotopeIds(a) : l.setDisallowedIsotopeIds(a));
            } else if (Kekule.IO.MdlUtils.isRGroupSymbol(t.symbol)) l = new Kekule.RGroup();
            else if (Kekule.IO.MdlUtils.isHeteroAtomSymbol(t.symbol))
                l = new Kekule.Pseudoatom(null, Kekule.PseudoatomType.HETERO);
            else if (Kekule.IO.MdlUtils.isUnspecifiedAtomSymbol(t.symbol))
                l = new Kekule.Pseudoatom(null, Kekule.PseudoatomType.ANY);
            else {
                var n = Kekule.ChemicalElementsDataUtil.getElementInfo(t.symbol);
                if (n) {
                    var i = null;
                    if (t.massNumber) i = t.massNumber;
                    else if (t.massDiff && n) {
                        var o = n.naturalMass,
                            u =
                                ((i = Math.round(o + t.massDiff)),
                                Kekule.IsotopesDataUtil.getIsotopeInfo(n.atomicNumber, i));
                        u ||
                            ((i = Math.floor(o + t.massDiff)),
                            (u = Kekule.IsotopesDataUtil.getIsotopeInfo(n.atomicNumber, i))),
                            u ||
                                ((i = Math.ceil(o + t.massDiff)),
                                (u = Kekule.IsotopesDataUtil.getIsotopeInfo(n.atomicNumber, i))),
                            u || (i = null);
                    }
                    l = new Kekule.Atom(null, t.symbol, i);
                } else {
                    var s = Kekule.IsotopesDataUtil.getIsotopeInfo(t.symbol);
                    l = s
                        ? new Kekule.Atom(null, s.atomicNumber, s.massNumber)
                        : new Kekule.Pseudoatom(null, Kekule.PseudoatomType.ANY);
                }
            }
            return (
                t.charge && l.setCharge(t.charge),
                t.radical && l.setRadical(t.radical),
                t.parity && l.setParity && l.setParity(t.parity),
                void 0 !== t.hydrongenCount &&
                    l.setExplicitHydrogenCount &&
                    l.setExplicitHydrogenCount(t.hydrongenCount),
                r ? l.setCoord3D({ x: t.x, y: t.y, z: t.z }) : l.setCoord2D({ x: t.x, y: t.y }),
                l
            );
        },
        createStructureConnector: function (e, t) {
            var r = e.getNodeAt(t.atomIndex1),
                l = e.getNodeAt(t.atomIndex2);
            if (r && l) {
                var a = [r, l];
                if (t.endAtomIndexes)
                    for (var n = 0, i = t.endAtomIndexes.length; n < i; ++n) {
                        var o = e.getNodeAt(t.endAtomIndexes[n]);
                        o && a.push(o);
                    }
                var u = new Kekule.Bond(null, a, t.order);
                return void 0 !== t.stereo && u.setStereo(t.stereo), u;
            }
            return null;
        },
        isNodeVariableAtom: function (e) {
            return e instanceof Kekule.VariableAtom;
        },
        getAtomTypeStr: function (e, t) {
            if (e instanceof Kekule.Atom) return e.getSymbol();
            if (!(e instanceof Kekule.Pseudoatom)) {
                if (e instanceof Kekule.RGroup) return Kekule.IO.MDL.SYMBOL_RGROUP;
                if (e instanceof Kekule.VariableAtom) {
                    if (t) return Kekule.IO.MDL.SYMBOL_ATOMLIST;
                    var r = "[",
                        l = e.getAllowedIsotopeIds();
                    if (((l && l.length) || ((r = "NOT["), (l = e.getDisallowedIsotopeIds())), l && l.length)) {
                        for (var a = [], n = 0, i = l.length; n < i; ++n) {
                            var o = Kekule.IsotopesDataUtil.getIsotopeIdDetail(l[n]);
                            o && o.symbol && a.push(o.symbol);
                        }
                        return (r = r + a.join(",") + "]");
                    }
                    return Kekule.IO.MDL.SYMBOL_ATOMLIST;
                }
                return "?";
            }
            switch (e.getAtomType()) {
                case Kekule.PseudoatomType.ANY:
                    return Kekule.IO.MDL.SYMBOL_ANYATOM;
                case Kekule.PseudoatomType.HETERO:
                    return Kekule.IO.MDL.SYMBOL_HETEROATOM;
                default:
                    return Kekule.IO.MDL.SYMBOL_DUMMYATOM;
            }
        },
        getMoleculeCtabStructureInfo: function (e) {
            var t = {};
            (t.atoms = e.getLeafNodes()), (t.bonds = e.getAllChildConnectors()), (t.subGroups = e.getSubFragments());
            for (var r = 0, l = 0, a = 0, n = t.atoms.length; a < n; ++a)
                t.atoms[a].hasCoord3D() && ++l, t.atoms[a].hasCoord2D() && ++r;
            return (t.coordMode = r > l ? Kekule.CoordMode.COORD2D : Kekule.CoordMode.COORD3D), t;
        },
        splitConnectedNodes: function (e) {
            for (var t = { primaryNodes: [] }, r = 0, l = e.getConnectedObjs(), a = 0, n = l.length; a < n; ++a)
                l[a] instanceof Kekule.ChemStructureNode &&
                    (r < 2
                        ? (t.primaryNodes.push(l[a]), ++r)
                        : (t.remainNodes || (t.remainNodes = []), t.remainNodes.push(l[a])));
            return t;
        },
        generateClassicStyleCountLine: function (e, t) {
            if (t == Kekule.IO.MdlVersion.V3000) return "  0  0  0     0  0              0 V3000";
            var r = "";
            (r += e.atoms.length.toString().lpad(3)),
                (r += e.bonds.length.toString().lpad(3)),
                (r += "0".lpad(3)),
                (r += "0".lpad(3)),
                (r += "0".lpad(3)),
                (r += "0".lpad(3));
            for (var l = 0; l < 4; ++l) r += "0".lpad(3);
            return (r += "999"), (r += Kekule.IO.MDL.VER2000.lpad(6));
        },
    }),
    (Kekule.IO.MdlBlockHandler = Class.create(ObjectEx, {
        CLASS_NAME: "Kekule.IO.MdlBlockHandler",
        initProperties: function () {
            this.defineProp("textBuffer", {
                dataType: "Kekule.TextLinesBuffer",
                serializable: !1,
                getter: function () {
                    var e = this.getPropStoreFieldValue("textBuffer");
                    return e || ((e = this.createTextBuffer()), this.setPropStoreFieldValue("textBuffer", e)), e;
                },
                setter: null,
            });
        },
        createTextBuffer: function () {
            return new Kekule.TextLinesBuffer();
        },
    })),
    (Kekule.IO.MdlBlockReader = Class.create(Kekule.IO.MdlBlockHandler, {
        CLASS_NAME: "Kekule.IO.MdlBlockReader",
        readBlock: function (e, t) {
            return (
                "string" == typeof e ? this.getTextBuffer().setText(e) : this.getTextBuffer().setLines(e),
                this.getTextBuffer().reset(),
                this.doReadBlock(this.getTextBuffer())
            );
        },
        doReadBlock: function (e, t) {},
    })),
    (Kekule.IO.MdlBlockWriter = Class.create(Kekule.IO.MdlBlockHandler, {
        CLASS_NAME: "Kekule.IO.MdlBlockWriter",
        writeBlock: function (e) {
            return (
                this.getTextBuffer().clear(), this.doWriteBlock(e, this.getTextBuffer()), this.getTextBuffer().getText()
            );
        },
        doWriteBlock: function (e, t) {},
    })),
    (Kekule.IO.Mdl2kUtils = {
        atomLineChargeToKekule: function (e) {
            switch (e) {
                case 1:
                    return 3;
                case 2:
                    return 2;
                case 3:
                    return 1;
                case 5:
                    return -1;
                case 6:
                    return -2;
                case 7:
                    return -3;
                default:
                    return 0;
            }
        },
        chargeToMdlAtomLineValue: function (e) {
            switch (e) {
                case 1:
                    return 3;
                case 2:
                    return 2;
                case 3:
                    return 1;
                case -1:
                    return 5;
                case -2:
                    return 6;
                case -3:
                    return 7;
                default:
                    return 0;
            }
        },
        atomLineChargeToRadical: function (e) {
            return 4 == e ? Kekule.RadicalOrder.DOUBLET : 0;
        },
        radicalToMdlAtomLineValue: function (e) {
            return e == Kekule.RadicalOrder.DOUBLET ? 4 : 0;
        },
        chargeOrRadicalToMdlAtomLineValue: function (e, t) {
            return e
                ? Kekule.IO.Mdl2kUtils.chargeToMdlAtomLineValue(e)
                : t
                ? Kekule.IO.Mdl2kUtils.radicalToMdlAtomLineValue(e)
                : 0;
        },
        bondStereoToKekule: function (e, t) {
            if (t == Kekule.BondOrder.SINGLE)
                switch (e) {
                    case 1:
                        return Kekule.BondStereo.UP;
                    case 4:
                        return Kekule.BondStereo.UP_OR_DOWN;
                    case 6:
                        return Kekule.BondStereo.DOWN;
                    default:
                        return Kekule.BondStereo.NONE;
                }
            else {
                if (t != Kekule.BondOrder.DOUBLE) return Kekule.BondStereo.NONE;
                switch (e) {
                    case 3:
                        return Kekule.BondStereo.E_Z_BY_COORDINATES;
                    default:
                        return Kekule.BondStereo.NONE;
                }
            }
        },
        bondStereoToMdlBondLineValue: function (e, t, r) {
            var l = Kekule.BondStereo,
                a = {};
            if (t == Kekule.BondOrder.SINGLE)
                if ((r && [l.UP_INVERTED, l.DOWN_INVERTED].indexOf(e) >= 0 && (a.inverted = !0), a.inverted))
                    e === l.UP_INVERTED ? (a.stereo = 1) : e === l.DOWN_INVERTED && (a.stereo = 6);
                else
                    switch (e) {
                        case l.DOWN_INVERTED:
                        case l.UP:
                            a.stereo = 1;
                            break;
                        case l.UP_INVERTED:
                        case l.DOWN:
                            a.stereo = 6;
                            break;
                        case l.UP_OR_DOWN_INVERTED:
                        case l.UP_OR_DOWN:
                            a.stereo = 4;
                            break;
                        default:
                            a.stereo = 0;
                    }
            else if (t == Kekule.BondOrder.DOUBLE)
                switch (e) {
                    case Kekule.BondStereo.E_Z_BY_COORDINATES:
                        a.stereo = 3;
                        break;
                    default:
                        a.stereo = 0;
                }
            else a.stereo = 0;
            return a;
        },
        coordToStr: function (e) {
            return (e || 0).toFixed(4);
        },
        getMassDiff: function (e) {
            var t = Kekule.ChemicalElementsDataUtil.getElementInfo(e.getAtomicNumber()).naturalMass;
            return Math.round(e.getMassNumber() - t);
        },
        getAtomListPropLineValue: function (e) {
            var t = "",
                r = e.getAllowedIsotopeIds();
            if ((r && r.length ? (t = " F ") : ((t = " T "), (r = e.getDisallowedIsotopeIds())), r && r.length)) {
                for (var l = [], a = 0, n = r.length; a < n; ++a) {
                    var i = Kekule.IsotopesDataUtil.getIsotopeIdDetail(r[a]);
                    i && i.symbol && l.push(i.symbol.rpad(4));
                }
                var o = l.join("");
                return (t = l.length.toString().lpad(3) + t + o);
            }
            return null;
        },
        getCtabPropLineTag: function (e, t) {
            return (t || "M") + "  " + e;
        },
        getCtabPropLineCountTag: function (e, t, r) {
            var l = (r || "M") + "  " + e;
            return t && (l += t.toString().lpad(3)), l;
        },
        generateCtabPropLine: function (e, t, r, l) {
            return Kekule.IO.Mdl2kUtils.getCtabPropLineCountTag(t, r, l) + " " + e.join(" ");
        },
    }),
    (Kekule.IO.Mdl2kCTabReader = Class.create(Kekule.IO.MdlBlockReader, {
        CLASS_NAME: "Kekule.IO.Mdl2kCTabReader",
        doReadBlock: function (e, t) {
            return this.analysisCTab(e);
        },
        analysisCTab: function (e) {
            var t = {},
                r = e.readLine(),
                l = this.analysisCountLine(r),
                a = [];
            a.isCoord3D = !1;
            for (var n = 0; n < l.atomCount; ++n) {
                r = e.readLine();
                var i = this.analysisAtomLine(r);
                i.z && (a.isCoord3D = !0), a.push(i);
            }
            var o = [];
            for (n = 0; n < l.bondCount; ++n) {
                r = e.readLine();
                var u = this.analysisBondLine(r);
                o.push(u);
            }
            for (n = 0; n < l.atomListCount; ++n) {
                r = e.readLine();
                var s = this.analysisAtomListInfoLine(r);
                a[s.atomIndex] && (a[s.atomIndex].atomListInfo = s);
            }
            for (n = 0; n < l.stextCount; ++n) (r = e.readLine()), (r = e.readLine());
            for (var d = []; !e.eof(); ) {
                r = e.readLine();
                var m = this.analysisPropertyLine(r, a, d);
                if ("END" === m.prop) break;
                if ("SKP" === m.prop) for (n = 0; n < m.count && !e.eof(); ++n) r = e.readLine();
                else if ("A" === m.leading) {
                    if (e.eof()) break;
                    var c = m.atomIndex;
                    (r = e.readLine()), (a[c].symbol = r.trim());
                }
            }
            return (t.countInfo = l), (t.atomInfos = a), (t.bondInfos = o), (t.sgInfos = d), t;
        },
        analysisCountLine: function (e) {
            var t = {},
                r = e.substr(33, 6).trim();
            return r && r != Kekule.IO.MDL.VER2000
                ? (Kekule.error(Kekule.$L("ErrorMsg.NOT_MDL2000_FORMAT_DATA")), null)
                : ((r = e.substr(0, 3)),
                  (t.atomCount = parseInt(r, 10)),
                  (r = e.substr(3, 3)),
                  (t.bondCount = parseInt(r, 10)),
                  (r = e.substr(12, 3)),
                  (t.isChiral = 0 != parseInt(r, 10)),
                  (r = e.substr(15, 3)),
                  (t.stextCount = parseInt(r, 10)),
                  t);
        },
        analysisAtomLine: function (e) {
            var t = {},
                r = e.substr(0, 10);
            (t.x = parseFloat(r)),
                (r = e.substr(10, 10)),
                (t.y = parseFloat(r)),
                (r = e.substr(20, 10)),
                (t.z = parseFloat(r)),
                (r = e.substr(31, 3)),
                (t.symbol = r.trim()),
                (r = e.substr(34, 2)),
                (t.massDiff = parseInt(r, 10)),
                (r = e.substr(36, 3));
            var l = parseInt(r, 10),
                a = Kekule.IO.Mdl2kUtils.atomLineChargeToRadical(l);
            return (
                a ? (t.radical = a) : (t.charge = Kekule.IO.Mdl2kUtils.atomLineChargeToKekule(l)),
                (r = e.substr(39, 3)),
                (l = parseInt(r, 10)) && (t.parity = l),
                (r = e.substr(42, 3)),
                (l = parseInt(r, 10)) > 0 && (t.hydrongenCount = l - 1),
                t
            );
        },
        analysisBondLine: function (e) {
            var t = {},
                r = e.substr(0, 3);
            (t.atomIndex1 = parseInt(r, 10) - 1),
                (r = e.substr(3, 3)),
                (t.atomIndex2 = parseInt(r, 10) - 1),
                (r = e.substr(6, 3)),
                (t.order = Kekule.IO.MdlUtils.bondTypeToKekuleOrder(parseInt(r, 10))),
                (r = e.substr(9, 3));
            var l = Kekule.IO.Mdl2kUtils.bondStereoToKekule(parseInt(r, 10), t.order);
            return l && (t.stereo = l), t;
        },
        analysisAtomListInfoLine: function (e) {
            var t = {},
                r = e.substr(0, 3);
            (t.atomIndex = parseInt(r, 10) - 1),
                (r = e.substr(4, 1)),
                (t.isAllowList = "f" == r.toLowerCase()),
                (r = e.substr(9, 1));
            var l = Math.min(parseInt(r, 10), 5);
            t.atomicNumbers = [];
            for (var a = 11, n = 0; n < l; ++n) {
                (a += 4 * n), (r = e.substr(a, 3));
                var i = parseInt(r, 10);
                i && t.atomicNumbers.push(i);
            }
            return t;
        },
        analysisPropertyLine: function (e, t, r) {
            var l = {},
                a = e.substr(0, 1);
            if (((l.leading = a), "M" == a)) {
                var n,
                    i,
                    o = e.substr(3, 3).trim();
                if (((l.prop = o), "END" === o)) return l;
                if (["CHG", "RAD", "ISO"].indexOf(o) >= 0) {
                    var u = parseInt(e.substr(6, 3).trim());
                    (l.entryCount = u), (l.entries = []);
                    for (
                        var s = "CHG" === o ? "charge" : "RAD" === o ? "radical" : "massNumber", d = 10, m = 0;
                        m < u;
                        ++m
                    ) {
                        var c = parseInt(e.substr(d, 3).trim(), 10) - 1,
                            k = parseInt(e.substr(d + 4, 3).trim(), 10);
                        (d += 8), l.entries.push({ atomIndex: c, propName: k }), (t[c][s] = k);
                    }
                } else
                    ["STY", "SLB"].indexOf(o) >= 0
                        ? (i = r[(n = parseInt(e.substr(10, 3), 10) - 1)])
                        : ["SAL", "SBL", "SMT", "SCL", "SAP", "SBV"].indexOf(o) >= 0 &&
                          (i = r[(n = parseInt(e.substr(7, 3), 10) - 1)]);
                switch (o) {
                    case "ALS":
                        var g = {},
                            f = e.substr(7, 3).trim();
                        (g.atomIndex = parseInt(f, 10) - 1), (l.atomIndex = g.atomIndex);
                        var I = parseInt(e.substr(10, 3)),
                            O = e.substr(14, 1);
                        (g.isAllowList = "f" == O.toLowerCase()), (g.symbols = []);
                        for (m = 0; m < I; ++m) (O = e.substr(16 + 4 * m, 4).trim()), g.symbols.push(O);
                        l.atomListInfo = g;
                        var C = t[g.atomIndex].atomListInfo;
                        C
                            ? C.isAllowList !== g.isAllowList
                                ? (t[g.atomIndex].atomListInfo = g)
                                : (C.symbols = Kekule.ArrayUtils.pushUnique(C.symbols, g.symbols))
                            : (t[g.atomIndex].atomListInfo = g);
                        break;
                    case "STY":
                        "SUP" == e.substr(14, 3) && (r[n] = { sgType: "SUP" });
                        break;
                    case "SLB":
                        i && (i.labelId = e.substr(14).trim());
                        break;
                    case "SAL":
                        if (i) {
                            var h = parseInt(e.substr(10, 3));
                            i.atomIndexes || (i.atomIndexes = []);
                            for (m = 0; m < h; ++m) {
                                (O = e.substr(14 + 4 * m, 3)), (c = parseInt(O) - 1);
                                i.atomIndexes.push(c);
                            }
                        }
                        break;
                    case "SBL":
                        if (i && "SUP" == i.sgType) {
                            var K = parseInt(e.substr(10, 3));
                            i.crossBondIndexes || (i.crossBondIndexes = []);
                            for (m = 0; m < K; ++m) {
                                O = e.substr(14 + 4 * m, 3);
                                var p = parseInt(O) - 1;
                                i.crossBondIndexes.push(p);
                            }
                        }
                        break;
                    case "SMT":
                        i &&
                            ("SUP" == i.sgType ? (i.label = e.substr(11).trim()) : (i.subscript = e.substr(11).trim()));
                        break;
                    case "SCL":
                        i && (i.sgClass = e.substr(11).trim());
                        break;
                    case "SBV":
                        if (i) {
                            var M = parseInt(e.substr(11, 3), 10) - 1;
                            i.bondVectors || (i.bondVectors = []),
                                (i.bondVectors[M] = {
                                    bondIndex: M,
                                    x: parseFloat(e.substr(14, 10)),
                                    y: parseFloat(e.substr(24, 10)),
                                });
                            var E = e.substr(34, 10).trim();
                            E && (i.bondVectors[M].z = parseFloat(E) || 0);
                        }
                }
            } else if ("A" === a) {
                (d = 3), (c = parseInt(e.substr(d, 3).trim(), 10) - 1);
                l.atomIndex = c;
            } else if ("V" === a);
            else if ("G" === a);
            else if ("S" === a) {
                o = e.substr(3, 3).trim();
                (l.prop = o), (l.count = parseInt(e.substr(6, 3), 10));
            }
            return l;
        },
    })),
    (Kekule.IO.Mdl2kCTabWriter = Class.create(Kekule.IO.MdlBlockWriter, {
        CLASS_NAME: "Kekule.IO.Mdl2kCTabWriter",
        initialize: function (e) {
            this.tryApplySuper("initialize"), this.setCoordMode(e || Kekule.CoordMode.UNKNOWN);
        },
        initProperties: function () {
            this.defineProp("coordMode", { dataType: DataType.INT, deaultValue: Kekule.CoordMode.UNKNOWN });
        },
        doWriteBlock: function (e, t) {
            return Kekule.IO.MdlUtils.assertIlegalForCtabOutput(e), this.outputCtab(e, t);
        },
        outputCtab: function (e, t) {
            var r = [],
                l = Kekule.IO.MdlStructureUtils.getMoleculeCtabStructureInfo(e);
            if (
                (this.getCoordMode() != Kekule.CoordMode.UNKNOWN && (l.coordMode = this.getCoordMode()),
                t.writeLine(this.generateCountLine(l)),
                this.outputAtomBlock(e, l, t, r),
                this.outputBondBlock(e, l, t),
                r.length)
            )
                for (var a = 0, n = r.length; a < n; ++a) t.writeLine(r[a]);
            this.outputSubgroupsPropLines(e, l, t), t.writeLine(Kekule.IO.Mdl2kUtils.getCtabPropLineTag("END"));
        },
        generateCountLine: function (e) {
            return Kekule.IO.MdlStructureUtils.generateClassicStyleCountLine(e, Kekule.IO.MdlVersion.V2000);
        },
        outputAtomBlock: function (e, t, r, l) {
            for (var a = 0, n = t.atoms.length; a < n; ++a) {
                var i = t.atoms[a],
                    o = this.generateAtomLine(a, t.coordMode, i, l);
                r.writeLine(o);
            }
        },
        generateAtomLine: function (e, t, r, l) {
            var a = Kekule.IO.Mdl2kUtils.coordToStr,
                n = "",
                i = (e + 1).toString().lpad(3),
                o = t == Kekule.CoordMode.COORD3D ? r.getAbsCoord3D() : r.getAbsCoord2D();
            if (
                ((n += a(o.x).lpad(10) + a(o.y).lpad(10) + a(o.z).lpad(10)),
                (n += " " + Kekule.IO.MdlStructureUtils.getAtomTypeStr(r, !0).rpad(3)),
                Kekule.IO.MdlStructureUtils.isNodeVariableAtom(r))
            ) {
                var u = Kekule.IO.Mdl2kUtils.getAtomListPropLineValue(r);
                if (u) {
                    var s = Kekule.IO.Mdl2kUtils.getCtabPropLineTag("ALS") + " " + i + u;
                    l.push(s);
                }
            }
            if (r.getMassNumber && r.getMassNumber()) {
                n += (Kekule.IO.Mdl2kUtils.getMassDiff(r.getIsotope()) || 0).toString().lpad(2);
                s = Kekule.IO.Mdl2kUtils.generateCtabPropLine([i, r.getMassNumber().toString().lpad(3)], "ISO", 1);
                l.push(s);
            } else n += "0".lpad(2);
            if (
                ((n += Kekule.IO.Mdl2kUtils.chargeOrRadicalToMdlAtomLineValue(
                    r.getCharge ? r.getCharge() : null,
                    r.getRadical ? r.getRadical() : null
                )
                    .toString()
                    .lpad(3)),
                r.getCharge && r.getCharge())
            ) {
                s = Kekule.IO.Mdl2kUtils.generateCtabPropLine([i, r.getCharge().toString().lpad(3)], "CHG", 1);
                l.push(s);
            }
            if (r.getRadical && r.getRadical()) {
                s = Kekule.IO.Mdl2kUtils.generateCtabPropLine(
                    [i, Kekule.IO.MdlUtils.kekuleRadicalToMdl(r.getRadical()).toString().lpad(3)],
                    "RAD",
                    1
                );
                l.push(s);
            }
            n += ((r.getParity && r.getParity()) || 0).toString().lpad(3);
            var d = r.getExplicitHydrogenCount ? r.getExplicitHydrogenCount() : null;
            n += (Kekule.ObjUtils.isUnset(d) ? "0" : (d + 1).toString()).lpad(3);
            for (var m = 0, c = "0".lpad(3); m < 8; ++m) n += c;
            return n;
        },
        outputBondBlock: function (e, t, r) {
            for (var l = 0, a = t.bonds.length; l < a; ++l) {
                var n = t.bonds[l],
                    i = this.generateBondLine(l, n, t.atoms);
                r.writeLine(i);
            }
        },
        generateBondLine: function (e, t, r) {
            var l,
                a,
                n = "";
            t.getStereo && t.getBondOrder
                ? (l = (a = Kekule.IO.Mdl2kUtils.bondStereoToMdlBondLineValue(
                      t.getStereo(),
                      t.getBondOrder(),
                      !0
                  )).stereo
                      .toString()
                      .lpad(3))
                : ((a = {}), (l += "0".lpad(3)));
            var i,
                o,
                u = Kekule.IO.MdlStructureUtils.splitConnectedNodes(t);
            return (
                (i = (r.indexOf(u.primaryNodes[0]) + 1).toString().lpad(3)),
                (o = (r.indexOf(u.primaryNodes[1]) + 1).toString().lpad(3)),
                a && a.inverted ? (n += o + i) : (n += i + o),
                t.getBondOrder
                    ? (n += Kekule.IO.MdlUtils.kekuleBondOrderToMdlType(t.getBondOrder()).toString().lpad(3))
                    : (n += "0".lpad(3)),
                (n += l),
                (n += "0".lpad(3)),
                (n += "0".lpad(3)),
                (n += "0".lpad(3))
            );
        },
        outputSubgroupsPropLines: function (e, t, r) {
            for (var l = 0, a = t.subGroups.length; l < a; ++l)
                for (var n = this.generateSgroupLines(l, t.subGroups[l], t), i = 0, o = n.length; i < o; ++i)
                    r.writeLine(n[i]);
        },
        generateSgroupLines: function (e, t, r) {
            var l = [],
                a = (e + 1).toString().lpad(3),
                n = Kekule.IO.Mdl2kUtils.generateCtabPropLine([a, "SUP"], "STY", 1);
            l.push(n), (n = Kekule.IO.Mdl2kUtils.generateCtabPropLine([a, a], "SLB", 1)), l.push(n);
            var i =
                (t.getAbbr && t.getAbbr()) || (t.getFormulaText && t.getFormulaText()) || (t.getName && t.getName());
            i && ((n = Kekule.IO.Mdl2kUtils.generateCtabPropLine([a, i], "SMT")), l.push(n));
            for (var o = [], u = 0, s = (I = t.getLeafNodes()).length; u < s; ++u) {
                (e = r.atoms.indexOf(I[u])) >= 0 && o.push((e + 1).toString().lpad(3));
            }
            o = o.sort();
            var d = Kekule.ArrayUtils.divide(o, 15);
            for (u = 0, s = d.length; u < s; ++u) {
                var m = d[u];
                (n =
                    Kekule.IO.Mdl2kUtils.getCtabPropLineTag("SAL") +
                    " " +
                    a +
                    m.length.toString().lpad(3) +
                    " " +
                    m.join(" ")),
                    l.push(n);
            }
            var c = t.getCrossConnectors(),
                k = [],
                g = [],
                f = Kekule.IO.Mdl2kUtils.coordToStr;
            for (u = 0, s = c.length; u < s; ++u) {
                if ((e = r.bonds.indexOf(c[u])) >= 0) {
                    k.push((e + 1).toString().lpad(3));
                    var I,
                        O = [e + 1],
                        C = {};
                    2 == (I = Kekule.IO.MdlStructureUtils.splitConnectedNodes(c[u]).primaryNodes).length &&
                        (r.coordMode == Kekule.CoordMode.COORD2D
                            ? ((C = Kekule.CoordUtils.substract(I[0].getAbsCoord2D(), I[1].getAbsCoord2D())),
                              (O = O.concat([f(C.x).lpad(10), f(C.y).lpad(10)])))
                            : ((C = Kekule.CoordUtils.substract(I[0].getAbsCoord3D(), I[1].getAbsCoord3D())),
                              (O = O.concat([f(C.x), f(C.y), f(C.z)])))),
                        g.push(O);
                }
            }
            k = k.sort();
            var h = Kekule.ArrayUtils.divide(k, 15);
            for (u = 0, s = h.length; u < s; ++u) {
                var K = h[u];
                (n =
                    Kekule.IO.Mdl2kUtils.getCtabPropLineTag("SBL") +
                    " " +
                    a +
                    K.length.toString().lpad(3) +
                    " " +
                    K.join(" ")),
                    l.push(n);
            }
            for (u = 0, s = g.length; u < s; ++u) {
                var p = g[u].shift(),
                    M = g[u].join("");
                (n = Kekule.IO.Mdl2kUtils.getCtabPropLineTag("SBV") + " " + a + " " + p.toString().lpad(3) + M),
                    l.push(n);
            }
            return l;
        },
    })),
    (Kekule.IO.Mdl3kUtils = {
        get3kBlockStartTag: function (e) {
            return "BEGIN " + e.toUpperCase();
        },
        get3kBlockEndTag: function (e) {
            return "END " + e.toUpperCase();
        },
        isAtomList: function (e) {
            return e.search(/\[.+\]/) >= 0;
        },
        analysisAtomList: function (e) {
            var t = /\[(.+)\]/g.exec(e);
            if (t && t.length >= 2) {
                t = t[1].split(",");
                var r = {};
                (r.isAllowList = !(0 == e.trim().indexOf("NOT"))), (r.symbols = []);
                for (var l = 0, a = t.length; l < a; ++l) r.symbols.push(t[l].trim());
                return r;
            }
            return null;
        },
        bondCfgToKekule: function (e) {
            switch (e) {
                case 0:
                    return Kekule.BondStereo.NONE;
                case 1:
                    return Kekule.BondStereo.UP;
                case 2:
                    return Kekule.BondStereo.UP_OR_DOWN;
                case 3:
                    return Kekule.BondStereo.DOWN;
                default:
                    return Kekule.BondStereo.NONE;
            }
        },
        bondStereoToMdlCfg: function (e, t) {
            var r = Kekule.BondStereo,
                l = {};
            if ((t && [r.UP_INVERTED, r.DOWN_INVERTED].indexOf(e) >= 0 && (l.inverted = !0), l.inverted))
                e === r.UP_INVERTED ? (l.cfg = 1) : e === r.DOWN_INVERTED && (l.cfg = 3);
            else
                switch (e) {
                    case r.UP:
                    case r.DOWN_INVERTED:
                        l.cfg = 1;
                        break;
                    case r.UP_OR_DOWN:
                        l.cfg = 2;
                        break;
                    case r.DOWN:
                    case r.UP_INVERTED:
                        l.cfg = 3;
                        break;
                    default:
                        l.cfg = 0;
                }
            return l;
        },
        coordToStr: function (e) {
            return (e || 0).toFixed(6);
        },
    }),
    (Kekule.IO.Mdl3kValueUtils = {
        SEPARATOR: " ",
        KEYVALUE_CONNECTOR: "=",
        STR_QUOTE: '"',
        ESC_QUOTE: '""',
        VALUELIST_PATTERN: /\(.+\)/g,
        split: function (e, t) {
            for (
                var r = t || Kekule.IO.Mdl3kValueUtils.SEPARATOR,
                    l = Kekule.IO.Mdl3kValueUtils.STR_QUOTE,
                    a = [],
                    n = !1,
                    i = !1,
                    o = !1,
                    u = "",
                    s = 0,
                    d = e.length;
                s < d;
                ++s
            ) {
                var m = e.charAt(s);
                m == l
                    ? (!n && e.charAt(s + 1) == l) || (n && e.charAt(s - 1) == l) || (n = !n)
                    : "[" == m
                    ? (i = !0)
                    : "]" == m
                    ? (i = !1)
                    : "(" == m
                    ? (o = !0)
                    : ")" == m && (o = !1),
                    m == r ? (n || i || o || !u ? (u += m) : (a.push(u), (u = ""))) : (u += m);
            }
            return u && a.push(u), a;
        },
        merge: function (e, t) {
            var r = t || Kekule.IO.Mdl3kValueUtils.SEPARATOR;
            return e.join(r);
        },
        isKeyValuePair: function (e) {
            return e.indexOf(Kekule.IO.Mdl3kValueUtils.KEYVALUE_CONNECTOR) >= 0;
        },
        splitKeyValue: function (e) {
            var t = {},
                r = Kekule.IO.Mdl3kValueUtils.KEYVALUE_CONNECTOR,
                l = e.indexOf(r);
            return l < 0 ? (t.value = e) : ((t.key = e.substr(0, l)), (t.value = e.substr(l + r.length))), t;
        },
        mergeKeyValue: function (e, t) {
            return t ? "" + t + Kekule.IO.Mdl3kValueUtils.KEYVALUE_CONNECTOR + e : e;
        },
        isValueList: function (e) {
            return e.search(Kekule.IO.Mdl3kValueUtils.VALUELIST_PATTERN) >= 0;
        },
        splitValueList: function (e) {
            var t = /\((.+)\)/.exec(e);
            if (t && t.length > 1) {
                var r = t[1],
                    l = Kekule.IO.Mdl3kValueUtils.split(r);
                return l.shift(), l;
            }
            return [e];
        },
        mergeValueList: function (e) {
            for (var t = "(" + e.length, r = 0, l = e.length; r < l; ++r)
                t += Kekule.IO.Mdl3kValueUtils.SEPARATOR + e[r];
            return (t += ")");
        },
        unquoteValue: function (e) {
            var t = Kekule.IO.Mdl3kValueUtils.STR_QUOTE,
                r = e.trim();
            r.substr(0, t.length) == t && (r = r.substr(t.length)),
                r.substr(r.length - t.length) == t && (r = r.substr(0, r.length - t.length));
            var l = new RegExp(t + t, "g");
            return (
                (r = r.replace(l, t)),
                Kekule.IO.Mdl3kValueUtils.isValueList(r) && (r = Kekule.IO.Mdl3kValueUtils.splitValueList(r)),
                r
            );
        },
        quoteValue: function (e) {
            var t = Kekule.IO.Mdl3kValueUtils.STR_QUOTE,
                r = "" + e,
                l = new RegExp(t, "g");
            return (r = r.replace(l, t + t)).indexOf(Kekule.IO.Mdl3kValueUtils.SEPARATOR) >= 0 && (r = t + r + t), r;
        },
        splitValues: function (e) {
            for (var t = [], r = Kekule.IO.Mdl3kValueUtils.split(e), l = 0, a = r.length; l < a; ++l) {
                var n = Kekule.IO.Mdl3kValueUtils.splitKeyValue(r[l]);
                n.value && (n.value = Kekule.IO.Mdl3kValueUtils.unquoteValue(n.value)), t.push(n);
            }
            return t;
        },
        mergeValues: function (e) {
            for (var t, r = 0, l = e.length; r < l; ++r) {
                var a,
                    n,
                    i,
                    o = e[r];
                "object" != typeof o || Kekule.ArrayUtils.isArray(o) ? (n = o) : ((a = o.key), (n = o.value)),
                    (i = Kekule.ArrayUtils.isArray(n)
                        ? Kekule.IO.Mdl3kValueUtils.mergeValueList(n)
                        : Kekule.IO.Mdl3kValueUtils.quoteValue(n)),
                    a && (i = Kekule.IO.Mdl3kValueUtils.mergeKeyValue(i, a)),
                    (t = Kekule.IO.Mdl3kValueUtils.appendToken(t, i));
            }
            return t;
        },
        appendToken: function (e, t, r) {
            var l = r || Kekule.IO.Mdl3kValueUtils.SEPARATOR,
                a = e || "";
            return (
                a && a.substr(a.length - l.length, l.length) != l
                    ? (a += Kekule.IO.Mdl3kValueUtils.SEPARATOR + t)
                    : (a = t),
                a
            );
        },
    }),
    (Kekule.IO.Mdl3kTextBuffer = Class.create(Kekule.TextLinesBuffer, {
        CLASS_NAME: "Kekule.Mdl3kTextBuffer",
        LEADING_TAG: "M  V30 ",
        LINE_CONTI_MARK: "-",
        MAX_COL_WIDTH: 80,
        initialize: function (e) {
            this.tryApplySuper("initialize", [e]);
        },
        isStartWithLeadingTag: function (e) {
            return e.substr(0, this.LEADING_TAG.length) == this.LEADING_TAG;
        },
        isEndWithContinueMark: function (e) {
            var t = e.trim();
            return t.substr(t.length - this.LINE_CONTI_MARK.length) == this.LINE_CONTI_MARK;
        },
        getLineWithout3kTag: function (e) {
            if (!e) return e;
            var t = this.LEADING_TAG.length;
            return e.substr(0, t) == this.LEADING_TAG ? e.substr(t) : e;
        },
        getLineAtEx: function (e) {
            var t = this.getLineAt(e),
                r = 1;
            if (t && this.isEndWithContinueMark(t) && this.isStartWithLeadingTag(this.getLines()[e])) {
                var l = t.lastIndexOf(this.LINE_CONTI_MARK);
                t = t.substr(0, l);
                var a = this.getLineAtEx(e + 1);
                (t += a.line), (r += a.lineCount);
            }
            return { line: t, lineCount: r };
        },
        getLineAt: function (e) {
            var t = this.tryApplySuper("getLineAt", [e]);
            return this.getLineWithout3kTag(t);
        },
        readLine: function () {
            var e = this.getLineAtEx(this.getCurrLineNo());
            return this.incCurrLineNo(e.lineCount), e.line || "";
        },
        writeLine: function (e, t) {
            if (t) return this.tryApplySuper("writeLine", [e]);
            var r,
                l = e;
            if ((this.isStartWithLeadingTag(e) || (l = this.LEADING_TAG + l), l.length > this.MAX_COL_WIDTH)) {
                var a = this.LINE_CONTI_MARK,
                    n = (Kekule.IO.Mdl3kValueUtils.SEPARATOR, this.MAX_COL_WIDTH - a.length);
                (r = l.substr(n)), (l = l.substr(0, n)), (l += a);
            }
            var i = this.tryApplySuper("writeLine", [l]);
            return r && (i = this.writeLine(r, t)), i;
        },
        writeLines: function (e, t) {
            for (var r = 0, l = e.length; r < l; ++r) this.writeLine(e[r], t);
        },
        getBlockBuffer: function (e, t) {
            for (
                var r,
                    l = Kekule.IO.Mdl3kUtils.get3kBlockStartTag(e),
                    a = Kekule.IO.Mdl3kUtils.get3kBlockEndTag(e),
                    n = this.getCurrLineNo(),
                    i = this.readLine().trim();
                i != l && !this.eof();

            )
                i = this.readLine().trim();
            if (this.eof()) r = null;
            else {
                var o = this.getCurrLineNo(),
                    u = this.getCurrLineNo();
                for (i = this.readLine().trim(); i != a && !this.eof(); )
                    (u = this.getCurrLineNo()), (i = this.readLine().trim());
                if (i == a) var s = this.getLines().slice(o, u);
                else s = this.getLines().slice(o);
                r = new Kekule.IO.Mdl3kTextBuffer(s);
            }
            return t && this.setCurrLineNo(n), r;
        },
    })),
    (Kekule.IO.Mdl3kBlockReader = Class.create(Kekule.IO.MdlBlockReader, {
        CLASS_NAME: "Kekule.IO.Mdl3kBlockReader",
        createTextBuffer: function () {
            return new Kekule.IO.Mdl3kTextBuffer();
        },
        doReadBlock: function (e, t) {
            var r,
                l = !(e instanceof Kekule.IO.Mdl3kTextBuffer);
            l ? (r = new Kekule.IO.Mdl3kTextBuffer()).setLines(e.getUnreadLines()) : (r = e);
            var a = r.getCurrLineNo(),
                n = this.doRead3kBlock(r, t),
                i = r.getCurrLineNo();
            if (l) {
                var o = i - a;
                e.incCurrLineNo(o);
            }
            return n;
        },
        doRead3kBlock: function (e, t) {},
    })),
    (Kekule.IO.Mdl3kBlockWriter = Class.create(Kekule.IO.MdlBlockWriter, {
        CLASS_NAME: "Kekule.IO.Mdl3kBlockWriter",
        createTextBuffer: function () {
            return new Kekule.IO.Mdl3kTextBuffer();
        },
        writeStartTag: function (e, t) {
            t.writeLine(Kekule.IO.Mdl3kUtils.get3kBlockStartTag(e));
        },
        writeEndTag: function (e, t) {
            t.writeLine(Kekule.IO.Mdl3kUtils.get3kBlockEndTag(e));
        },
        doWriteBlock: function (e, t) {
            var r,
                l = !(t instanceof Kekule.IO.Mdl3kTextBuffer);
            l ? ((r = new Kekule.IO.Mdl3kTextBuffer()).setLines(t.getUnreadLines()), r.reset()) : (r = t);
            var a = this.doWrite3kBlock(e, r);
            return l && t.appendLines(l.getLines()), a;
        },
        doWrite3kBlock: function (e, t) {},
    })),
    (Kekule.IO.Mdl3kCTabReader = Class.create(Kekule.IO.Mdl3kBlockReader, {
        CLASS_NAME: "Kekule.IO.Mdl3kCTabReader",
        doRead3kBlock: function (e, t) {
            var r = e.getBlockBuffer("CTAB");
            return r || (r = e).reset(), this.analysisCTab(r);
        },
        analysisCTab: function (e) {
            var t = {},
                r = e.readLine(),
                l = this.analysisCountLine(r);
            if (!l) return null;
            var a,
                n,
                i = [],
                o = e.getBlockBuffer("ATOM");
            if (!o) return Kekule.raise(Kekule.$L("ErrorMsg.MDL3000_ATOMBLOCK_NOT_FOUND")), null;
            a = this.analysisAtomBlock(o, i);
            var u,
                s = e.getBlockBuffer("BOND");
            s && (n = this.analysisBondBlock(s, i));
            var d = e.getBlockBuffer("SGROUP");
            return (
                d && (u = this.analysisSGroupBlock(d, i)),
                (t.countInfo = l),
                (t.atomInfos = a),
                (t.atomIndexMap = i),
                n && (t.bondInfos = n),
                u && (t.sgInfos = u),
                t
            );
        },
        analysisCountLine: function (e) {
            var t = {},
                r = Kekule.IO.Mdl3kValueUtils.splitValues(e);
            if ("COUNTS" == r.shift().value) {
                var l = r.shift().value;
                return (
                    (t.atomCount = parseInt(l, 10)),
                    (l = r.shift().value),
                    (t.bondCount = parseInt(l, 10)),
                    (l = r.shift().value),
                    (t.sgroupCount = parseInt(l, 10)),
                    (l = r.shift().value),
                    (t.isChiral = 0 != parseInt(l, 10)),
                    t
                );
            }
            Kekule.raise(Kekule.$L("ErrorMsg.MALFORMED_MDL3000_COUNTLINE"));
        },
        analysisAtomBlock: function (e, t) {
            for (var r = Kekule.CoordMode.COORD2D, l = []; !e.eof(); ) {
                var a = e.readLine(),
                    n = this.analysisAtomLine(a),
                    i = l.push(n) - 1;
                (t[n.index] = i), n.z && (r = Kekule.CoordMode.COORD3D);
            }
            return (l.coordMode = r), (l.isCoord3D = r == Kekule.CoordMode.COORD3D), l;
        },
        analysisAtomLine: function (e, t) {
            var r = {},
                l = Kekule.IO.Mdl3kValueUtils.splitValues(e);
            r.index = parseInt(l.shift().value, 10);
            var a = l.shift().value.trim();
            if (Kekule.IO.Mdl3kUtils.isAtomList(a)) {
                var n = Kekule.IO.Mdl3kUtils.analysisAtomList(a);
                n && ((r.atomListInfo = n), (r.symbol = "L"));
            } else r.symbol = a;
            (r.x = parseFloat(l.shift().value)),
                (r.y = parseFloat(l.shift().value)),
                (r.z = parseFloat(l.shift().value)),
                l.shift();
            for (var i = 0, o = l.length; i < o; ++i) {
                var u = l[i],
                    s = u.key,
                    d = u.value;
                switch (s) {
                    case "CHG":
                        (m = parseInt(d, 10)) && (r.charge = m);
                        break;
                    case "RAD":
                        (m = parseInt(d, 10)) && (r.radical = m);
                        break;
                    case "CFG":
                        (m = parseInt(d, 10)) && (r.parity = m);
                        break;
                    case "MASS":
                        r.massNumber = parseFloat(d);
                        break;
                    case "VAL":
                        break;
                    case "HCOUNT":
                        (m = parseInt(d, 10)) && (r.hydrongenCount = -1 == m ? 0 : m - 1);
                        break;
                    case "RGROUPS":
                        var m;
                        (m = parseInt(d, 10)) && (r.rgroupCount = m);
                }
            }
            return r;
        },
        analysisBondBlock: function (e, t) {
            for (var r = []; !e.eof(); ) {
                var l = e.readLine(),
                    a = this.analysisBondLine(l, t);
                r[a.index] = a;
            }
            return r;
        },
        analysisBondLine: function (e, t) {
            var r = {},
                l = Kekule.IO.Mdl3kValueUtils.splitValues(e);
            r.index = parseInt(l.shift().value, 10);
            var a = l.shift().value;
            (r.order = Kekule.IO.MdlUtils.bondTypeToKekuleOrder(parseInt(a, 10))),
                (r.atomIndex1 = t[parseInt(l.shift().value, 10)]),
                (r.atomIndex2 = t[parseInt(l.shift().value, 10)]);
            for (var n = 0, i = l.length; n < i; ++n) {
                var o = l[n].key,
                    u = l[n].value;
                switch (o) {
                    case "CFG":
                        var s = parseInt(u, 10);
                        r.stereo = Kekule.IO.Mdl3kUtils.bondCfgToKekule(s);
                        break;
                    case "ENDPTS":
                        if (Kekule.ArrayUtils.isArray(u)) {
                            r.endAtomIndexes = [];
                            for (var d = 0, m = u.length; d < m; ++d) r.endAtomIndexes.push(t[parseInt(u[d], 10)]);
                        } else r.endAtomIndexes = [t[parseInt(u, 10)]];
                }
            }
            return r;
        },
        analysisSGroupBlock: function (e, t) {
            var r = [],
                l = null,
                a = e.getCurrLineNo(),
                n = e.readLine();
            for (
                "DEFAULT" == Kekule.IO.Mdl3kValueUtils.splitValues(n).shift().value
                    ? (l = this.fetchSGroupOptionalValues(n, t))
                    : e.setCurrLineNo(a);
                !e.eof();

            ) {
                n = e.readLine();
                var i = this.analysisSGroupLine(n, t, l);
                r[i.index] = i;
            }
            return r;
        },
        analysisSGroupLine: function (e, t, r) {
            var l = {},
                a = Kekule.IO.Mdl3kValueUtils.splitValues(e);
            (l.index = parseInt(a.shift().value, 10)),
                (l.sgType = a.shift().value.trim()),
                (l.extIndex = parseInt(a.shift().value, 10));
            var n = this.fetchSGroupOptionalValues(a, t);
            return r && (n = Object.extend(r, n)), (l = Object.extend(l, n));
        },
        fetchSGroupOptionalValues: function (e, t) {
            for (var r = {}, l = 0, a = e.length; l < a; ++l) {
                var n = e[l].key,
                    i = e[l].value;
                switch (n) {
                    case "ATOMS":
                        r.atomIndexes = [];
                        for (var o = 0, u = i.length; o < u; o++) r.atomIndexes.push(t[i[o]]);
                        break;
                    case "XBONDS":
                        r.crossBondIndexes = [].concat(i);
                        break;
                    case "SUBTYPE":
                        r.subType = i;
                        break;
                    case "LABEL":
                        r.label = i;
                        break;
                    case "CSTATE":
                        r.bondVectors || (r.bondVectors = []);
                        var s = parseInt(i.shift(), 10),
                            d = parseFloat(i.shift()) || 0,
                            m = parseFloat(i.shift()) || 0,
                            c = parseFloat(i.shift()) || 0;
                        r.bondVectors[s] = { bondIndex: s, x: d, y: m, z: c };
                        break;
                    case "CLASS":
                        r.sgClass = i;
                }
            }
            return r;
        },
    })),
    (Kekule.IO.Mdl3kCTabWriter = Class.create(Kekule.IO.Mdl3kBlockWriter, {
        CLASS_NAME: "Kekule.IO.Mdl3kCTabWriter",
        initialize: function (e) {
            this.tryApplySuper("initialize"), this.setCoordMode(e || Kekule.CoordMode.UNKNOWN);
        },
        initProperties: function () {
            this.defineProp("coordMode", { dataType: DataType.INT, deaultValue: Kekule.CoordMode.UNKNOWN });
        },
        doWrite3kBlock: function (e, t) {
            return Kekule.IO.MdlUtils.assertIlegalForCtabOutput(e), this.outputCtab(e, t);
        },
        outputCtab: function (e, t) {
            var r = Kekule.IO.MdlStructureUtils.getMoleculeCtabStructureInfo(e);
            this.writeStartTag("CTAB", t),
                this.getCoordMode() != Kekule.CoordMode.UNKNOWN && (r.coordMode = this.getCoordMode()),
                t.writeLine(this.generateCountLine(r)),
                this.outputAtomBlock(e, r, t),
                this.outputBondBlock(e, r, t),
                this.outputSgroupBlock(e, r, t),
                this.writeEndTag("CTAB", t);
        },
        generateCompatibilityCountLine: function (e) {
            return Kekule.IO.MdlStructureUtils.generateClassicStyleCountLine(e, Kekule.IO.MdlVersion.V3000);
        },
        generateCountLine: function (e) {
            var t = ["COUNTS"];
            return (
                t.push(e.atoms.length),
                t.push(e.bonds.length),
                t.push(e.subGroups.length),
                t.push(0),
                t.push(0),
                Kekule.IO.Mdl3kValueUtils.mergeValues(t)
            );
        },
        outputAtomBlock: function (e, t, r) {
            this.writeStartTag("ATOM", r);
            for (var l = 0, a = t.atoms.length; l < a; ++l) {
                var n = t.atoms[l],
                    i = this.generateAtomLine(l, t.coordMode, n);
                r.writeLine(i);
            }
            this.writeEndTag("ATOM", r);
        },
        generateAtomLine: function (e, t, r) {
            var l = Kekule.IO.Mdl3kUtils.coordToStr,
                a = [e + 1, Kekule.IO.MdlStructureUtils.getAtomTypeStr(r)];
            if (t == Kekule.CoordMode.COORD2D) {
                var n = r.getAbsCoord2D();
                a = a.concat([l(n.x), l(n.y), l(0)]);
            } else {
                n = r.getAbsCoord3D();
                a = a.concat([l(n.x), l(n.y), l(n.z)]);
            }
            return (
                a.push(0),
                r.getCharge && r.getCharge() && a.push({ key: "CHG", value: r.getCharge() }),
                r.getRadical && r.getRadical() && a.push({ key: "RAD", value: r.getRadical() }),
                r.getParity && r.getParity() && a.push({ key: "CFG", value: r.getParity() }),
                r.getMassNumber && r.getMassNumber() && a.push({ key: "MASS", value: r.getMassNumber() }),
                r.getExplicitHydrogenCount &&
                    !Kekule.ObjUtils.isUnset(r.getExplicitHydrogenCount()) &&
                    a.push({ key: "HCOUNT", value: r.getExplicitHydrogenCount() + 1 }),
                Kekule.IO.Mdl3kValueUtils.mergeValues(a)
            );
        },
        outputBondBlock: function (e, t, r) {
            if (!(t.bonds.length <= 0)) {
                this.writeStartTag("BOND", r);
                for (var l = 0, a = t.bonds.length; l < a; ++l) {
                    var n = t.bonds[l],
                        i = this.generateBondLine(l, n, t.atoms);
                    r.writeLine(i);
                }
                this.writeEndTag("BOND", r);
            }
        },
        generateBondLine: function (e, t, r) {
            var l = [
                    e + 1,
                    Kekule.IO.MdlUtils.kekuleBondOrderToMdlType(
                        t.getBondOrder ? t.getBondOrder() : Kekule.BondOrder.UNSET
                    ),
                ],
                a = t.getStereo && t.getStereo() ? Kekule.IO.Mdl3kUtils.bondStereoToMdlCfg(t.getStereo(), !0) : {},
                n = [],
                i = [],
                o = Kekule.IO.MdlStructureUtils.splitConnectedNodes(t),
                u = r.indexOf(o.primaryNodes[0]) + 1,
                s = r.indexOf(o.primaryNodes[1]) + 1;
            if (((n = a.inverted ? [s, u] : [u, s]), o.remainNodes && o.remainNodes.length))
                for (var d = 0, m = o.remainNodes.length; d < m; ++d) i.push(r.indexOf(o.remainNodes[d]) + 1);
            return (
                (l = l.concat(n)),
                a && a.cfg && l.push({ key: "CFG", value: a.cfg }),
                i.length > 0 && (l.push({ key: "ENDPTS", value: i }), l.push({ key: "ATTACH", value: "ALL" })),
                Kekule.IO.Mdl3kValueUtils.mergeValues(l)
            );
        },
        outputSgroupBlock: function (e, t, r) {
            if (!(t.subGroups.length <= 0)) {
                this.writeStartTag("SGROUP", r);
                for (var l = 0, a = t.subGroups.length; l < a; ++l) {
                    var n = this.generateSgroupLine(l, t.subGroups[l], t);
                    r.writeLine(n);
                }
                this.writeEndTag("SGROUP", r);
            }
        },
        generateSgroupLine: function (e, t, r) {
            for (
                var l = r.atoms,
                    a = r.bonds,
                    n = [e + 1, "SUP", e + 1],
                    i = [],
                    o = 0,
                    u = (g = t.getLeafNodes()).length;
                o < u;
                ++o
            ) {
                (e = l.indexOf(g[o])) >= 0 && i.push(e + 1);
            }
            (i = i.sort()), n.push({ key: "ATOMS", value: i });
            var s =
                (t.getAbbr && t.getAbbr()) || (t.getFormulaText && t.getFormulaText()) || (t.getName && t.getName());
            s && n.push({ key: "LABEL", value: s });
            var d = t.getCrossConnectors(),
                m = [],
                c = [],
                k = Kekule.IO.Mdl3kUtils.coordToStr;
            for (o = 0, u = d.length; o < u; ++o) {
                if ((e = a.indexOf(d[o])) >= 0) {
                    m.push(e + 1);
                    var g,
                        f = [e + 1],
                        I = {};
                    2 == (g = Kekule.IO.MdlStructureUtils.splitConnectedNodes(d[o]).primaryNodes).length &&
                        (r.coordMode == Kekule.CoordMode.COORD2D
                            ? ((I = Kekule.CoordUtils.substract(g[0].getAbsCoord2D(), g[1].getAbsCoord2D())),
                              (f = f.concat([k(I.x), k(I.y), 0])))
                            : ((I = Kekule.CoordUtils.substract(g[0].getAbsCoord3D(), g[1].getAbsCoord3D())),
                              (f = f.concat([k(I.x), k(I.y), k(I.z)])))),
                        c.push(f);
                }
            }
            (m = m.sort()), n.push({ key: "XBONDS", value: m });
            for (o = 0, u = c.length; o < u; ++o) n.push({ key: "CSTATE", value: c[o] });
            return Kekule.IO.Mdl3kValueUtils.mergeValues(n);
        },
    })),
    Kekule.globalOptions.add("IO.mdl", { mdlVersion: Kekule.IO.MdlVersion.V2000, coordMode: Kekule.CoordMode.UNKNOWN }),
    (Kekule.IO.MdlStructureFragmentReader = Class.create(Kekule.IO.MdlBlockReader, {
        CLASS_NAME: "Kekule.IO.MdlStructureFragmentReader",
        initialize: function (e) {
            this.tryApplySuper("initialize"), this.setCoordMode(e || Kekule.CoordMode.UNKNOWN);
        },
        initProperties: function () {
            this.defineProp("coordMode", { dataType: DataType.INT, defaultValue: Kekule.CoordMode.UNKNOWN });
        },
        createFragment: function (e) {},
        createCtabReader: function (e) {
            return e == Kekule.IO.MdlVersion.V3000 ? new Kekule.IO.Mdl3kCTabReader() : new Kekule.IO.Mdl2kCTabReader();
        },
        getCtabVersion: function (e) {
            var t = e.getCurrLineNo(),
                r = e.readLine();
            e.setCurrLineNo(t);
            var l = r.substr(33, 6).trim();
            return "V3000" == l ? Kekule.IO.MdlVersion.V3000 : Kekule.IO.MdlVersion.V2000;
        },
        createStructureFromJson: function (e, t) {
            var r = this.createFragment();
            return r && Kekule.IO.MdlStructureUtils.fillFragment(r, e, this.getCoordMode()), r;
        },
        doReadBlock: function (e, t) {
            var r = this.getCtabVersion(e);
            if (!r) return null;
            var l = this.createCtabReader(r).doReadBlock(e, t);
            return (
                l.atomInfos.coordMode && (this._forceCoordMode = l.atomInfos.coordMode),
                this.createStructureFromJson(l, t)
            );
        },
    })),
    (Kekule.IO.MdlStructureFragmentWriter = Class.create(Kekule.IO.MdlBlockWriter, {
        CLASS_NAME: "Kekule.IO.MdlStructureFragmentWriter",
        initialize: function (e, t) {
            this.tryApplySuper("initialize"),
                this.setMdlVersion(e || Kekule.IO.MdlVersion.V2000),
                this.setCoordMode(t || Kekule.CoordMode.UNKNOWN);
        },
        initProperties: function () {
            this.defineProp("mdlVersion", { dataType: DataType.INT, defaultValue: Kekule.IO.MdlVersion.V2000 }),
                this.defineProp("coordMode", { dataType: DataType.INT, defaultValue: Kekule.CoordMode.UNKNOWN });
        },
        createCtabWriter: function (e) {
            return e == Kekule.IO.MdlVersion.V3000
                ? new Kekule.IO.Mdl3kCTabWriter(this.getCoordMode())
                : new Kekule.IO.Mdl2kCTabWriter(this.getCoordMode());
        },
        doWriteBlock: function (e, t) {
            var r = this.createCtabWriter(this.getMdlVersion()).writeBlock(e);
            t.writeText(r);
        },
    })),
    (Kekule.IO.Mdl3kMoleculeCTabReader = Class.create(Kekule.IO.MdlStructureFragmentReader, {
        CLASS_NAME: "Kekule.IO.Mdl3kMoleculeCTabReader",
        createFragment: function (e) {
            return new Kekule.Molecule();
        },
        doReadBlock: function (e, t) {
            var r = this.createCtabReader(Kekule.IO.MdlVersion.V3000).doReadBlock(e, t);
            return this.createStructureFromJson(r, t);
        },
    })),
    (Kekule.IO.Mdl3kMoleculeCTabWriter = Class.create(Kekule.IO.MdlStructureFragmentWriter, {
        CLASS_NAME: "Kekule.IO.Mdl3kMoleculeCTabWriter",
        initialize: function (e) {
            this.tryApplySuper("initialize", [Kekule.IO.MdlVersion.V3000, e]);
        },
        doWriteBlock: function (e, t) {
            var r = new Kekule.IO.Mdl3kCTabWriter(this.getCoordMode()).writeBlock(e);
            t.writeText(r);
        },
    })),
    (Kekule.IO.MdlMoleculeReader = Class.create(Kekule.IO.MdlStructureFragmentReader, {
        CLASS_NAME: "Kekule.IO.MdlMoleculeReader",
        createFragment: function (e) {
            return new Kekule.Molecule();
        },
        readHeaderInfo: function (e, t) {
            var r = {},
                l = e.readLine();
            l && (r.name = l);
            var a = e.readLine(),
                n = this.readInfoLine(a);
            n && (r = Object.extend(r, n));
            var i = e.readLine();
            return i && (r.comment = i), r;
        },
        readInfoLine: function (e) {
            var t = {};
            if (e.trim()) {
                var r = e.substr(0, 2).trim();
                r && (t.userAbbr = r),
                    (r = e.substr(2, 8).trim()) && (t.programName = r),
                    (r = e.substr(10, 10)).trim() && (t.date = Kekule.IO.MdlUtils.analysisMdlDateTimeStr(r, !1)),
                    (r = e.substr(20, 2)),
                    (t.coordMode =
                        "3D" == r
                            ? Kekule.CoordMode.COORD3D
                            : "2D" == r
                            ? Kekule.CoordMode.COORD2D
                            : Kekule.CoordMode.UNKNOWN);
            }
            return t;
        },
        doReadBlock: function (e, t) {
            var r = this.readHeaderInfo(e, t);
            r && void 0 !== r.coordMode && this.setCoordMode(r.coordMode);
            var l = this.tryApplySuper("doReadBlock", [e, t]);
            (l &&
                r &&
                (r.name && l.setName(r.name),
                r.userAbbr && l.setInfoValue("author", r.userAbbr),
                r.programName && l.setInfoValue("generator", r.programName),
                r.date && l.setInfoValue("date", r.date),
                r.comment && l.setInfoValue("comment", r.comment)),
            e.eof()) ||
                ("M  END" === e.getCurrLine().trim().toUpperCase() && e.readLine());
            return l;
        },
    })),
    (Kekule.IO.MdlMoleculeWriter = Class.create(Kekule.IO.MdlStructureFragmentWriter, {
        CLASS_NAME: "Kekule.IO.MdlMoleculeWriter",
        writeHeaderInfo: function (e, t) {
            t.writeLine(e.getName() || Kekule.$L("Texts.UNNAMED") || "");
            var r = this.generateInfoLine(e);
            t.writeLine(r);
            var l = e.getInfoValue("comment");
            t.writeLine(l || "");
        },
        generateInfoLine: function (e) {
            var t = "",
                r = e.getInfoValue("author");
            t += r ? r.toString().substr(0, 2).rpad(2) : "  ";
            var l = e.getInfoValue("generator");
            t += l ? l.toString().substr(0, 8).rpad(8) : Kekule.LIBNAME_CORE.rpad(8);
            var a = e.getInfoValue("date") || new Date();
            return (
                (t += Kekule.IO.MdlUtils.generateMdlDateTimeStr(a, !1)),
                (t += this.getCoordMode() == Kekule.CoordMode.COORD3D ? "3D" : "2D")
            );
        },
        getMolecule: function (e) {
            return Kekule.ChemStructureUtils.getTotalStructFragment(e);
        },
        doWriteBlock: function (e, t) {
            var r = this.getMolecule(e);
            if (r) {
                var l = Kekule.IO.MdlStructureUtils.getMoleculeCtabStructureInfo(r);
                this.setCoordMode(l.coordMode),
                    this.writeHeaderInfo(r, t),
                    this.getMdlVersion() == Kekule.IO.MdlVersion.V3000 &&
                        t.writeLine(Kekule.IO.MdlStructureUtils.generateClassicStyleCountLine(l, this.getMdlVersion())),
                    this.tryApplySuper("doWriteBlock", [r, t]),
                    this.getMdlVersion() == Kekule.IO.MdlVersion.V3000 && t.writeLine("M  END");
            }
        },
    })),
    (Kekule.IO.MdlStructDataReader = Class.create(Kekule.IO.MdlBlockReader, {
        CLASS_NAME: "Kekule.IO.MdlStructDataReader",
        DATA_HEAD_PREFIX: Kekule.IO.MDL.SD_DATA_HEAD_PREFIX,
        DATA_DBFIELD_PATTERN: /\bDT(\d+)\b/,
        DATA_KEY_NAME_PATTERN: /\<(.+)\>/,
        MOL_DELIMITER: Kekule.IO.MDL.MOL_DELIMITER,
        doReadBlock: function (e, t) {
            var r = new Kekule.IO.MdlMoleculeReader();
            try {
                for (var l, a, n, i = []; !e.eof(); ) {
                    try {
                        n = r.doReadBlock(e, null);
                    } catch (e) {
                        n = null;
                    }
                    if (!n) break;
                    for (i.push(n), l = null, a = null; !e.eof(); ) {
                        var o = this.analysisDataLine(e.readLine());
                        if (o) {
                            var u = o.lineType;
                            if ("dataheader" === u) l = o.key;
                            else if ("datavalue" === u) l && ((a = o.value), n.setInfoValue(l, a));
                            else if ("moldelimiter" === u) break;
                        }
                    }
                }
                if (i.length > 1) {
                    for (var s = new Kekule.ChemObjList(), d = 0, m = i.length; d < m; ++d) s.append(i[d]);
                    return s;
                }
                return i[0];
            } finally {
                r.finalize();
            }
        },
        analysisDataLine: function (e) {
            var t,
                r = e.trim();
            return r.startsWith(this.DATA_HEAD_PREFIX)
                ? ("dataheader", (t = this.getDataHeaderKey(e)) ? { lineType: "dataheader", key: t } : null)
                : r.startsWith(this.MOL_DELIMITER)
                ? { lineType: "moldelimiter" }
                : r
                ? { lineType: "datavalue", value: e }
                : null;
        },
        getDataHeaderKey: function (e) {
            var t = this.DATA_KEY_NAME_PATTERN.exec(e);
            return t && t.length > 1 ? t[1] : (t = this.DATA_DBFIELD_PATTERN.exec(e)) && t.length > 1 ? t[1] : e;
        },
        doReadDataBlock: function (e, t) {
            e.readLine();
        },
    })),
    (Kekule.IO.MdlStructDataWriter = Class.create(Kekule.IO.MdlBlockWriter, {
        CLASS_NAME: "Kekule.IO.MdlStructDataWriter",
        IGNORED_INFO_FIELDS: ["generator", "author", "date", "comment"],
        initialize: function (e, t) {
            this.tryApplySuper("initialize"),
                this.setMdlVersion(e || Kekule.IO.MdlVersion.V2000),
                this.setCoordMode(t || Kekule.CoordMode.UNKNOWN);
        },
        initProperties: function () {
            this.defineProp("mdlVersion", { dataType: DataType.INT, defaultValue: Kekule.IO.MdlVersion.V2000 }),
                this.defineProp("coordMode", { dataType: DataType.INT, defaultValue: Kekule.CoordMode.UNKNOWN });
        },
        doWriteBlock: function (e, t) {
            var r = this.getChildMols(e),
                l = new Kekule.IO.MdlMoleculeWriter();
            l.setMdlVersion(this.getMdlVersion()), l.setCoordMode(this.getCoordMode());
            for (var a = 0, n = r.length; a < n; ++a) {
                var i = r[a];
                try {
                    var o = l.writeBlock(i);
                    t.writeText(o);
                    var u = this.getMolData(i);
                    this.doWriteDataBlock(u, t), t.writeLine(Kekule.IO.MDL.MOL_DELIMITER);
                } catch (e) {}
            }
        },
        doWriteDataBlock: function (e, t) {
            for (var r = Kekule.ObjUtils.getOwnedFieldNames(e), l = 0, a = r.length; l < a; ++l) {
                var n = r[l];
                if (this.IGNORED_INFO_FIELDS.indexOf(n) < 0) {
                    var i = Kekule.IO.MDL.SD_DATA_HEAD_PREFIX + " <" + n + ">",
                        o = e[n];
                    i && o && (t.writeLine(i), t.writeLine(o), t.writeLine(""));
                }
            }
        },
        getChildMols: function (e) {
            for (
                var t = Kekule.ChemStructureUtils.getChildStructureObjs(e, !0), r = [], l = 0, a = t.length;
                l < a;
                ++l
            ) {
                var n = t[l];
                n instanceof Kekule.StructureFragment && r.push(n);
            }
            return r;
        },
        getMolData: function (e) {
            return e.getInfo ? e.getInfo() || {} : null;
        },
    })),
    (Kekule.IO.MdlBaseReactionReader = Class.create(Kekule.IO.MdlBlockReader, {
        CLASS_NAME: "Kekule.IO.MdlBaseReactionReader",
        readHeaderBlock: function (e, t) {
            var r,
                l = {},
                a = e.readLine().trim();
            return "$RXN" != (r = a.substr(0, 4))
                ? (Kekule.error(Kekule.$L("ErrorMsg.NOT_MDL_RXN_DATA")), null)
                : ((r = a.substr(4).trim()),
                  (l.version = "V3000" == r ? Kekule.IO.MdlVersion.V3000 : Kekule.IO.MdlVersion.V2000),
                  (a = e.readLine().trim()) && (l.name = a),
                  (r = (a = e.readLine()).substr(0, 6).trim()) && (l.userAbbr = r),
                  (r = a.substr(6, 9).trim()) && (l.programName = r),
                  (r = a.substr(15, 10)).trim() && (l.date = Kekule.IO.MdlUtils.analysisMdlDateTimeStr(r, !0)),
                  (a = e.readLine().trim()) && (l.comment = a),
                  l);
        },
        readSubstanceCountLine: function (e) {},
        readMolBlock: function (e) {},
        doReadBlock: function (e, t) {
            for (
                var r = this.readHeaderBlock(e, null),
                    l = this.readSubstanceCountLine(e.readLine()),
                    a = new Kekule.Reaction(),
                    n = 0;
                n < l.reactantCount;
                ++n
            ) {
                (i = this.readMolBlock(e)) && a.appendReactant(i);
            }
            for (n = 0; n < l.productCount; ++n) {
                var i;
                (i = this.readMolBlock(e)) && a.appendProduct(i);
            }
            return (
                a &&
                    r &&
                    (r.name && a.setName(r.name),
                    r.userAbbr && a.setInfoValue("author", r.userAbbr),
                    r.programName && a.setInfoValue("generator", r.programName),
                    r.date && a.setInfoValue("date", r.date),
                    r.comment && a.setInfoValue("comment", r.comment)),
                a
            );
        },
    })),
    (Kekule.IO.Mdl2kReactionReader = Class.create(Kekule.IO.MdlBaseReactionReader, {
        CLASS_NAME: "Kekule.IO.Mdl2kReactionReader",
        readHeaderBlock: function (e, t) {
            var r = this.tryApplySuper("readHeaderBlock", [e, t]);
            return r.version != Kekule.IO.MdlVersion.V2000
                ? (Kekule.error(Kekule.$L("ErrorMsg.NOT_MDL2000_RXN_DATA")), null)
                : r;
        },
        readSubstanceCountLine: function (e) {
            var t = {};
            return (
                (t.reactantCount = parseInt(e.substr(0, 3), 10) || 0),
                (t.productCount = parseInt(e.substr(3, 3), 10) || 0),
                t
            );
        },
        readMolBlock: function (e) {
            for (var t = e.readLine(); "$MOL" !== t && !e.eof(); ) t = e.readLine();
            if (e.eof()) return null;
            var r = [];
            for (t = e.getCurrLine(); "$MOL" !== t && !e.eof(); ) r.push(t), e.incCurrLineNo(), (t = e.getCurrLine());
            return new Kekule.IO.MdlMoleculeReader().readBlock(r, null);
        },
    })),
    (Kekule.IO.Mdl3kReactionReader = Class.create(Kekule.IO.MdlBaseReactionReader, {
        CLASS_NAME: "Kekule.IO.Mdl3kReactionReader",
        createTextBuffer: function () {
            return new Kekule.IO.Mdl3kTextBuffer();
        },
        readHeaderBlock: function (e, t) {
            var r = this.tryApplySuper("readHeaderBlock", [e, t]);
            return r.version != Kekule.IO.MdlVersion.V3000
                ? (Kekule.error(Kekule.$L("ErrorMsg.NOT_MDL3000_RXN_DATA")), null)
                : r;
        },
        readSubstanceCountLine: function (e) {
            var t = {},
                r = Kekule.IO.Mdl3kValueUtils.splitValues(e);
            return "COUNTS" != r.shift().value.trim()
                ? (Kekule.error(Kekule.$L("ErrorMsg.NOT_MDL3000_RXN_COUNTLINE")), null)
                : ((t.reactantCount = parseInt(r.shift().value, 10) || 0),
                  (t.productCount = parseInt(r.shift().value, 10) || 0),
                  t);
        },
        readMolBlock: function (e) {
            if (e.getBlockBuffer) {
                var t = e.getBlockBuffer("CTAB");
                return new Kekule.IO.Mdl3kMoleculeCTabReader().doReadBlock(t);
            }
            return null;
        },
    })),
    (Kekule.IO.MdlReactionReader = Class.create(Kekule.IO.MdlBlockReader, {
        CLASS_NAME: "Kekule.IO.MdlReactionReader",
        doReadBlock: function (e, t) {
            return (
                Kekule.IO.MdlUtils.getRxnMarkVersion(e.getCurrLine()) == Kekule.IO.MdlVersion.V3000
                    ? new Kekule.IO.Mdl3kReactionReader()
                    : new Kekule.IO.Mdl2kReactionReader()
            ).readBlock(e.getUnreadLines(), t);
        },
    })),
    (Kekule.IO.MdlReactionWriter = Class.create(Kekule.IO.MdlBlockWriter, {
        CLASS_NAME: "Kekule.IO.MdlReactionWriter",
        initialize: function (e, t) {
            this.tryApplySuper("initialize"),
                this.setMdlVersion(e || Kekule.IO.MdlVersion.V2000),
                this.setCoordMode(t || Kekule.CoordMode.UNKNOWN);
        },
        initProperties: function () {
            this.defineProp("mdlVersion", { dataType: DataType.INT, defaultValue: Kekule.IO.MdlVersion.V2000 }),
                this.defineProp("coordMode", { dataType: DataType.INT, defaultValue: Kekule.CoordMode.UNKNOWN });
        },
        writeHeaderBlock: function (e, t) {
            var r;
            (r = "$RXN" + (this.getMdlVersion() == Kekule.IO.MdlVersion.V3000 ? " " + Kekule.IO.MDL.VER3000 : "")),
                t.writeLine(r),
                t.writeLine(e.getName() || ""),
                (r = (e.getInfoValue("author") || "").substr(0, 6).rpad(6)),
                (r += (e.getInfoValue("generator") || "").substr(0, 9).rpad(9));
            var l = e.getInfoValue("date") || new Date();
            (r += Kekule.IO.MdlUtils.generateMdlDateTimeStr(l, !0)), t.writeLine(r);
            var a = e.getInfoValue("comment") || "";
            t.writeLine(a);
        },
        generateSubstanceCountLine: function (e) {
            return this.getMdlVersion() == Kekule.IO.MdlVersion.V3000
                ? "M  V30 COUNTS " + Kekule.IO.Mdl3kValueUtils.mergeValues([e.getReactantCount(), e.getProductCount()])
                : e.getReactantCount().toString().lpad(3) + e.getProductCount().toString().lpad(3);
        },
        writeMolDelimiterLine: function (e) {
            this.getMdlVersion() == Kekule.IO.MdlVersion.V2000 && e.writeLine("$MOL");
        },
        writeMolBlock: function (e, t) {
            var r = (
                this.getMdlVersion() == Kekule.IO.MdlVersion.V3000
                    ? new Kekule.IO.Mdl3kMoleculeCTabWriter(this.getCoordMode())
                    : new Kekule.IO.MdlMoleculeWriter(this.getMdlVersion(), this.getCoordMode())
            ).writeBlock(e);
            t.writeText(r);
        },
        doWriteBlock: function (e, t) {
            var r = this.getMdlVersion() == Kekule.IO.MdlVersion.V3000;
            this.writeHeaderBlock(e, t);
            var l = this.generateSubstanceCountLine(e);
            t.writeLine(l), r && t.writeLine("M  V30 " + Kekule.IO.Mdl3kUtils.get3kBlockStartTag("REACTANT"));
            for (var a = 0; a < e.getReactantCount(); ++a)
                this.writeMolDelimiterLine(t), this.writeMolBlock(e.getReactantAt(a), t);
            r && t.writeLine("M  V30 " + Kekule.IO.Mdl3kUtils.get3kBlockEndTag("REACTANT")),
                r && t.writeLine("M  V30 " + Kekule.IO.Mdl3kUtils.get3kBlockStartTag("PRODUCT"));
            for (a = 0; a < e.getProductCount(); ++a)
                this.writeMolDelimiterLine(t), this.writeMolBlock(e.getProductAt(a), t);
            r && (t.writeLine("M  V30 " + Kekule.IO.Mdl3kUtils.get3kBlockEndTag("PRODUCT")), t.writeLine("M  END"));
        },
    })),
    (Kekule.IO.BaseMdlReader = Class.create(Kekule.IO.ChemDataReader, {
        CLASS_NAME: "Kekule.IO.BaseMdlReader",
        doReadData: function (e, t, r) {
            return t != Kekule.IO.ChemDataType.TEXT
                ? (Kekule.error(Kekule.$L("ErrorMsg.MDL_INPUT_DATATYPE_NOT_TEXT")), null)
                : this.doReadMdlData(e);
        },
        doReadMdlData: function (e) {
            return null;
        },
    })),
    (Kekule.IO.BaseMdlWriter = Class.create(Kekule.IO.ChemDataWriter, {
        CLASS_NAME: "Kekule.IO.BaseMdlWriter",
        initialize: function (e) {
            this.tryApplySuper("initialize", [e]),
                e || (e = {}),
                this.setMdlVersion(e.mdlVersion || Kekule.globalOptions.IO.mdl.mdlVersion),
                this.setCoordMode(e.coordMode || Kekule.globalOptions.IO.mdl.coordMode);
        },
        initProperties: function () {
            this.defineProp("mdlVersion", { dataType: DataType.INT, defaultValue: Kekule.IO.MdlVersion.V2000 }),
                this.defineProp("coordMode", { dataType: DataType.INT, defaultValue: Kekule.CoordMode.UNKNOWN });
        },
        doWriteData: function (e, t, r) {
            var l = t || Kekule.IO.ChemDataType.TEXT;
            return l != Kekule.IO.ChemDataType.TEXT
                ? (Kekule.error(Kekule.$L("ErrorMsg.MDL_OUTPUT_DATATYPE_NOT_TEXT")), null)
                : this.tryApplySuper("doWriteData", [e, l, r]);
        },
    })),
    (Kekule.IO.MdlMolReader = Class.create(Kekule.IO.BaseMdlReader, {
        CLASS_NAME: "Kekule.IO.MdlMolReader",
        doReadMdlData: function (e) {
            return new Kekule.IO.MdlMoleculeReader().readBlock(e, null);
        },
    })),
    (Kekule.IO.MdlMolWriter = Class.create(Kekule.IO.BaseMdlWriter, {
        CLASS_NAME: "Kekule.IO.MdlMolWriter",
        doWriteData: function (e, t, r) {
            return new Kekule.IO.MdlMoleculeWriter(this.getMdlVersion(), this.getCoordMode()).writeBlock(e);
        },
    })),
    (Kekule.IO.MdlSdReader = Class.create(Kekule.IO.BaseMdlReader, {
        CLASS_NAME: "Kekule.IO.MdlSdReader",
        doReadMdlData: function (e) {
            return new Kekule.IO.MdlStructDataReader().readBlock(e, null);
        },
    })),
    (Kekule.IO.MdlSdWriter = Class.create(Kekule.IO.BaseMdlWriter, {
        CLASS_NAME: "Kekule.IO.MdlSdWriter",
        doWriteData: function (e, t, r) {
            return new Kekule.IO.MdlStructDataWriter(this.getMdlVersion(), this.getCoordMode()).writeBlock(e);
        },
    })),
    (Kekule.IO.MdlRxnReader = Class.create(Kekule.IO.BaseMdlReader, {
        CLASS_NAME: "Kekule.IO.MdlRxnReader",
        doReadMdlData: function (e) {
            return new Kekule.IO.MdlReactionReader().readBlock(e, null);
        },
    })),
    (Kekule.IO.MdlRxnWriter = Class.create(Kekule.IO.BaseMdlWriter, {
        CLASS_NAME: "Kekule.IO.MdlRxnWriter",
        doWriteData: function (e, t, r) {
            return new Kekule.IO.MdlReactionWriter(this.getMdlVersion(), this.getCoordMode()).writeBlock(e);
        },
    })),
    (Kekule.IO.MdlReader = Class.create(Kekule.IO.ChemDataReader, {
        CLASS_NAME: "Kekule.IO.MdlReader",
        doReadData: function (e, t, r) {
            return t != Kekule.IO.ChemDataType.TEXT
                ? (Kekule.error(Kekule.$L("ErrorMsg.MDL_INPUT_DATATYPE_NOT_TEXT")), null)
                : ("$RXN" == e.substr(0, 4)
                      ? new Kekule.IO.MdlReactionReader()
                      : new Kekule.IO.MdlMoleculeReader()
                  ).readBlock(e, null);
        },
    })),
    (Kekule.IO.MdlWriter = Class.create(Kekule.IO.ChemDataWriter, {
        CLASS_NAME: "Kekule.IO.MdlWriter",
        initialize: function (e) {
            this.tryApplySuper("initialize", [e]);
            var t = e || {};
            this.setMdlVersion(t.mdlVersion || Kekule.globalOptions.IO.mdl.mdlVersion),
                this.setCoordMode(t.coordMode || Kekule.globalOptions.IO.mdl.coordMode);
        },
        initProperties: function () {
            this.defineProp("mdlVersion", { dataType: DataType.INT, defaultValue: Kekule.IO.MdlVersion.V2000 }),
                this.defineProp("coordMode", { dataType: DataType.INT, defaultValue: Kekule.CoordMode.UNKNOWN });
        },
        doWriteData: function (e, t, r) {
            var l;
            if (e instanceof Kekule.Reaction) l = new Kekule.IO.MdlRxnWriter(this.getMdlVersion(), this.getCoordMode());
            else {
                if (!(e instanceof Kekule.StructureFragment)) {
                    var a = e && e.getClassName ? e.getClassName() : typeof e;
                    return Kekule.error(Kekule.$L("ErrorMsg.UNABLE_TO_OUTPUT_AS_MDL").format(a)), null;
                }
                l = new Kekule.IO.MdlMolWriter(this.getMdlVersion(), this.getCoordMode());
            }
            if (l) return l.writeData(e);
        },
    })),
    (function () {
        (Kekule.IO.DataFormat.MOL = "mol"),
            (Kekule.IO.DataFormat.RXN = "rxn"),
            (Kekule.IO.DataFormat.SD = "sd"),
            (Kekule.IO.DataFormat.MOL3K = "mol3k"),
            (Kekule.IO.DataFormat.RXN3K = "rxn3k"),
            (Kekule.IO.MimeType.MDL_MOL = "chemical/x-mdl-molfile"),
            (Kekule.IO.MimeType.MDL_RXN = "chemical/x-mdl-rxnfile"),
            (Kekule.IO.MimeType.MDL_SD = "chemical/x-mdl-sdfile"),
            Kekule.IO.DataFormatsManager.register(
                "mol",
                Kekule.IO.MimeType.MDL_MOL,
                "mol",
                Kekule.IO.ChemDataType.TEXT,
                "MDL Mol 2000 format"
            ),
            Kekule.IO.DataFormatsManager.register(
                "rxn",
                Kekule.IO.MimeType.MDL_RXN,
                "rxn",
                Kekule.IO.ChemDataType.TEXT,
                "MDL Reaction 2000 format"
            ),
            Kekule.IO.DataFormatsManager.register(
                "sd",
                Kekule.IO.MimeType.MDL_SD,
                ["sd", "sdf"],
                Kekule.IO.ChemDataType.TEXT,
                "MDL Structure-Data format"
            ),
            Kekule.IO.DataFormatsManager.register(
                "mol3k",
                Kekule.IO.MimeType.MDL_MOL,
                "mol",
                Kekule.IO.ChemDataType.TEXT,
                "MDL Mol 3000 format"
            ),
            Kekule.IO.DataFormatsManager.register(
                "rxn3k",
                Kekule.IO.MimeType.MDL_RXN,
                "rxn",
                Kekule.IO.ChemDataType.TEXT,
                "MDL Reaction 3000 format"
            ),
            Kekule.IO.ChemDataReaderManager.register("MDL-mol", Kekule.IO.MdlMolReader, ["mol", "mol3k"]),
            Kekule.IO.ChemDataReaderManager.register("MDL-rxn", Kekule.IO.MdlRxnReader, ["rxn", "rxn3k"]),
            Kekule.IO.ChemDataReaderManager.register("MDL-general", Kekule.IO.MdlReader, [
                "mol",
                "mol3k",
                "rxn",
                "rxn3k",
            ]),
            Kekule.IO.ChemDataReaderManager.register("MDL-sd", Kekule.IO.MdlSdReader, "sd");
        var e = [
            Kekule.StructureFragment,
            Kekule.ChemObjList,
            Kekule.ChemStructureObjectGroup,
            Kekule.ChemSpaceElement,
            Kekule.ChemSpace,
        ];
        Kekule.IO.ChemDataWriterManager.register("MDL-mol", Kekule.IO.MdlMolWriter, e, "mol"),
            Kekule.IO.ChemDataWriterManager.register("MDL-mol3k", Kekule.IO.MdlMolWriter, e, "mol3k", {
                createOptions: { mdlVersion: Kekule.IO.MdlVersion.V3000 },
            }),
            Kekule.IO.ChemDataWriterManager.register("MDL-rxn", Kekule.IO.MdlRxnWriter, [Kekule.Reaction], "rxn"),
            Kekule.IO.ChemDataWriterManager.register("MDL-rxn3k", Kekule.IO.MdlRxnWriter, [Kekule.Reaction], "rxn3k"),
            Kekule.IO.ChemDataWriterManager.register("MDL-sd", Kekule.IO.MdlSdWriter, e, "sd");
    })(),
    (function () {
        "use strict";
        var e = Kekule.ArrayUtils;
        Kekule.IO.SMILES = {
            ATOM_BRACKET_LEFT: "[",
            ATOM_BRACKET_RIGHT: "]",
            ATOM_WILDCARD: "*",
            ATOM_H: "H",
            ORGAN_SUBSET_ATOMS: ["B", "C", "N", "O", "S", "P", "F", "Cl", "Br", "I"],
            AROMATIC_SUBSET_ATOMS: ["B", "C", "N", "O", "S", "P"],
            BOND_SINGLE: "-",
            BOND_DOUBLE: "=",
            BOND_TRIPLE: "#",
            BOND_QUAD: "$",
            BOND_AROMATIC: ":",
            BOND_FAKE: ".",
            RING_BOND_TWO_DIGIT_NO_PREFIX: "%",
            BRANCH_BRACKET_LEFT: "(",
            BRANCH_BRACKET_RIGHT: ")",
            ROTATION_DIR_CLOCKWISE: "@@",
            ROTATION_DIR_ANTICLOCKWISE: "@",
            DIRECTION_BOND_SYMBOLS: ["/", "\\"],
        };
        var t = Kekule.IO.SMILES;
        (Kekule.IO.SmilesUtils = {
            createGraphDepthSpanningTreesEx: function (t, r) {
                for (
                    var l = function (e) {
                            var t = { vertexes: [], edges: [], longestPath: { vertexes: [], edges: [], length: 0 } },
                                r = e;
                            r.getData("__$visitedEx__") || (t.vertexes.push(r), r.setData("__$visitedEx__", !0));
                            for (var a, n = r.getEdges(), i = 0, o = n.length; i < o; ++i) {
                                var u = n[i],
                                    s = r.getNeighborOnEdge(u);
                                if (!s.getData("__$visitedEx__")) {
                                    t.vertexes.push(s), t.edges.push(u), s.setData("__$visitedEx__", !0);
                                    var d = l(s);
                                    (t.vertexes = t.vertexes.concat(d.vertexes)),
                                        (t.edges = t.edges.concat(d.edges)),
                                        (d.longestPath.length > t.longestPath.length || !t.longestPath.length) &&
                                            ((t.longestPath.vertexes = d.longestPath.vertexes),
                                            (t.longestPath.edges = d.longestPath.edges),
                                            (t.longestPath.length = d.longestPath.length),
                                            (a = u));
                                }
                            }
                            return (
                                a &&
                                    (t.longestPath.edges.unshift(a),
                                    (t.longestPath.length = (t.longestPath.length || 0) + 1)),
                                t.longestPath.vertexes.unshift(r),
                                t
                            );
                        },
                        a = e.clone(t.getVertexes()),
                        n = 0,
                        i = a.length;
                    n < i;
                    ++n
                )
                    a[n].setData("__$visitedEx__", !1);
                for (var o = []; a.length; ) {
                    var u;
                    u = r && a.indexOf(r) >= 0 ? r : a[0];
                    var s = { vertexes: [], edges: [], longestPath: { vertexes: [], edges: [], length: 0 } },
                        d = l(u);
                    (s.vertexes = s.vertexes.concat(d.vertexes)),
                        (s.edges = s.edges.concat(d.edges)),
                        (s.longestPath.length = (s.longestPath.length || 0) + d.longestPath.length),
                        (s.longestPath.vertexes = s.longestPath.vertexes.concat(d.longestPath.vertexes)),
                        (s.longestPath.edges = s.longestPath.edges.concat(d.longestPath.edges)),
                        (a = e.exclude(a, d.vertexes)),
                        o.push(s);
                }
                return o;
            },
        }),
            (Kekule.IO.SmilesMolWriter = Class.create(Kekule.IO.ChemDataWriter, {
                CLASS_NAME: "Kekule.IO.SmilesMolWriter",
                doWriteData: function (e, t, r, l) {
                    var a = this.getMolecule(e);
                    return a ? this.writeStructFragment(a, l) : "";
                },
                getMolecule: function (e) {
                    return Kekule.ChemStructureUtils.getTotalStructFragment(e);
                },
                writeStructFragment: function (r, l) {
                    if (r.hasCtab() && !r.isEmpty()) {
                        var a = r.clone();
                        a.standardize && a.standardize();
                        var n = [],
                            i = [];
                        if (a.getAromaticRings)
                            for (var o = a.getAromaticRings(), u = 0, s = o.length; u < s; ++u) {
                                var d = o[u];
                                e.pushUnique(n, d.nodes), e.pushUnique(i, d.connectors);
                            }
                        var m,
                            c = Kekule.GraphAdaptUtils.ctabToGraph(a.getCtab(), null, {
                                expandSubStructures: !0,
                                ignoreBondedHydrogen: !0,
                            }),
                            k = c.getVertexes(),
                            g = (c.getEdges(), k[k.length - 1]),
                            f = Kekule.IO.SmilesUtils.createGraphDepthSpanningTreesEx(c, g),
                            I = this._prepareStereoBondsInformation(a.getCtab(), l),
                            O = [];
                        for (u = 0, s = f.length; u < s; ++u) {
                            var C,
                                h = f[u],
                                K = h.longestPath,
                                p = K.vertexes[0];
                            (C = this._writeMolVertex(p, null, K.edges, h.edges, O, n, i, { bondStereoDirMap: I }, l)),
                                0 === u ? (m = C) : (m += t.BOND_FAKE + C);
                        }
                        return m;
                    }
                    return "";
                },
                _prepareStereoBondsInformation: function (e, t) {
                    var r = t.ignoreStereoBond;
                    if ((Kekule.ObjUtils.isUnset(r) && (r = t.ignoreStereo || !1), r)) return null;
                    for (var l = 0, a = new Kekule.MapEx(), n = 0, i = e.getConnectorCount(); n < i; ++n) {
                        var o = e.getConnectorAt(n);
                        if (o.getParity && o.getParity()) {
                            ++l;
                            for (
                                var u = Kekule.MolStereoUtils.getStereoBondKeyNeighborConnectors(o),
                                    s = this._getStereoDoubleBondInitialDirectionSymbols(o),
                                    d = [],
                                    m = 0,
                                    c = 0,
                                    k = u.length;
                                c < k;
                                ++c
                            )
                                a.has(u[c]) && ((d[c] = !0), s[c] !== a.get(u[c]) && ++m);
                            if (m < 2)
                                for (c = 0, k = u.length; c < k; ++c)
                                    if (!d[c]) {
                                        var g = 1 === m ? this._getInvertBondDirectionSymbol(s[c]) : s[c];
                                        a.set(u[c], g);
                                    }
                        }
                    }
                    return l ? a : null;
                },
                _writeMolVertex: function (e, r, l, a, n, i, o, u, s) {
                    var d,
                        m,
                        c = e.getData("object"),
                        k = e.getEdges(),
                        g = [],
                        f = [],
                        I = [],
                        O = [],
                        C = s.ignoreStereoBond;
                    Kekule.ObjUtils.isUnset(C) && (C = s.ignoreStereo || !1);
                    for (var h = k.length - 1; h >= 0; --h) {
                        var K = k[h];
                        if (K !== r) {
                            var p = K.getData("object");
                            if (a.indexOf(K) >= 0) {
                                var M = e.getNeighborOnEdge(K),
                                    E = this._writeMolVertex(M, K, l, a, n, i, o, u, s);
                                l.indexOf(K) >= 0 ? ((m = M), (d = E)) : (f.push(M), g.push(E));
                            } else {
                                var T = n.indexOf(K);
                                T < 0 && ((T = n.length), n.push(K)), O.push(e.getNeighborOnEdge(K));
                                var D = this._outputConnectorStr(
                                    p,
                                    K.getVertexes()[0].getData("object"),
                                    K.getVertexes()[1].getData("object"),
                                    i,
                                    o,
                                    u.bondStereoDirMap
                                );
                                (D += (T += 1) < 10 ? T : t.RING_BOND_TWO_DIGIT_NO_PREFIX + T), I.push(D);
                            }
                        }
                    }
                    var A,
                        L = "";
                    if (r) {
                        "", (A = e.getNeighborOnEdge(r).getData("object"));
                        var R = r.getData("object");
                        L += this._outputConnectorStr(
                            R,
                            r.getVertexes()[0].getData("object"),
                            r.getVertexes()[1].getData("object"),
                            i,
                            o,
                            u.bondStereoDirMap
                        );
                    }
                    for (var y = [], S = ((h = 0), O.length); h < S; ++h) y.push(O[h].getData("object"));
                    for (h = 0, S = f.length; h < S; ++h) y.push(f[h].getData("object"));
                    m && y.push(m.getData("object")), (L += this._outputNodeStr(c, i.indexOf(c) >= 0, A, y, s));
                    for (h = 0, S = I.length; h < S; ++h) L += I[h];
                    !d && g.length && (d = g.shift());
                    for (h = 0, S = g.length; h < S; ++h) L += t.BRANCH_BRACKET_LEFT + g[h] + t.BRANCH_BRACKET_RIGHT;
                    return (L += ""), d && (L += d), L;
                },
                _outputNodeStr: function (e, r, l, a, n) {
                    var i, o;
                    e instanceof Kekule.Atom
                        ? ((i = o = e.getSymbol()), r && (i = i.toLowerCase()))
                        : (i = t.ATOM_WILDCARD);
                    var u = n.ignoreStereoAtom;
                    if (
                        (Kekule.ObjUtils.isUnset(u) && (u = n.ignoreStereo || !1),
                        !u && e.getParity && e.getParity() && a && a.length)
                    ) {
                        var s = e.getLinkedHydrogenAtomsWithSingleBond();
                        s && 1 === s.length && a.indexOf(s[0]) < 0 && a.push(s[0]);
                        var d = (e.getHydrogenCount && e.getHydrogenCount(!1)) || 0;
                        if (s.length && d) c = "";
                        else
                            var m = Kekule.MolStereoUtils.calcTetrahedronChiralCenterRotationDirection(
                                    null,
                                    e,
                                    l,
                                    a,
                                    !!d,
                                    !1,
                                    { allowExplicitVerticalHydrogen: !0 }
                                ),
                                c =
                                    m === Kekule.RotationDir.CLOCKWISE
                                        ? t.ROTATION_DIR_CLOCKWISE
                                        : m === Kekule.RotationDir.ANTICLOCKWISE
                                        ? t.ROTATION_DIR_ANTICLOCKWISE
                                        : "";
                        c && (i += c);
                    }
                    var k = this._getNodeHydrogenCount(e, n),
                        g = !0,
                        f = e.getRadical ? Math.round(e.getRadical() || 0) : 0;
                    if (c);
                    else if (f);
                    else if (e instanceof Kekule.Atom)
                        if (k && r && "C" !== o);
                        else if (
                            (n.ignoreExplicitHydrogens || n.ignoreImplicitHydrogens) &&
                            k !== this._getNodeHydrogenCount(e, {})
                        );
                        else {
                            var I = (e.getValence && e.getValence()) || 0,
                                O = Kekule.ValenceUtils.getMaxPossibleValence(e.getAtomicNumber(), e.getCharge()) || 0;
                            if (I)
                                if (I > O && k);
                                else if (e.hasExplicitHydrogens())
                                    (e.getExplicitHydrogenCount() || 0) === (e.getImplicitHydrogenCount() || 0) &&
                                        (g = !1);
                                else
                                    ((e.getValence &&
                                        e.getValence({ ignoreExplicitHydrogens: !0, ignoreBondHydrogens: !0 })) ||
                                        0) < I || (g = !1);
                        }
                    g && ((d = Math.round(k)) > 0 && (i += t.ATOM_H), d > 1 && (i += d));
                    var C = Math.round(e.getCharge());
                    if (C) {
                        var h = C > 0 ? "+" : "-";
                        (C > 1 || C < -1) && (h = Math.abs(C) + h), (i += h);
                    }
                    var K = e.getMassNumber ? e.getMassNumber() : null;
                    K && (i = Math.abs(K) + i);
                    var p = !1;
                    return (
                        g ||
                            C ||
                            K ||
                            c ||
                            f ||
                            (((!r && t.ORGAN_SUBSET_ATOMS.indexOf(o) >= 0) ||
                                (r && t.AROMATIC_SUBSET_ATOMS.indexOf(o) >= 0)) &&
                                (p = !0)),
                        p || (i = t.ATOM_BRACKET_LEFT + i + t.ATOM_BRACKET_RIGHT),
                        i
                    );
                },
                _getNodeHydrogenCount: function (e, t) {
                    var r =
                            (e.getLinkedHydrogenAtomsWithSingleBondCount &&
                                e.getLinkedHydrogenAtomsWithSingleBondCount(!0)) ||
                            0,
                        l = e.getExplicitHydrogenCount && e.getExplicitHydrogenCount();
                    (t.ignoreExplicitHydrogens || (r += l || 0),
                    Kekule.ObjUtils.isUnset(l) && !t.ignoreImplicitHydrogens) &&
                        (r += (e.getImplicitHydrogenCount && e.getImplicitHydrogenCount()) || 0);
                    return r;
                },
                _outputConnectorStr: function (e, r, l, a, n, i) {
                    if (e instanceof Kekule.Bond && e.getBondType() === Kekule.BondType.COVALENT) {
                        if (n.indexOf(e) >= 0) return "";
                        var o = a.indexOf(r) >= 0 && a.indexOf(l) >= 0,
                            u = e.getBondOrder(),
                            s = Kekule.BondOrder,
                            d =
                                u === s.DOUBLE
                                    ? t.BOND_DOUBLE
                                    : u === s.TRIPLE
                                    ? t.BOND_TRIPLE
                                    : u === s.QUAD
                                    ? t.BOND_QUAD
                                    : o
                                    ? t.BOND_SINGLE
                                    : "";
                        return i && i.has(e) && (d += i.get(e)), d;
                    }
                    return t.BOND_FAKE;
                },
                _getStereoDoubleBondInitialDirectionSymbols: function (e) {
                    var r = e.getParity();
                    return r
                        ? r === Kekule.StereoParity.EVEN
                            ? [t.DIRECTION_BOND_SYMBOLS[0], t.DIRECTION_BOND_SYMBOLS[0]]
                            : [t.DIRECTION_BOND_SYMBOLS[0], t.DIRECTION_BOND_SYMBOLS[1]]
                        : ["", ""];
                },
                _getInvertBondDirectionSymbol: function (e) {
                    return e === t.DIRECTION_BOND_SYMBOLS[1]
                        ? t.DIRECTION_BOND_SYMBOLS[0]
                        : t.DIRECTION_BOND_SYMBOLS[1];
                },
            })),
            (Kekule.IO.MimeType.SMILES = "chemical/x-daylight-smiles"),
            (Kekule.IO.DataFormat.SMILES = "smi");
        Kekule.IO.DataFormatsManager.register(
            Kekule.IO.DataFormat.SMILES,
            Kekule.IO.MimeType.SMILES,
            ["smi", "smiles"],
            Kekule.IO.ChemDataType.TEXT,
            "SMILES format"
        );
        var r = [
            Kekule.StructureFragment,
            Kekule.ChemObjList,
            Kekule.ChemStructureObjectGroup,
            Kekule.ChemSpaceElement,
            Kekule.ChemSpace,
        ];
        Kekule.IO.ChemDataWriterManager.register("SMILES", Kekule.IO.SmilesMolWriter, r, [Kekule.IO.DataFormat.SMILES]);
    })(),
    Kekule.globalOptions.add("IO.kekuleNative", { prettyPrint: !0 }),
    (Kekule.IO.KcjReader = Class.create(Kekule.IO.ChemDataReader, {
        CLASS_NAME: "Kekule.IO.KcjReader",
        readData: function (e, t) {
            var r,
                l = t || Kekule.IO.ChemDataType.TEXT;
            return (
                l == Kekule.IO.ChemDataType.JSON && (r = e),
                l != Kekule.IO.ChemDataType.TEXT
                    ? (Kekule.error(Kekule.$L("ErrorMsg.KCJ_INPUT_DATATYPE_NOT_JSON_OR_TEXT")), null)
                    : ((r = DataType.JsonUtility.parse(e)),
                      this.tryApplySuper("readData", [r, Kekule.IO.ChemDataType.JSON]))
            );
        },
        doReadData: function (e, t) {
            var r = Class.ObjSerializerFactory.getSerializer("json");
            return r ? r.load(null, e) : (Kekule.error(Kekule.$L("ErrorMsg.JSON_SERIALIZER_NOT_EXISTS")), null);
        },
    })),
    (Kekule.IO.KcjWriter = Class.create(Kekule.IO.ChemDataWriter, {
        CLASS_NAME: "Kekule.IO.KcjWriter",
        initialize: function (e) {
            this.tryApplySuper("initialize", [e]);
            var t = e || {};
            this.setPrettyPrint(
                Kekule.ObjUtils.isUnset(t.prettyPrint)
                    ? Kekule.globalOptions.IO.kekuleNative.prettyPrint
                    : t.prettyPrint
            );
        },
        initProperties: function () {
            this.defineProp("prettyPrint", { dataType: DataType.BOOL, defaultValue: !0 });
        },
        writeData: function (e, t, r, l) {
            var a = t || Kekule.IO.ChemDataType.TEXT;
            if (a != Kekule.IO.ChemDataType.JSON && a != Kekule.IO.ChemDataType.TEXT)
                return Kekule.error(Kekule.$L("ErrorMsg.KCJ_OUTPUT_DATATYPE_NOT_JSON_OR_TEXT")), null;
            var n = this.tryApplySuper("writeData", [e, Kekule.IO.ChemDataType.JSON]);
            if (a == Kekule.IO.ChemDataType.JSON) return n;
            if (a == Kekule.IO.ChemDataType.TEXT) {
                var i = l && Kekule.ObjUtils.notUnset(l.prettyPrint) ? l.prettyPrint : this.getPrettyPrint();
                return DataType.JsonUtility.serializeToStr(n, { prettyPrint: i });
            }
        },
        doWriteData: function (e, t, r, l) {
            var a = Class.ObjSerializerFactory.getSerializer("json");
            if (!a) return Kekule.error(Kekule.$L("ErrorMsg.JSON_SERIALIZER_NOT_EXISTS")), null;
            var n = {};
            return a.save(e, n), n;
        },
    })),
    (Kekule.IO.KcxReader = Class.create(Kekule.IO.ChemDataReader, {
        CLASS_NAME: "Kekule.IO.KcxReader",
        readData: function (e, t) {
            var r,
                l = t || Kekule.IO.ChemDataType.TEXT;
            return (
                l == Kekule.IO.ChemDataType.DOM && (r = e),
                l != Kekule.IO.ChemDataType.TEXT
                    ? (Kekule.error(Kekule.$L("ErrorMsg.KCX_INPUT_DATATYPE_NOT_DOM_OR_TEXT")), null)
                    : ((r = DataType.XmlUtility.parse(e).documentElement),
                      this.tryApplySuper("readData", [r, Kekule.IO.ChemDataType.DOM]))
            );
        },
        doReadData: function (e, t) {
            var r = Class.ObjSerializerFactory.getSerializer("xml");
            return r ? r.load(null, e) : (Kekule.error(Kekule.$L("ErrorMsg.XML_SERIALIZER_NOT_EXISTS")), null);
        },
    })),
    (Kekule.IO.KcxWriter = Class.create(Kekule.IO.ChemDataWriter, {
        CLASS_NAME: "Kekule.IO.KcxWriter",
        initialize: function (e) {
            this.tryApplySuper("initialize", [e]);
            var t = e || {};
            this.setPrettyPrint(
                Kekule.ObjUtils.isUnset(t.prettyPrint)
                    ? Kekule.globalOptions.IO.kekuleNative.prettyPrint
                    : t.prettyPrint
            ),
                this.setRootTag(t.rootTag || "kcx");
        },
        initProperties: function () {
            this.defineProp("prettyPrint", { dataType: DataType.BOOL, defaultValue: !0 }),
                this.defineProp("rootTag", { dataType: DataType.STRING });
        },
        writeData: function (e, t) {
            var r = t || Kekule.IO.ChemDataType.TEXT;
            if (r != Kekule.IO.ChemDataType.DOM && r != Kekule.IO.ChemDataType.TEXT)
                return Kekule.error(Kekule.$L("ErrorMsg.KCX_OUTPUT_DATATYPE_NOT_DOM_OR_TEXT")), null;
            var l = this.tryApplySuper("writeData", [e, Kekule.IO.ChemDataType.DOM]);
            if (r == Kekule.IO.ChemDataType.DOM) return l;
            if (r == Kekule.IO.ChemDataType.TEXT) {
                var a = { prettyPrint: this.getPrettyPrint() };
                return DataType.XmlUtility.serializeNode(l, a);
            }
        },
        doWriteData: function (e, t) {
            var r = Class.ObjSerializerFactory.getSerializer("xml");
            if (!r) return Kekule.error(Kekule.$L("ErrorMsg.XML_SERIALIZER_NOT_EXISTS")), null;
            var l = DataType.XmlUtility.newDocument(this.getRootTag());
            return r.save(e, l.documentElement), l.documentElement;
        },
    })),
    (function () {
        (Kekule.IO.MimeType.KEKULE_JSON = "chemical/x-kekule-json"),
            (Kekule.IO.MimeType.KEKULE_XML = "chemical/x-kekule-xml"),
            (Kekule.IO.DataFormat.KEKULE_JSON = "Kekule-JSON"),
            (Kekule.IO.DataFormat.KEKULE_XML = "Kekule-XML"),
            Kekule.IO.DataFormatsManager.register(
                "JSON",
                Kekule.IO.MimeType.JSON,
                "json",
                Kekule.IO.ChemDataType.TEXT,
                "JSON format"
            ),
            Kekule.IO.DataFormatsManager.register(
                Kekule.IO.DataFormat.KEKULE_JSON,
                Kekule.IO.MimeType.KEKULE_JSON,
                "kcj",
                Kekule.IO.ChemDataType.TEXT,
                "Kekule Chemical JSON format"
            ),
            Kekule.IO.DataFormatsManager.register(
                Kekule.IO.DataFormat.KEKULE_XML,
                Kekule.IO.MimeType.KEKULE_XML,
                "kcx",
                Kekule.IO.ChemDataType.TEXT,
                "Kekule Chemical XML format"
            );
        var e = Kekule.IO.DataFormatsManager.findFormatId(Kekule.IO.MimeType.JSON),
            t = Kekule.IO.DataFormatsManager.findFormatId(Kekule.IO.MimeType.KEKULE_JSON),
            r = Kekule.IO.DataFormatsManager.findFormatId(Kekule.IO.MimeType.KEKULE_XML);
        Kekule.IO.ChemDataReaderManager.register("json", Kekule.IO.KcjReader, e),
            Kekule.IO.ChemDataReaderManager.register("kcj", Kekule.IO.KcjReader, t),
            Kekule.IO.ChemDataReaderManager.register("kcx", Kekule.IO.KcxReader, r),
            Kekule.IO.ChemDataWriterManager.register("kcj", Kekule.IO.KcjWriter, [Kekule.ChemObject], t, {
                createOptions: { prettyPrint: !1 },
            }),
            Kekule.IO.ChemDataWriterManager.register("kcx", Kekule.IO.KcxWriter, [Kekule.ChemObject], r, {
                createOptions: { prettyPrint: !0 },
            });
    })();
